
ADXL 345 accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b84  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08006c98  08006c98  00007c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007070  08007070  00009218  2**0
                  CONTENTS
  4 .ARM          00000008  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007078  08007078  00009218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007078  08007078  00008078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800707c  0800707c  0000807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08007080  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000218  08007298  00009218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08007298  00009438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad7b  00000000  00000000  00009241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d89  00000000  00000000  00013fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00015d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000825  00000000  00000000  000167d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a5  00000000  00000000  00016ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9ca  00000000  00000000  0002f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c46  00000000  00000000  0003f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000c5cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000c992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c7c 	.word	0x08006c7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	08006c7c 	.word	0x08006c7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <Read_Hw_Data>:
/// A hardware interface function that uses I2C com protocol to receive data
/// @param sla 		//slave address
/// @param Data
/// @param Length
/// @return 1 if acknowledgment received
uint8_t Read_Hw_Data(uint8_t sla, uint8_t *Data, uint8_t Length) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	//assigning the return of receive function that takes param slave address, data and length of data into variable ok
	HAL_StatusTypeDef ok = HAL_I2C_Master_Receive(&hi2c1, sla << 1, Data,
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	b299      	uxth	r1, r3
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2264      	movs	r2, #100	@ 0x64
 8000f62:	9200      	str	r2, [sp, #0]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <Read_Hw_Data+0x40>)
 8000f68:	f001 fc0e 	bl	8002788 <HAL_I2C_Master_Receive>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
			Length, 100);
	// checking if data received or not
	return (ok == HAL_OK) ? 1 : 0;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf0c      	ite	eq
 8000f76:	2301      	moveq	r3, #1
 8000f78:	2300      	movne	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000234 	.word	0x20000234

08000f88 <Write_HW_config>:
/// A hardware interface function that uses I2C com protocol to send data
/// @param sla		//slave address
/// @param Data
/// @param Length
/// @return  1 if acknowledgment receivedi
uint8_t Write_HW_config(uint8_t sla, uint8_t *Data, uint8_t Length) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
	//assigning the return of transmit function that takes param slave address, data and length of data into variable ok
	HAL_StatusTypeDef ok = HAL_I2C_Master_Transmit(&hi2c1, sla << 1, Data,
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	b299      	uxth	r1, r3
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	2264      	movs	r2, #100	@ 0x64
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <Write_HW_config+0x40>)
 8000fac:	f001 faee 	bl	800258c <HAL_I2C_Master_Transmit>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
			Length, 100);
	// checking if data transmitted or not
	return (ok == HAL_OK) ? 1 : 0;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000234 	.word	0x20000234

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fe90 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f888 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f924 	bl	8001228 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f8ca 	bl	8001178 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fe4:	f000 f8f6 	bl	80011d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	ADXL345_Init(&config);
 8000fe8:	4837      	ldr	r0, [pc, #220]	@ (80010c8 <main+0xfc>)
 8000fea:	f000 fb57 	bl	800169c <ADXL345_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <main+0x100>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <main+0x100>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <main+0x100>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
	Alcd_Init(&lcd, 2, 16);
 8001006:	2210      	movs	r2, #16
 8001008:	2102      	movs	r1, #2
 800100a:	4831      	ldr	r0, [pc, #196]	@ (80010d0 <main+0x104>)
 800100c:	f000 fd4c 	bl	8001aa8 <Alcd_Init>
	if (ADXL345_Init(&config) == ADXL345_success) {
 8001010:	482d      	ldr	r0, [pc, #180]	@ (80010c8 <main+0xfc>)
 8001012:	f000 fb43 	bl	800169c <ADXL345_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d108      	bne.n	800102e <main+0x62>
		Alcd_PutAt_n(&lcd, 0, 0, "init ok", 7);
 800101c:	2307      	movs	r3, #7
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4b2c      	ldr	r3, [pc, #176]	@ (80010d4 <main+0x108>)
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	482a      	ldr	r0, [pc, #168]	@ (80010d0 <main+0x104>)
 8001028:	f000 fdf9 	bl	8001c1e <Alcd_PutAt_n>
 800102c:	e007      	b.n	800103e <main+0x72>
	} else {
		Alcd_PutAt_n(&lcd, 0, 0, "init nok", 8);
 800102e:	2308      	movs	r3, #8
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <main+0x10c>)
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <main+0x104>)
 800103a:	f000 fdf0 	bl	8001c1e <Alcd_PutAt_n>
	}
	HAL_Delay(3000);
 800103e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001042:	f000 febb 	bl	8001dbc <HAL_Delay>
	Alcd_Clear(&lcd);
 8001046:	4822      	ldr	r0, [pc, #136]	@ (80010d0 <main+0x104>)
 8001048:	f000 fe02 	bl	8001c50 <Alcd_Clear>
	ADXL345_WriteConfig(&config);
 800104c:	481e      	ldr	r0, [pc, #120]	@ (80010c8 <main+0xfc>)
 800104e:	f000 fb6e 	bl	800172e <ADXL345_WriteConfig>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (ADXL345_ReadData(&config) != 1) {
 8001052:	481d      	ldr	r0, [pc, #116]	@ (80010c8 <main+0xfc>)
 8001054:	f000 fbd2 	bl	80017fc <ADXL345_ReadData>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d028      	beq.n	80010b0 <main+0xe4>
			// Format the acceleration data into a string
			uint8_t length = sprintf(str, "X:%02.2f Y:%02.2f Z:%02.2f \r\n", config.X_Axis,
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <main+0xfc>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f9e0 	bl	8000428 <__aeabi_f2d>
 8001068:	4680      	mov	r8, r0
 800106a:	4689      	mov	r9, r1
					config.Y_Axis,config.Z_Axis);
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <main+0xfc>)
 800106e:	691b      	ldr	r3, [r3, #16]
			uint8_t length = sprintf(str, "X:%02.2f Y:%02.2f Z:%02.2f \r\n", config.X_Axis,
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f9d9 	bl	8000428 <__aeabi_f2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
					config.Y_Axis,config.Z_Axis);
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <main+0xfc>)
 800107c:	695b      	ldr	r3, [r3, #20]
			uint8_t length = sprintf(str, "X:%02.2f Y:%02.2f Z:%02.2f \r\n", config.X_Axis,
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9d2 	bl	8000428 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800108c:	e9cd 4500 	strd	r4, r5, [sp]
 8001090:	4642      	mov	r2, r8
 8001092:	464b      	mov	r3, r9
 8001094:	4911      	ldr	r1, [pc, #68]	@ (80010dc <main+0x110>)
 8001096:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <main+0x114>)
 8001098:	f003 fcba 	bl	8004a10 <siprintf>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]

			// Display the formatted string on the LCD
			HAL_UART_Transmit(&huart1, str, length, 100);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	2364      	movs	r3, #100	@ 0x64
 80010a6:	490e      	ldr	r1, [pc, #56]	@ (80010e0 <main+0x114>)
 80010a8:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <main+0x118>)
 80010aa:	f002 fdbf 	bl	8003c2c <HAL_UART_Transmit>
 80010ae:	e007      	b.n	80010c0 <main+0xf4>



		} else {
			// Handle the case where reading data fails
			Alcd_PutAt_n(&lcd, 0, 0, "Error", 5);
 80010b0:	2305      	movs	r3, #5
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <main+0x11c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <main+0x104>)
 80010bc:	f000 fdaf 	bl	8001c1e <Alcd_PutAt_n>
		}

		// Delay to control the refresh rate
		HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	@ 0x64
 80010c2:	f000 fe7b 	bl	8001dbc <HAL_Delay>
		if (ADXL345_ReadData(&config) != 1) {
 80010c6:	e7c4      	b.n	8001052 <main+0x86>
 80010c8:	20000000 	.word	0x20000000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	20000024 	.word	0x20000024
 80010d4:	08006c98 	.word	0x08006c98
 80010d8:	08006ca0 	.word	0x08006ca0
 80010dc:	08006cac 	.word	0x08006cac
 80010e0:	200002d0 	.word	0x200002d0
 80010e4:	20000288 	.word	0x20000288
 80010e8:	08006ccc 	.word	0x08006ccc

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	@ 0x40
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2228      	movs	r2, #40	@ 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fceb 	bl	8004ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001116:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800112a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f919 	bl	800336c <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001140:	f000 f8a0 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001154:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fb86 	bl	8003870 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800116a:	f000 f88b 	bl	8001284 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3740      	adds	r7, #64	@ 0x40
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	@ (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 f8a5 	bl	8002304 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f860 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000234 	.word	0x20000234
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f002 fcbe 	bl	8003b8c <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f835 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000288 	.word	0x20000288
 8001224:	40013800 	.word	0x40013800

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_GPIO_Init+0x58>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_GPIO_Init+0x58>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	6193      	str	r3, [r2, #24]
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_GPIO_Init+0x58>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_GPIO_Init+0x58>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a0d      	ldr	r2, [pc, #52]	@ (8001280 <MX_GPIO_Init+0x58>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_GPIO_Init+0x58>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_GPIO_Init+0x58>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <MX_GPIO_Init+0x58>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <MX_GPIO_Init+0x58>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <HAL_MspInit+0x5c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_MspInit+0x5c>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_MspInit+0x5c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_MspInit+0x60>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_MspInit+0x60>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a15      	ldr	r2, [pc, #84]	@ (8001364 <HAL_I2C_MspInit+0x70>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d123      	bne.n	800135c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <HAL_I2C_MspInit+0x74>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <HAL_I2C_MspInit+0x74>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_I2C_MspInit+0x74>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132c:	23c0      	movs	r3, #192	@ 0xc0
 800132e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <HAL_I2C_MspInit+0x78>)
 8001340:	f000 fe44 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <HAL_I2C_MspInit+0x74>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <HAL_I2C_MspInit+0x74>)
 800134a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800134e:	61d3      	str	r3, [r2, #28]
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_I2C_MspInit+0x74>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40005400 	.word	0x40005400
 8001368:	40021000 	.word	0x40021000
 800136c:	40010c00 	.word	0x40010c00

08001370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <HAL_UART_MspInit+0x8c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d131      	bne.n	80013f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <HAL_UART_MspInit+0x90>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a1a      	ldr	r2, [pc, #104]	@ (8001400 <HAL_UART_MspInit+0x90>)
 8001396:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_UART_MspInit+0x90>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_UART_MspInit+0x90>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <HAL_UART_MspInit+0x90>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_UART_MspInit+0x90>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	@ (8001404 <HAL_UART_MspInit+0x94>)
 80013d6:	f000 fdf9 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <HAL_UART_MspInit+0x94>)
 80013f0:	f000 fdec 	bl	8001fcc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40013800 	.word	0x40013800
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <NMI_Handler+0x4>

08001410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <UsageFault_Handler+0x4>

08001430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 fc94 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_kill>:

int _kill(int pid, int sig)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001478:	f003 fb80 	bl	8004b7c <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	2216      	movs	r2, #22
 8001480:	601a      	str	r2, [r3, #0]
  return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <_exit>:

void _exit (int status)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001496:	f04f 31ff 	mov.w	r1, #4294967295
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffe7 	bl	800146e <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <_exit+0x12>

080014a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b6:	f3af 8000 	nop.w
 80014ba:	4601      	mov	r1, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf0      	blt.n	80014b6 <_read+0x12>
  }

  return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e009      	b.n	8001504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf1      	blt.n	80014f0 <_write+0x12>
  }
  return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_close>:

int _close(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153c:	605a      	str	r2, [r3, #4]
  return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f003 fae8 	bl	8004b7c <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20005000 	.word	0x20005000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200002e4 	.word	0x200002e4
 80015e0:	20000438 	.word	0x20000438

080015e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f0:	f7ff fff8 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480b      	ldr	r0, [pc, #44]	@ (8001624 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015f6:	490c      	ldr	r1, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015f8:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800160c:	4c09      	ldr	r4, [pc, #36]	@ (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f003 fab5 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161e:	f7ff fcd5 	bl	8000fcc <main>
  bx lr
 8001622:	4770      	bx	lr
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001628:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800162c:	08007080 	.word	0x08007080
  ldr r2, =_sbss
 8001630:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001634:	20000438 	.word	0x20000438

08001638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC1_2_IRQHandler>
	...

0800163c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <DWT_Delay_Init+0x58>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a13      	ldr	r2, [pc, #76]	@ (8001694 <DWT_Delay_Init+0x58>)
 8001646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <DWT_Delay_Init+0x58>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <DWT_Delay_Init+0x58>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001656:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <DWT_Delay_Init+0x5c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0e      	ldr	r2, [pc, #56]	@ (8001698 <DWT_Delay_Init+0x5c>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <DWT_Delay_Init+0x5c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <DWT_Delay_Init+0x5c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <DWT_Delay_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001676:	bf00      	nop
     __ASM volatile ("NOP");
 8001678:	bf00      	nop
  __ASM volatile ("NOP");
 800167a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <DWT_Delay_Init+0x5c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001688:	2301      	movs	r3, #1
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000edf0 	.word	0xe000edf0
 8001698:	e0001000 	.word	0xe0001000

0800169c <ADXL345_Init>:
/// @brief
/// Initializing the ADXL345 accelerometer
/// @param accelerometer ptr to the accelerometer handle
/// @return ADXL345_success if successful

adxl345_stat_t ADXL345_Init(adxl345_t *accelerometer) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	//Set the device to measurement mode
	accelerometer->I2C_Buffer[0] = ADXL345_REG_POWER_CTL;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	222d      	movs	r2, #45	@ 0x2d
 80016a8:	701a      	strb	r2, [r3, #0]
	accelerometer->I2C_Buffer[1] = (accelerometer->Link << 5)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	015b      	lsls	r3, r3, #5
			| (accelerometer->Auto_Sleep << 4) | (accelerometer->Measure << 3)
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b25a      	sxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b25a      	sxtb	r2, r3
			| (accelerometer->Sleep << 2) | (accelerometer->Wakeup);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80016fc:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b25b      	sxtb	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b25b      	sxtb	r3, r3
 8001708:	b2da      	uxtb	r2, r3
	accelerometer->I2C_Buffer[1] = (accelerometer->Link << 5)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	705a      	strb	r2, [r3, #1]

	//apply data
	return (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
			accelerometer->I2C_Buffer, 2) != 1) ?
 8001712:	6879      	ldr	r1, [r7, #4]
	return (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8001714:	2202      	movs	r2, #2
 8001716:	2053      	movs	r0, #83	@ 0x53
 8001718:	4798      	blx	r3
 800171a:	4603      	mov	r3, r0
			ADXL345_failed : ADXL345_success;
 800171c:	2b01      	cmp	r3, #1
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <ADXL345_WriteConfig>:
/// @fn uint8_t ADXL345_WriteConfig(adxl345_t*)
/// @brief
/// Applies the configuration to the device
/// @param accelerometer ptr to the accelerometer handle
/// @return ADXL345_success if successful
adxl345_stat_t ADXL345_WriteConfig(adxl345_t *accelerometer) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	//write the accelerometer offsets
	accelerometer->I2C_Buffer[0] = OFSX_X;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	221e      	movs	r2, #30
 800173a:	701a      	strb	r2, [r3, #0]

	//load the offset values into the I2C buffer
	for (uint8_t x = 0; x < 3; x++) {
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00b      	b.n	800175a <ADXL345_WriteConfig+0x2c>
		accelerometer->I2C_Buffer[1 + x] = accelerometer->Offsets[x];
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	3301      	adds	r3, #1
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	440a      	add	r2, r1
 800174c:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 0; x < 3; x++) {
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3301      	adds	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d9f0      	bls.n	8001742 <ADXL345_WriteConfig+0x14>
	}
	//apply data
	if (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
			accelerometer->I2C_Buffer, 4) != 1) {
 8001764:	6879      	ldr	r1, [r7, #4]
	if (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8001766:	2204      	movs	r2, #4
 8001768:	2053      	movs	r0, #83	@ 0x53
 800176a:	4798      	blx	r3
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d001      	beq.n	8001776 <ADXL345_WriteConfig+0x48>
		return ADXL345_failed;
 8001772:	2301      	movs	r3, #1
 8001774:	e03e      	b.n	80017f4 <ADXL345_WriteConfig+0xc6>
	}

	//assigning the rate and power mode to BW_RATE reg
	accelerometer->I2C_Buffer[0] = ADXL345_REG_BW_RATE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	222c      	movs	r2, #44	@ 0x2c
 800177a:	701a      	strb	r2, [r3, #0]
	accelerometer->I2C_Buffer[1] = (accelerometer->Power_Mode << 4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001782:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	011b      	lsls	r3, r3, #4
			| (accelerometer->Data_Rate);
 800178a:	b25a      	sxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	79db      	ldrb	r3, [r3, #7]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2da      	uxtb	r2, r3
	accelerometer->I2C_Buffer[1] = (accelerometer->Power_Mode << 4)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	705a      	strb	r2, [r3, #1]
	//apply data
	if (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
			accelerometer->I2C_Buffer, 2) != 1)
 80017a0:	6879      	ldr	r1, [r7, #4]
	if (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 80017a2:	2202      	movs	r2, #2
 80017a4:	2053      	movs	r0, #83	@ 0x53
 80017a6:	4798      	blx	r3
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <ADXL345_WriteConfig+0x84>
		return ADXL345_failed;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e020      	b.n	80017f4 <ADXL345_WriteConfig+0xc6>

	//assigning the range and resolution mode to DATA_FORMAT reg
	accelerometer->I2C_Buffer[0] = ADXL345_REG_DATA_FORMAT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2231      	movs	r2, #49	@ 0x31
 80017b6:	701a      	strb	r2, [r3, #0]
	accelerometer->I2C_Buffer[1] = (accelerometer->Resolution << 3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7a1b      	ldrb	r3, [r3, #8]
 80017bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	00db      	lsls	r3, r3, #3
			| (accelerometer->Range);
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	799b      	ldrb	r3, [r3, #6]
 80017ca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
	accelerometer->I2C_Buffer[1] = (accelerometer->Resolution << 3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	705a      	strb	r2, [r3, #1]

	//apply data
	return (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
			accelerometer->I2C_Buffer, 2) != 1) ?
 80017e0:	6879      	ldr	r1, [r7, #4]
	return (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 80017e2:	2202      	movs	r2, #2
 80017e4:	2053      	movs	r0, #83	@ 0x53
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
			ADXL345_failed : ADXL345_success;
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <ADXL345_ReadData>:
/// @fn adxl345_stat_t ADXL345_ReadData(adxl345_t*, int16_t*, int16_t*, int16_t*)
/// @brief
/// Read the acceleration values in each axis
/// @param accelerometer
/// @return ADXL345_success if successful
adxl345_stat_t ADXL345_ReadData(adxl345_t *accelerometer) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	adxl345_stat_t t;
	// Read 6 bytes from the data registers (0x32 to 0x37)
	accelerometer->I2C_Buffer[0] = ADXL345_REG_DATAX0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2232      	movs	r2, #50	@ 0x32
 8001808:	701a      	strb	r2, [r3, #0]

	//Apply data
	t = accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
			accelerometer->I2C_Buffer, 1) != 1 ?
 800180e:	6879      	ldr	r1, [r7, #4]
	t = accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8001810:	2201      	movs	r2, #1
 8001812:	2053      	movs	r0, #83	@ 0x53
 8001814:	4798      	blx	r3
 8001816:	4603      	mov	r3, r0
			ADXL345_failed : ADXL345_success;
 8001818:	2b01      	cmp	r3, #1
 800181a:	bf14      	ite	ne
 800181c:	2301      	movne	r3, #1
 800181e:	2300      	moveq	r3, #0
 8001820:	b2db      	uxtb	r3, r3
	t = accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8001822:	73fb      	strb	r3, [r7, #15]
	if (t != ADXL345_success) {
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <ADXL345_ReadData+0x32>
		return t;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	e04e      	b.n	80018cc <ADXL345_ReadData+0xd0>
	}
	//Read data of axes
	accelerometer->AG_HW_Interface_t.Read_Hw_Data(ADXL345_SLA,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
			accelerometer->I2C_Buffer, 6);
 8001832:	6879      	ldr	r1, [r7, #4]
	accelerometer->AG_HW_Interface_t.Read_Hw_Data(ADXL345_SLA,
 8001834:	2206      	movs	r2, #6
 8001836:	2053      	movs	r0, #83	@ 0x53
 8001838:	4798      	blx	r3
	//Convert the data to 16-bit integers (signed)
	int16_t x = ( accelerometer->I2C_Buffer[1] << 8)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	021b      	lsls	r3, r3, #8
			| accelerometer->I2C_Buffer[0];
 8001840:	b21a      	sxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b21b      	sxth	r3, r3
	int16_t x = ( accelerometer->I2C_Buffer[1] << 8)
 8001848:	4313      	orrs	r3, r2
 800184a:	81bb      	strh	r3, [r7, #12]
	int16_t y = ( accelerometer->I2C_Buffer[3] << 8)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	021b      	lsls	r3, r3, #8
			| accelerometer->I2C_Buffer[2];
 8001852:	b21a      	sxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	789b      	ldrb	r3, [r3, #2]
 8001858:	b21b      	sxth	r3, r3
	int16_t y = ( accelerometer->I2C_Buffer[3] << 8)
 800185a:	4313      	orrs	r3, r2
 800185c:	817b      	strh	r3, [r7, #10]
	int16_t z = ( accelerometer->I2C_Buffer[5] << 8)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	795b      	ldrb	r3, [r3, #5]
 8001862:	021b      	lsls	r3, r3, #8
			| accelerometer->I2C_Buffer[4];
 8001864:	b21a      	sxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	b21b      	sxth	r3, r3
	int16_t z = ( accelerometer->I2C_Buffer[5] << 8)
 800186c:	4313      	orrs	r3, r2
 800186e:	813b      	strh	r3, [r7, #8]
	//Convert into g values
	accelerometer->X_Axis = (float)	x / 128;
 8001870:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f9c1 	bl	8000bfc <__aeabi_i2f>
 800187a:	4603      	mov	r3, r0
 800187c:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fac3 	bl	8000e0c <__aeabi_fdiv>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60da      	str	r2, [r3, #12]
	accelerometer->Y_Axis = (float) y / 128;
 800188e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f9b2 	bl	8000bfc <__aeabi_i2f>
 8001898:	4603      	mov	r3, r0
 800189a:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fab4 	bl	8000e0c <__aeabi_fdiv>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	611a      	str	r2, [r3, #16]
	accelerometer->Z_Axis = (float) z / 128;
 80018ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f9a3 	bl	8000bfc <__aeabi_i2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff faa5 	bl	8000e0c <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	615a      	str	r2, [r3, #20]

	return t;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80018dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <DWT_Delay_us+0x40>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80018e2:	f002 f903 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <DWT_Delay_us+0x44>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80018f8:	bf00      	nop
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <DWT_Delay_us+0x40>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad2      	subs	r2, r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3f8      	bcc.n	80018fa <DWT_Delay_us+0x26>
		;
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e0001000 	.word	0xe0001000
 8001918:	431bde83 	.word	0x431bde83

0800191c <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffd3 	bl	80018d4 <DWT_Delay_us>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7a1b      	ldrb	r3, [r3, #8]
 800194c:	4619      	mov	r1, r3
 800194e:	230f      	movs	r3, #15
 8001950:	408b      	lsls	r3, r1
 8001952:	43db      	mvns	r3, r3
 8001954:	4619      	mov	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	400a      	ands	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	7a09      	ldrb	r1, [r1, #8]
 800196a:	408b      	lsls	r3, r1
 800196c:	4619      	mov	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6958      	ldr	r0, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	8b1b      	ldrh	r3, [r3, #24]
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	4619      	mov	r1, r3
 8001998:	f000 fc9c 	bl	80022d4 <HAL_GPIO_WritePin>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68d8      	ldr	r0, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8a1b      	ldrh	r3, [r3, #16]
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	4619      	mov	r1, r3
 80019bc:	f000 fc8a 	bl	80022d4 <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	2301      	movs	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f107 0208 	add.w	r2, r7, #8
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fae8 	bl	8001fcc <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8a1b      	ldrh	r3, [r3, #16]
 8001a00:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f107 0208 	add.w	r2, r7, #8
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fadd 	bl	8001fcc <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7a1b      	ldrb	r3, [r3, #8]
 8001a16:	461a      	mov	r2, r3
 8001a18:	230f      	movs	r3, #15
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f107 0208 	add.w	r2, r7, #8
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 facf 	bl	8001fcc <HAL_GPIO_Init>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
 8001a42:	4613      	mov	r3, r2
 8001a44:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff98 	bl	8001980 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8001a50:	78bb      	ldrb	r3, [r7, #2]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff6c 	bl	8001936 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8001a5e:	2101      	movs	r1, #1
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff9f 	bl	80019a4 <EN_SET>
 8001a66:	200a      	movs	r0, #10
 8001a68:	f7ff ff58 	bl	800191c <usDelay>
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff98 	bl	80019a4 <EN_SET>
 8001a74:	2064      	movs	r0, #100	@ 0x64
 8001a76:	f7ff ff51 	bl	800191c <usDelay>
	;
	Write_HalfByte(lcd, value);
 8001a7a:	78bb      	ldrb	r3, [r7, #2]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff59 	bl	8001936 <Write_HalfByte>
	PulseEn
 8001a84:	2101      	movs	r1, #1
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff8c 	bl	80019a4 <EN_SET>
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f7ff ff45 	bl	800191c <usDelay>
 8001a92:	2100      	movs	r1, #0
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff85 	bl	80019a4 <EN_SET>
 8001a9a:	2064      	movs	r0, #100	@ 0x64
 8001a9c:	f7ff ff3e 	bl	800191c <usDelay>
	;
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8001ab8:	f7ff fdc0 	bl	800163c <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff83 	bl	80019c8 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	78ba      	ldrb	r2, [r7, #2]
 8001ad2:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8001ad4:	78bb      	ldrb	r3, [r7, #2]
 8001ad6:	3340      	adds	r3, #64	@ 0x40
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff4d 	bl	8001980 <RS_SET>
	EN_SET(lcd, 0);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff5b 	bl	80019a4 <EN_SET>
	usDelay(50000);
 8001aee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001af2:	f7ff ff13 	bl	800191c <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e018      	b.n	8001b2e <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8001afc:	2103      	movs	r1, #3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ff19 	bl	8001936 <Write_HalfByte>
		PulseEn
 8001b04:	2101      	movs	r1, #1
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff4c 	bl	80019a4 <EN_SET>
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	f7ff ff05 	bl	800191c <usDelay>
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff45 	bl	80019a4 <EN_SET>
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f7ff fefe 	bl	800191c <usDelay>
		;
		usDelay(4500);
 8001b20:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001b24:	f7ff fefa 	bl	800191c <usDelay>
	for (x = 0; x < 2; x++)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d9e3      	bls.n	8001afc <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8001b34:	2103      	movs	r1, #3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fefd 	bl	8001936 <Write_HalfByte>
	PulseEn
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff30 	bl	80019a4 <EN_SET>
 8001b44:	200a      	movs	r0, #10
 8001b46:	f7ff fee9 	bl	800191c <usDelay>
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <EN_SET>
 8001b52:	2064      	movs	r0, #100	@ 0x64
 8001b54:	f7ff fee2 	bl	800191c <usDelay>
	;
	usDelay(150);
 8001b58:	2096      	movs	r0, #150	@ 0x96
 8001b5a:	f7ff fedf 	bl	800191c <usDelay>
	Write_HalfByte(lcd, 0x02);
 8001b5e:	2102      	movs	r1, #2
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fee8 	bl	8001936 <Write_HalfByte>
	PulseEn
 8001b66:	2101      	movs	r1, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff1b 	bl	80019a4 <EN_SET>
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f7ff fed4 	bl	800191c <usDelay>
 8001b74:	2100      	movs	r1, #0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff14 	bl	80019a4 <EN_SET>
 8001b7c:	2064      	movs	r0, #100	@ 0x64
 8001b7e:	f7ff fecd 	bl	800191c <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001b82:	2228      	movs	r2, #40	@ 0x28
 8001b84:	2100      	movs	r1, #0
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff55 	bl	8001a36 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f86d 	bl	8001c72 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f859 	bl	8001c50 <Alcd_Clear>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70fb      	strb	r3, [r7, #3]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	7e9a      	ldrb	r2, [r3, #26]
 8001bbe:	78bb      	ldrb	r3, [r7, #2]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff2f 	bl	8001a36 <Alcd_SendByte>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	e00b      	b.n	8001c0c <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2101      	movs	r1, #1
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff ff18 	bl	8001a36 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	75fb      	strb	r3, [r7, #23]
 8001c0c:	7dfa      	ldrb	r2, [r7, #23]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3ef      	bcc.n	8001bf4 <Alcd_Put_n+0x14>
	}
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	72fb      	strb	r3, [r7, #11]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8001c30:	7aba      	ldrb	r2, [r7, #10]
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff ffb5 	bl	8001ba6 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8001c3c:	7e3b      	ldrb	r3, [r7, #24]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff ffcc 	bl	8001be0 <Alcd_Put_n>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff feea 	bl	8001a36 <Alcd_SendByte>
	usDelay(2000);
 8001c62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c66:	f7ff fe59 	bl	800191c <usDelay>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	4608      	mov	r0, r1
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	70fb      	strb	r3, [r7, #3]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70bb      	strb	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d006      	beq.n	8001ca6 <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7f9b      	ldrb	r3, [r3, #30]
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8001ca6:	78bb      	ldrb	r3, [r7, #2]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7f9b      	ldrb	r3, [r3, #30]
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8001cba:	787b      	ldrb	r3, [r7, #1]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7f9b      	ldrb	r3, [r3, #30]
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7f9b      	ldrb	r3, [r3, #30]
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7f9b      	ldrb	r3, [r3, #30]
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fea3 	bl	8001a36 <Alcd_SendByte>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_Init+0x28>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	@ (8001d20 <HAL_Init+0x28>)
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f92b 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	200f      	movs	r0, #15
 8001d10:	f000 f808 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fabc 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f935 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f90b 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000044 	.word	0x20000044
 8001d7c:	2000004c 	.word	0x2000004c
 8001d80:	20000048 	.word	0x20000048

08001d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_IncTick+0x1c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_IncTick+0x20>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a03      	ldr	r2, [pc, #12]	@ (8001da4 <HAL_IncTick+0x20>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	2000004c 	.word	0x2000004c
 8001da4:	200002e8 	.word	0x200002e8

08001da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b02      	ldr	r3, [pc, #8]	@ (8001db8 <HAL_GetTick+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	200002e8 	.word	0x200002e8

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffe0 	bl	8001da8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000004c 	.word	0x2000004c

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff90 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff49 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff5e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff90 	bl	8001ebc <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5f 	bl	8001e68 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffb0 	bl	8001f20 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b08b      	sub	sp, #44	@ 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e169      	b.n	80022b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8158 	bne.w	80022ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a9a      	ldr	r2, [pc, #616]	@ (800226c <HAL_GPIO_Init+0x2a0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d05e      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002008:	4a98      	ldr	r2, [pc, #608]	@ (800226c <HAL_GPIO_Init+0x2a0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d875      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800200e:	4a98      	ldr	r2, [pc, #608]	@ (8002270 <HAL_GPIO_Init+0x2a4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d058      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002014:	4a96      	ldr	r2, [pc, #600]	@ (8002270 <HAL_GPIO_Init+0x2a4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d86f      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800201a:	4a96      	ldr	r2, [pc, #600]	@ (8002274 <HAL_GPIO_Init+0x2a8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d052      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002020:	4a94      	ldr	r2, [pc, #592]	@ (8002274 <HAL_GPIO_Init+0x2a8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d869      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002026:	4a94      	ldr	r2, [pc, #592]	@ (8002278 <HAL_GPIO_Init+0x2ac>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04c      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 800202c:	4a92      	ldr	r2, [pc, #584]	@ (8002278 <HAL_GPIO_Init+0x2ac>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d863      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002032:	4a92      	ldr	r2, [pc, #584]	@ (800227c <HAL_GPIO_Init+0x2b0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d046      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002038:	4a90      	ldr	r2, [pc, #576]	@ (800227c <HAL_GPIO_Init+0x2b0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d85d      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d82a      	bhi.n	8002098 <HAL_GPIO_Init+0xcc>
 8002042:	2b12      	cmp	r3, #18
 8002044:	d859      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002046:	a201      	add	r2, pc, #4	@ (adr r2, 800204c <HAL_GPIO_Init+0x80>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	080020c7 	.word	0x080020c7
 8002050:	080020a1 	.word	0x080020a1
 8002054:	080020b3 	.word	0x080020b3
 8002058:	080020f5 	.word	0x080020f5
 800205c:	080020fb 	.word	0x080020fb
 8002060:	080020fb 	.word	0x080020fb
 8002064:	080020fb 	.word	0x080020fb
 8002068:	080020fb 	.word	0x080020fb
 800206c:	080020fb 	.word	0x080020fb
 8002070:	080020fb 	.word	0x080020fb
 8002074:	080020fb 	.word	0x080020fb
 8002078:	080020fb 	.word	0x080020fb
 800207c:	080020fb 	.word	0x080020fb
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020fb 	.word	0x080020fb
 8002088:	080020fb 	.word	0x080020fb
 800208c:	080020fb 	.word	0x080020fb
 8002090:	080020a9 	.word	0x080020a9
 8002094:	080020bd 	.word	0x080020bd
 8002098:	4a79      	ldr	r2, [pc, #484]	@ (8002280 <HAL_GPIO_Init+0x2b4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209e:	e02c      	b.n	80020fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e029      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	3304      	adds	r3, #4
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e024      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	3308      	adds	r3, #8
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e01f      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	330c      	adds	r3, #12
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e01a      	b.n	80020fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ce:	2304      	movs	r3, #4
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e013      	b.n	80020fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020dc:	2308      	movs	r3, #8
 80020de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	611a      	str	r2, [r3, #16]
          break;
 80020e6:	e009      	b.n	80020fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e8:	2308      	movs	r3, #8
 80020ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	615a      	str	r2, [r3, #20]
          break;
 80020f2:	e003      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x130>
          break;
 80020fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2bff      	cmp	r3, #255	@ 0xff
 8002100:	d801      	bhi.n	8002106 <HAL_GPIO_Init+0x13a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	e001      	b.n	800210a <HAL_GPIO_Init+0x13e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	@ 0xff
 8002110:	d802      	bhi.n	8002118 <HAL_GPIO_Init+0x14c>
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x152>
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	3b08      	subs	r3, #8
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	210f      	movs	r1, #15
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80b1 	beq.w	80022ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800214c:	4b4d      	ldr	r3, [pc, #308]	@ (8002284 <HAL_GPIO_Init+0x2b8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a4c      	ldr	r2, [pc, #304]	@ (8002284 <HAL_GPIO_Init+0x2b8>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b4a      	ldr	r3, [pc, #296]	@ (8002284 <HAL_GPIO_Init+0x2b8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002164:	4a48      	ldr	r2, [pc, #288]	@ (8002288 <HAL_GPIO_Init+0x2bc>)
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a40      	ldr	r2, [pc, #256]	@ (800228c <HAL_GPIO_Init+0x2c0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_GPIO_Init+0x1ec>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3f      	ldr	r2, [pc, #252]	@ (8002290 <HAL_GPIO_Init+0x2c4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00d      	beq.n	80021b4 <HAL_GPIO_Init+0x1e8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3e      	ldr	r2, [pc, #248]	@ (8002294 <HAL_GPIO_Init+0x2c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x1e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002298 <HAL_GPIO_Init+0x2cc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_GPIO_Init+0x1e0>
 80021a8:	2303      	movs	r3, #3
 80021aa:	e006      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e004      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021b8:	2300      	movs	r3, #0
 80021ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021bc:	f002 0203 	and.w	r2, r2, #3
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	4093      	lsls	r3, r2
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ca:	492f      	ldr	r1, [pc, #188]	@ (8002288 <HAL_GPIO_Init+0x2bc>)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	492c      	ldr	r1, [pc, #176]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021f2:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4928      	ldr	r1, [pc, #160]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800220c:	4b23      	ldr	r3, [pc, #140]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4922      	ldr	r1, [pc, #136]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800221a:	4b20      	ldr	r3, [pc, #128]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	43db      	mvns	r3, r3
 8002222:	491e      	ldr	r1, [pc, #120]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 8002224:	4013      	ands	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4918      	ldr	r1, [pc, #96]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4914      	ldr	r1, [pc, #80]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d021      	beq.n	80022a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	490e      	ldr	r1, [pc, #56]	@ (800229c <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e021      	b.n	80022ae <HAL_GPIO_Init+0x2e2>
 800226a:	bf00      	nop
 800226c:	10320000 	.word	0x10320000
 8002270:	10310000 	.word	0x10310000
 8002274:	10220000 	.word	0x10220000
 8002278:	10210000 	.word	0x10210000
 800227c:	10120000 	.word	0x10120000
 8002280:	10110000 	.word	0x10110000
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000
 800228c:	40010800 	.word	0x40010800
 8002290:	40010c00 	.word	0x40010c00
 8002294:	40011000 	.word	0x40011000
 8002298:	40011400 	.word	0x40011400
 800229c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_GPIO_Init+0x304>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	4909      	ldr	r1, [pc, #36]	@ (80022d0 <HAL_GPIO_Init+0x304>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	3301      	adds	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f47f ae8e 	bne.w	8001fe0 <HAL_GPIO_Init+0x14>
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	372c      	adds	r7, #44	@ 0x2c
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e12b      	b.n	800256e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe ffe2 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	@ 0x24
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002368:	f001 fbca 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 800236c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a81      	ldr	r2, [pc, #516]	@ (8002578 <HAL_I2C_Init+0x274>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d807      	bhi.n	8002388 <HAL_I2C_Init+0x84>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a80      	ldr	r2, [pc, #512]	@ (800257c <HAL_I2C_Init+0x278>)
 800237c:	4293      	cmp	r3, r2
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e006      	b.n	8002396 <HAL_I2C_Init+0x92>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a7d      	ldr	r2, [pc, #500]	@ (8002580 <HAL_I2C_Init+0x27c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	bf94      	ite	ls
 8002390:	2301      	movls	r3, #1
 8002392:	2300      	movhi	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0e7      	b.n	800256e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4a78      	ldr	r2, [pc, #480]	@ (8002584 <HAL_I2C_Init+0x280>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002578 <HAL_I2C_Init+0x274>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d802      	bhi.n	80023d8 <HAL_I2C_Init+0xd4>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	e009      	b.n	80023ec <HAL_I2C_Init+0xe8>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	4a69      	ldr	r2, [pc, #420]	@ (8002588 <HAL_I2C_Init+0x284>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	3301      	adds	r3, #1
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	495c      	ldr	r1, [pc, #368]	@ (8002578 <HAL_I2C_Init+0x274>)
 8002408:	428b      	cmp	r3, r1
 800240a:	d819      	bhi.n	8002440 <HAL_I2C_Init+0x13c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fbb1 f3f3 	udiv	r3, r1, r3
 800241a:	1c59      	adds	r1, r3, #1
 800241c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002420:	400b      	ands	r3, r1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_I2C_Init+0x138>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1e59      	subs	r1, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fbb1 f3f3 	udiv	r3, r1, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243a:	e051      	b.n	80024e0 <HAL_I2C_Init+0x1dc>
 800243c:	2304      	movs	r3, #4
 800243e:	e04f      	b.n	80024e0 <HAL_I2C_Init+0x1dc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d111      	bne.n	800246c <HAL_I2C_Init+0x168>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1e58      	subs	r0, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	440b      	add	r3, r1
 8002456:	fbb0 f3f3 	udiv	r3, r0, r3
 800245a:	3301      	adds	r3, #1
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e012      	b.n	8002492 <HAL_I2C_Init+0x18e>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	0099      	lsls	r1, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Init+0x196>
 8002496:	2301      	movs	r3, #1
 8002498:	e022      	b.n	80024e0 <HAL_I2C_Init+0x1dc>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10e      	bne.n	80024c0 <HAL_I2C_Init+0x1bc>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e58      	subs	r0, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	460b      	mov	r3, r1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	440b      	add	r3, r1
 80024b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024be:	e00f      	b.n	80024e0 <HAL_I2C_Init+0x1dc>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e58      	subs	r0, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	0099      	lsls	r1, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	6809      	ldr	r1, [r1, #0]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800250e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6911      	ldr	r1, [r2, #16]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68d2      	ldr	r2, [r2, #12]
 800251a:	4311      	orrs	r1, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	430b      	orrs	r3, r1
 8002522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	000186a0 	.word	0x000186a0
 800257c:	001e847f 	.word	0x001e847f
 8002580:	003d08ff 	.word	0x003d08ff
 8002584:	431bde83 	.word	0x431bde83
 8002588:	10624dd3 	.word	0x10624dd3

0800258c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	460b      	mov	r3, r1
 800259a:	817b      	strh	r3, [r7, #10]
 800259c:	4613      	mov	r3, r2
 800259e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff fc02 	bl	8001da8 <HAL_GetTick>
 80025a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	f040 80e0 	bne.w	8002774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2319      	movs	r3, #25
 80025ba:	2201      	movs	r2, #1
 80025bc:	4970      	ldr	r1, [pc, #448]	@ (8002780 <HAL_I2C_Master_Transmit+0x1f4>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fc9e 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0d3      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_I2C_Master_Transmit+0x50>
 80025d8:	2302      	movs	r3, #2
 80025da:	e0cc      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d007      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	@ 0x21
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2210      	movs	r2, #16
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a50      	ldr	r2, [pc, #320]	@ (8002784 <HAL_I2C_Master_Transmit+0x1f8>)
 8002642:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fb08 	bl	8002c60 <I2C_MasterRequestWrite>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e08d      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002670:	e066      	b.n	8002740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fd5c 	bl	8003134 <I2C_WaitOnTXEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	2b04      	cmp	r3, #4
 8002688:	d107      	bne.n	800269a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d11b      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x188>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d017      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	6a39      	ldr	r1, [r7, #32]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fd53 	bl	80031c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e01a      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d194      	bne.n	8002672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	00100002 	.word	0x00100002
 8002784:	ffff0000 	.word	0xffff0000

08002788 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	@ 0x30
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	461a      	mov	r2, r3
 8002794:	460b      	mov	r3, r1
 8002796:	817b      	strh	r3, [r7, #10]
 8002798:	4613      	mov	r3, r2
 800279a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff fb02 	bl	8001da8 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	f040 824b 	bne.w	8002c4a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	497f      	ldr	r1, [pc, #508]	@ (80029bc <HAL_I2C_Master_Receive+0x234>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fb9e 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e23e      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_Master_Receive+0x54>
 80027d8:	2302      	movs	r3, #2
 80027da:	e237      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d007      	beq.n	8002802 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2222      	movs	r2, #34	@ 0x22
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2210      	movs	r2, #16
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	893a      	ldrh	r2, [r7, #8]
 8002832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4a5f      	ldr	r2, [pc, #380]	@ (80029c0 <HAL_I2C_Master_Receive+0x238>)
 8002842:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fa8a 	bl	8002d64 <I2C_MasterRequestRead>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e1f8      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d113      	bne.n	800288a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e1cc      	b.n	8002c24 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	2b01      	cmp	r3, #1
 8002890:	d11e      	bne.n	80028d0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a2:	b672      	cpsid	i
}
 80028a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028cc:	b662      	cpsie	i
}
 80028ce:	e035      	b.n	800293c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d11e      	bne.n	8002916 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002910:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002912:	b662      	cpsie	i
}
 8002914:	e012      	b.n	800293c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800293c:	e172      	b.n	8002c24 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b03      	cmp	r3, #3
 8002944:	f200 811f 	bhi.w	8002b86 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b01      	cmp	r3, #1
 800294e:	d123      	bne.n	8002998 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002952:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fc7d 	bl	8003254 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e173      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002996:	e145      	b.n	8002c24 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b02      	cmp	r3, #2
 800299e:	d152      	bne.n	8002a46 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	2200      	movs	r2, #0
 80029a8:	4906      	ldr	r1, [pc, #24]	@ (80029c4 <HAL_I2C_Master_Receive+0x23c>)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 faa8 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e148      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000
 80029c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0e:	b662      	cpsie	i
}
 8002a10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a44:	e0ee      	b.n	8002c24 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4981      	ldr	r1, [pc, #516]	@ (8002c54 <HAL_I2C_Master_Receive+0x4cc>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa55 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0f5      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a70:	b672      	cpsid	i
}
 8002a72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c58 <HAL_I2C_Master_Receive+0x4d0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	08db      	lsrs	r3, r3, #3
 8002aac:	4a6b      	ldr	r2, [pc, #428]	@ (8002c5c <HAL_I2C_Master_Receive+0x4d4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0a1a      	lsrs	r2, r3, #8
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00da      	lsls	r2, r3, #3
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d118      	bne.n	8002afe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002aee:	b662      	cpsie	i
}
 8002af0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0a6      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d1d9      	bne.n	8002ac0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b4e:	b662      	cpsie	i
}
 8002b50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b84:	e04e      	b.n	8002c24 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fb62 	bl	8003254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e058      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d124      	bne.n	8002c24 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d107      	bne.n	8002bf2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f ae88 	bne.w	800293e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	00010004 	.word	0x00010004
 8002c58:	20000044 	.word	0x20000044
 8002c5c:	14f8b589 	.word	0x14f8b589

08002c60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d006      	beq.n	8002c8a <I2C_MasterRequestWrite+0x2a>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d003      	beq.n	8002c8a <I2C_MasterRequestWrite+0x2a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e00b      	b.n	8002cb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d107      	bne.n	8002cb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f91d 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e035      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e01b      	b.n	8002d3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	11db      	asrs	r3, r3, #7
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f063 030f 	orn	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	490e      	ldr	r1, [pc, #56]	@ (8002d5c <I2C_MasterRequestWrite+0xfc>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f966 	bl	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e010      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4907      	ldr	r1, [pc, #28]	@ (8002d60 <I2C_MasterRequestWrite+0x100>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f956 	bl	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	00010008 	.word	0x00010008
 8002d60:	00010002 	.word	0x00010002

08002d64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	460b      	mov	r3, r1
 8002d72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d006      	beq.n	8002d9e <I2C_MasterRequestRead+0x3a>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d003      	beq.n	8002d9e <I2C_MasterRequestRead+0x3a>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d9c:	d108      	bne.n	8002db0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e00b      	b.n	8002dc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db4:	2b11      	cmp	r3, #17
 8002db6:	d107      	bne.n	8002dc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f893 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dee:	d103      	bne.n	8002df8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e079      	b.n	8002ef0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e04:	d108      	bne.n	8002e18 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	611a      	str	r2, [r3, #16]
 8002e16:	e05f      	b.n	8002ed8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e18:	897b      	ldrh	r3, [r7, #10]
 8002e1a:	11db      	asrs	r3, r3, #7
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 0306 	and.w	r3, r3, #6
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f063 030f 	orn	r3, r3, #15
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4930      	ldr	r1, [pc, #192]	@ (8002ef8 <I2C_MasterRequestRead+0x194>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f8dc 	bl	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e054      	b.n	8002ef0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4929      	ldr	r1, [pc, #164]	@ (8002efc <I2C_MasterRequestRead+0x198>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f8cc 	bl	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e044      	b.n	8002ef0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f831 	bl	8002f00 <I2C_WaitOnFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb2:	d103      	bne.n	8002ebc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e017      	b.n	8002ef0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	11db      	asrs	r3, r3, #7
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0306 	and.w	r3, r3, #6
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f063 030e 	orn	r3, r3, #14
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4907      	ldr	r1, [pc, #28]	@ (8002efc <I2C_MasterRequestRead+0x198>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f888 	bl	8002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010008 	.word	0x00010008
 8002efc:	00010002 	.word	0x00010002

08002f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f10:	e048      	b.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d044      	beq.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe ff45 	bl	8001da8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d139      	bne.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	0c1b      	lsrs	r3, r3, #16
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d10d      	bne.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	e00c      	b.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d116      	bne.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e023      	b.n	8002fec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d10d      	bne.n	8002fca <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	e00c      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d093      	beq.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003002:	e071      	b.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003012:	d123      	bne.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003022:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800302c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f043 0204 	orr.w	r2, r3, #4
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e067      	b.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d041      	beq.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003064:	f7fe fea0 	bl	8001da8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d302      	bcc.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d136      	bne.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e00b      	b.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e021      	b.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10c      	bne.n	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e00b      	b.n	8003124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4013      	ands	r3, r2
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf14      	ite	ne
 800311e:	2301      	movne	r3, #1
 8003120:	2300      	moveq	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f af6d 	bne.w	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003140:	e034      	b.n	80031ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f8e3 	bl	800330e <I2C_IsAcknowledgeFailed>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e034      	b.n	80031bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d028      	beq.n	80031ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe fe25 	bl	8001da8 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11d      	bne.n	80031ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317a:	2b80      	cmp	r3, #128	@ 0x80
 800317c:	d016      	beq.n	80031ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e007      	b.n	80031bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d1c3      	bne.n	8003142 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d0:	e034      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f89b 	bl	800330e <I2C_IsAcknowledgeFailed>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e034      	b.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d028      	beq.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fe fddd 	bl	8001da8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11d      	bne.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d016      	beq.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e007      	b.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d1c3      	bne.n	80031d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003260:	e049      	b.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d119      	bne.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e030      	b.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fd80 	bl	8001da8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11d      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b40      	cmp	r3, #64	@ 0x40
 80032c6:	d016      	beq.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e007      	b.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b40      	cmp	r3, #64	@ 0x40
 8003302:	d1ae      	bne.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003324:	d11b      	bne.n	800335e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800332e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f043 0204 	orr.w	r2, r3, #4
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e272      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8087 	beq.w	800349a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800338c:	4b92      	ldr	r3, [pc, #584]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b04      	cmp	r3, #4
 8003396:	d00c      	beq.n	80033b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003398:	4b8f      	ldr	r3, [pc, #572]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d112      	bne.n	80033ca <HAL_RCC_OscConfig+0x5e>
 80033a4:	4b8c      	ldr	r3, [pc, #560]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b0:	d10b      	bne.n	80033ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b2:	4b89      	ldr	r3, [pc, #548]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d06c      	beq.n	8003498 <HAL_RCC_OscConfig+0x12c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d168      	bne.n	8003498 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e24c      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x76>
 80033d4:	4b80      	ldr	r3, [pc, #512]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7f      	ldr	r2, [pc, #508]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e02e      	b.n	8003440 <HAL_RCC_OscConfig+0xd4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x98>
 80033ea:	4b7b      	ldr	r3, [pc, #492]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7a      	ldr	r2, [pc, #488]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b78      	ldr	r3, [pc, #480]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a77      	ldr	r2, [pc, #476]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xd4>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0xbc>
 800340e:	4b72      	ldr	r3, [pc, #456]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a71      	ldr	r2, [pc, #452]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b6f      	ldr	r3, [pc, #444]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6e      	ldr	r2, [pc, #440]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xd4>
 8003428:	4b6b      	ldr	r3, [pc, #428]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a6a      	ldr	r2, [pc, #424]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b68      	ldr	r3, [pc, #416]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a67      	ldr	r2, [pc, #412]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fcae 	bl	8001da8 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fcaa 	bl	8001da8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e200      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b5d      	ldr	r3, [pc, #372]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xe4>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fc9a 	bl	8001da8 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fc96 	bl	8001da8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	@ 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1ec      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b53      	ldr	r3, [pc, #332]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x10c>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d063      	beq.n	800356e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a6:	4b4c      	ldr	r3, [pc, #304]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034b2:	4b49      	ldr	r3, [pc, #292]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x18c>
 80034be:	4b46      	ldr	r3, [pc, #280]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b43      	ldr	r3, [pc, #268]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x176>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1c0      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4939      	ldr	r1, [pc, #228]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e03a      	b.n	800356e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b36      	ldr	r3, [pc, #216]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003506:	f7fe fc4f 	bl	8001da8 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350e:	f7fe fc4b 	bl	8001da8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1a1      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	4b2d      	ldr	r3, [pc, #180]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b2a      	ldr	r3, [pc, #168]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4927      	ldr	r1, [pc, #156]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <HAL_RCC_OscConfig+0x270>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fc2e 	bl	8001da8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7fe fc2a 	bl	8001da8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e180      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d03a      	beq.n	80035f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d019      	beq.n	80035b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fe fc0e 	bl	8001da8 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe fc0a 	bl	8001da8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e160      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f000 face 	bl	8003b50 <RCC_Delay>
 80035b4:	e01c      	b.n	80035f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_RCC_OscConfig+0x274>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe fbf4 	bl	8001da8 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c2:	e00f      	b.n	80035e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe fbf0 	bl	8001da8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d908      	bls.n	80035e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e146      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	42420000 	.word	0x42420000
 80035e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	4b92      	ldr	r3, [pc, #584]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e9      	bne.n	80035c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80a6 	beq.w	800374a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b8b      	ldr	r3, [pc, #556]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4a87      	ldr	r2, [pc, #540]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003618:	61d3      	str	r3, [r2, #28]
 800361a:	4b85      	ldr	r3, [pc, #532]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b82      	ldr	r3, [pc, #520]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a7e      	ldr	r2, [pc, #504]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7fe fbb1 	bl	8001da8 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe fbad 	bl	8001da8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b64      	cmp	r3, #100	@ 0x64
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e103      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	4b75      	ldr	r3, [pc, #468]	@ (8003834 <HAL_RCC_OscConfig+0x4c8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x312>
 8003670:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a6e      	ldr	r2, [pc, #440]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	e02d      	b.n	80036da <HAL_RCC_OscConfig+0x36e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x334>
 8003686:	4b6a      	ldr	r3, [pc, #424]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	4b67      	ldr	r3, [pc, #412]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a66      	ldr	r2, [pc, #408]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	e01c      	b.n	80036da <HAL_RCC_OscConfig+0x36e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x356>
 80036a8:	4b61      	ldr	r3, [pc, #388]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	4a60      	ldr	r2, [pc, #384]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6213      	str	r3, [r2, #32]
 80036b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	e00b      	b.n	80036da <HAL_RCC_OscConfig+0x36e>
 80036c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	6213      	str	r3, [r2, #32]
 80036ce:	4b58      	ldr	r3, [pc, #352]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a57      	ldr	r2, [pc, #348]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d015      	beq.n	800370e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe fb61 	bl	8001da8 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe fb5d 	bl	8001da8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0b1      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ee      	beq.n	80036ea <HAL_RCC_OscConfig+0x37e>
 800370c:	e014      	b.n	8003738 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7fe fb4b 	bl	8001da8 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe fb47 	bl	8001da8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e09b      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372c:	4b40      	ldr	r3, [pc, #256]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4b3c      	ldr	r3, [pc, #240]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a3b      	ldr	r2, [pc, #236]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003748:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8087 	beq.w	8003862 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003754:	4b36      	ldr	r3, [pc, #216]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d061      	beq.n	8003824 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d146      	bne.n	80037f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_RCC_OscConfig+0x4cc>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fe fb1b 	bl	8001da8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003776:	f7fe fb17 	bl	8001da8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e06d      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003788:	4b29      	ldr	r3, [pc, #164]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d108      	bne.n	80037b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4921      	ldr	r1, [pc, #132]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a19      	ldr	r1, [r3, #32]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	430b      	orrs	r3, r1
 80037c2:	491b      	ldr	r1, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_RCC_OscConfig+0x4cc>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe faeb 	bl	8001da8 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fe fae7 	bl	8001da8 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e03d      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x46a>
 80037f4:	e035      	b.n	8003862 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <HAL_RCC_OscConfig+0x4cc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fad4 	bl	8001da8 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fad0 	bl	8001da8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e026      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x498>
 8003822:	e01e      	b.n	8003862 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d107      	bne.n	800383c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e019      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_OscConfig+0x500>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0d0      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003884:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d910      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b67      	ldr	r3, [pc, #412]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 0207 	bic.w	r2, r3, #7
 800389a:	4965      	ldr	r1, [pc, #404]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b63      	ldr	r3, [pc, #396]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0b8      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038cc:	4b59      	ldr	r3, [pc, #356]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a58      	ldr	r2, [pc, #352]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e4:	4b53      	ldr	r3, [pc, #332]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4a52      	ldr	r2, [pc, #328]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b50      	ldr	r3, [pc, #320]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	494d      	ldr	r1, [pc, #308]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d040      	beq.n	8003990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b47      	ldr	r3, [pc, #284]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d115      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e07f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b41      	ldr	r3, [pc, #260]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e073      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06b      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f023 0203 	bic.w	r2, r3, #3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4936      	ldr	r1, [pc, #216]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fe fa22 	bl	8001da8 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fe fa1e 	bl	8001da8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e053      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d210      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 0207 	bic.w	r2, r3, #7
 80039a6:	4922      	ldr	r1, [pc, #136]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b20      	ldr	r3, [pc, #128]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e032      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039cc:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4916      	ldr	r1, [pc, #88]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	490e      	ldr	r1, [pc, #56]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039fe:	f000 f821 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	490a      	ldr	r1, [pc, #40]	@ (8003a38 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	5ccb      	ldrb	r3, [r1, r3]
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a09      	ldr	r2, [pc, #36]	@ (8003a3c <HAL_RCC_ClockConfig+0x1cc>)
 8003a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a1a:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1d0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe f980 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08006cd4 	.word	0x08006cd4
 8003a3c:	20000044 	.word	0x20000044
 8003a40:	20000048 	.word	0x20000048

08003a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x30>
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x36>
 8003a72:	e027      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a76:	613b      	str	r3, [r7, #16]
      break;
 8003a78:	e027      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a17      	ldr	r2, [pc, #92]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a92:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0c5b      	lsrs	r3, r3, #17
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	4a11      	ldr	r2, [pc, #68]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa6:	fb03 f202 	mul.w	r2, r3, r2
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	613b      	str	r3, [r7, #16]
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ac6:	613b      	str	r3, [r7, #16]
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	693b      	ldr	r3, [r7, #16]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	007a1200 	.word	0x007a1200
 8003ae0:	08006cec 	.word	0x08006cec
 8003ae4:	08006cfc 	.word	0x08006cfc
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	@ (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000044 	.word	0x20000044

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08006ce4 	.word	0x08006ce4

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	@ (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08006ce4 	.word	0x08006ce4

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000044 	.word	0x20000044
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e042      	b.n	8003c24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fbdc 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	@ 0x24
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f971 	bl	8003eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	@ 0x28
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d175      	bne.n	8003d38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_UART_Transmit+0x2c>
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e06e      	b.n	8003d3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2221      	movs	r2, #33	@ 0x21
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f89d 	bl	8001da8 <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	88fa      	ldrh	r2, [r7, #6]
 8003c74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c84:	d108      	bne.n	8003c98 <HAL_UART_Transmit+0x6c>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	e003      	b.n	8003ca0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ca0:	e02e      	b.n	8003d00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2180      	movs	r1, #128	@ 0x80
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f848 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e03a      	b.n	8003d3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e007      	b.n	8003cf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1cb      	bne.n	8003ca2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2140      	movs	r1, #64	@ 0x40
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f814 	bl	8003d42 <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e006      	b.n	8003d3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d52:	e03b      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d037      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe f824 	bl	8001da8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e03a      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d023      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d020      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d01d      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d116      	bne.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f81d 	bl	8003df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e00f      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d0b4      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b095      	sub	sp, #84	@ 0x54
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d119      	bne.n	8003ea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e8c:	61ba      	str	r2, [r7, #24]
 8003e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e5      	bne.n	8003e6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003eae:	bf00      	nop
 8003eb0:	3754      	adds	r7, #84	@ 0x54
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003ef2:	f023 030c 	bic.w	r3, r3, #12
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fcc <UART_SetConfig+0x114>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d103      	bne.n	8003f28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7ff fe02 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	e002      	b.n	8003f2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7ff fdea 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8003f2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009a      	lsls	r2, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	4a22      	ldr	r2, [pc, #136]	@ (8003fd0 <UART_SetConfig+0x118>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	0119      	lsls	r1, r3, #4
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009a      	lsls	r2, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f64:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <UART_SetConfig+0x118>)
 8003f66:	fba3 0302 	umull	r0, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2064      	movs	r0, #100	@ 0x64
 8003f6e:	fb00 f303 	mul.w	r3, r0, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	3332      	adds	r3, #50	@ 0x32
 8003f78:	4a15      	ldr	r2, [pc, #84]	@ (8003fd0 <UART_SetConfig+0x118>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f84:	4419      	add	r1, r3
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009a      	lsls	r2, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <UART_SetConfig+0x118>)
 8003f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2064      	movs	r0, #100	@ 0x64
 8003fa6:	fb00 f303 	mul.w	r3, r0, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	@ 0x32
 8003fb0:	4a07      	ldr	r2, [pc, #28]	@ (8003fd0 <UART_SetConfig+0x118>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	51eb851f 	.word	0x51eb851f

08003fd4 <__cvt>:
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fda:	461d      	mov	r5, r3
 8003fdc:	bfbb      	ittet	lt
 8003fde:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003fe2:	461d      	movlt	r5, r3
 8003fe4:	2300      	movge	r3, #0
 8003fe6:	232d      	movlt	r3, #45	@ 0x2d
 8003fe8:	b088      	sub	sp, #32
 8003fea:	4614      	mov	r4, r2
 8003fec:	bfb8      	it	lt
 8003fee:	4614      	movlt	r4, r2
 8003ff0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003ff2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003ff4:	7013      	strb	r3, [r2, #0]
 8003ff6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ff8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003ffc:	f023 0820 	bic.w	r8, r3, #32
 8004000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004004:	d005      	beq.n	8004012 <__cvt+0x3e>
 8004006:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800400a:	d100      	bne.n	800400e <__cvt+0x3a>
 800400c:	3601      	adds	r6, #1
 800400e:	2302      	movs	r3, #2
 8004010:	e000      	b.n	8004014 <__cvt+0x40>
 8004012:	2303      	movs	r3, #3
 8004014:	aa07      	add	r2, sp, #28
 8004016:	9204      	str	r2, [sp, #16]
 8004018:	aa06      	add	r2, sp, #24
 800401a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800401e:	e9cd 3600 	strd	r3, r6, [sp]
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	f000 fe6f 	bl	8004d08 <_dtoa_r>
 800402a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800402e:	4607      	mov	r7, r0
 8004030:	d119      	bne.n	8004066 <__cvt+0x92>
 8004032:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004034:	07db      	lsls	r3, r3, #31
 8004036:	d50e      	bpl.n	8004056 <__cvt+0x82>
 8004038:	eb00 0906 	add.w	r9, r0, r6
 800403c:	2200      	movs	r2, #0
 800403e:	2300      	movs	r3, #0
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8004048:	b108      	cbz	r0, 800404e <__cvt+0x7a>
 800404a:	f8cd 901c 	str.w	r9, [sp, #28]
 800404e:	2230      	movs	r2, #48	@ 0x30
 8004050:	9b07      	ldr	r3, [sp, #28]
 8004052:	454b      	cmp	r3, r9
 8004054:	d31e      	bcc.n	8004094 <__cvt+0xc0>
 8004056:	4638      	mov	r0, r7
 8004058:	9b07      	ldr	r3, [sp, #28]
 800405a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800405c:	1bdb      	subs	r3, r3, r7
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	b008      	add	sp, #32
 8004062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004066:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800406a:	eb00 0906 	add.w	r9, r0, r6
 800406e:	d1e5      	bne.n	800403c <__cvt+0x68>
 8004070:	7803      	ldrb	r3, [r0, #0]
 8004072:	2b30      	cmp	r3, #48	@ 0x30
 8004074:	d10a      	bne.n	800408c <__cvt+0xb8>
 8004076:	2200      	movs	r2, #0
 8004078:	2300      	movs	r3, #0
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	f7fc fc93 	bl	80009a8 <__aeabi_dcmpeq>
 8004082:	b918      	cbnz	r0, 800408c <__cvt+0xb8>
 8004084:	f1c6 0601 	rsb	r6, r6, #1
 8004088:	f8ca 6000 	str.w	r6, [sl]
 800408c:	f8da 3000 	ldr.w	r3, [sl]
 8004090:	4499      	add	r9, r3
 8004092:	e7d3      	b.n	800403c <__cvt+0x68>
 8004094:	1c59      	adds	r1, r3, #1
 8004096:	9107      	str	r1, [sp, #28]
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	e7d9      	b.n	8004050 <__cvt+0x7c>

0800409c <__exponent>:
 800409c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409e:	2900      	cmp	r1, #0
 80040a0:	bfb6      	itet	lt
 80040a2:	232d      	movlt	r3, #45	@ 0x2d
 80040a4:	232b      	movge	r3, #43	@ 0x2b
 80040a6:	4249      	neglt	r1, r1
 80040a8:	2909      	cmp	r1, #9
 80040aa:	7002      	strb	r2, [r0, #0]
 80040ac:	7043      	strb	r3, [r0, #1]
 80040ae:	dd29      	ble.n	8004104 <__exponent+0x68>
 80040b0:	f10d 0307 	add.w	r3, sp, #7
 80040b4:	461d      	mov	r5, r3
 80040b6:	270a      	movs	r7, #10
 80040b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80040bc:	461a      	mov	r2, r3
 80040be:	fb07 1416 	mls	r4, r7, r6, r1
 80040c2:	3430      	adds	r4, #48	@ 0x30
 80040c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040c8:	460c      	mov	r4, r1
 80040ca:	2c63      	cmp	r4, #99	@ 0x63
 80040cc:	4631      	mov	r1, r6
 80040ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80040d2:	dcf1      	bgt.n	80040b8 <__exponent+0x1c>
 80040d4:	3130      	adds	r1, #48	@ 0x30
 80040d6:	1e94      	subs	r4, r2, #2
 80040d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040dc:	4623      	mov	r3, r4
 80040de:	1c41      	adds	r1, r0, #1
 80040e0:	42ab      	cmp	r3, r5
 80040e2:	d30a      	bcc.n	80040fa <__exponent+0x5e>
 80040e4:	f10d 0309 	add.w	r3, sp, #9
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	42ac      	cmp	r4, r5
 80040ec:	bf88      	it	hi
 80040ee:	2300      	movhi	r3, #0
 80040f0:	3302      	adds	r3, #2
 80040f2:	4403      	add	r3, r0
 80040f4:	1a18      	subs	r0, r3, r0
 80040f6:	b003      	add	sp, #12
 80040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80040fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004102:	e7ed      	b.n	80040e0 <__exponent+0x44>
 8004104:	2330      	movs	r3, #48	@ 0x30
 8004106:	3130      	adds	r1, #48	@ 0x30
 8004108:	7083      	strb	r3, [r0, #2]
 800410a:	70c1      	strb	r1, [r0, #3]
 800410c:	1d03      	adds	r3, r0, #4
 800410e:	e7f1      	b.n	80040f4 <__exponent+0x58>

08004110 <_printf_float>:
 8004110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004114:	b091      	sub	sp, #68	@ 0x44
 8004116:	460c      	mov	r4, r1
 8004118:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800411c:	4616      	mov	r6, r2
 800411e:	461f      	mov	r7, r3
 8004120:	4605      	mov	r5, r0
 8004122:	f000 fce1 	bl	8004ae8 <_localeconv_r>
 8004126:	6803      	ldr	r3, [r0, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	9308      	str	r3, [sp, #32]
 800412c:	f7fc f810 	bl	8000150 <strlen>
 8004130:	2300      	movs	r3, #0
 8004132:	930e      	str	r3, [sp, #56]	@ 0x38
 8004134:	f8d8 3000 	ldr.w	r3, [r8]
 8004138:	9009      	str	r0, [sp, #36]	@ 0x24
 800413a:	3307      	adds	r3, #7
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	f103 0208 	add.w	r2, r3, #8
 8004144:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004148:	f8d4 b000 	ldr.w	fp, [r4]
 800414c:	f8c8 2000 	str.w	r2, [r8]
 8004150:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004154:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800415a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004166:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800416a:	4b9c      	ldr	r3, [pc, #624]	@ (80043dc <_printf_float+0x2cc>)
 800416c:	f7fc fc4e 	bl	8000a0c <__aeabi_dcmpun>
 8004170:	bb70      	cbnz	r0, 80041d0 <_printf_float+0xc0>
 8004172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004176:	f04f 32ff 	mov.w	r2, #4294967295
 800417a:	4b98      	ldr	r3, [pc, #608]	@ (80043dc <_printf_float+0x2cc>)
 800417c:	f7fc fc28 	bl	80009d0 <__aeabi_dcmple>
 8004180:	bb30      	cbnz	r0, 80041d0 <_printf_float+0xc0>
 8004182:	2200      	movs	r2, #0
 8004184:	2300      	movs	r3, #0
 8004186:	4640      	mov	r0, r8
 8004188:	4649      	mov	r1, r9
 800418a:	f7fc fc17 	bl	80009bc <__aeabi_dcmplt>
 800418e:	b110      	cbz	r0, 8004196 <_printf_float+0x86>
 8004190:	232d      	movs	r3, #45	@ 0x2d
 8004192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004196:	4a92      	ldr	r2, [pc, #584]	@ (80043e0 <_printf_float+0x2d0>)
 8004198:	4b92      	ldr	r3, [pc, #584]	@ (80043e4 <_printf_float+0x2d4>)
 800419a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800419e:	bf94      	ite	ls
 80041a0:	4690      	movls	r8, r2
 80041a2:	4698      	movhi	r8, r3
 80041a4:	2303      	movs	r3, #3
 80041a6:	f04f 0900 	mov.w	r9, #0
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	f02b 0304 	bic.w	r3, fp, #4
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	4633      	mov	r3, r6
 80041b4:	4621      	mov	r1, r4
 80041b6:	4628      	mov	r0, r5
 80041b8:	9700      	str	r7, [sp, #0]
 80041ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80041bc:	f000 f9d4 	bl	8004568 <_printf_common>
 80041c0:	3001      	adds	r0, #1
 80041c2:	f040 8090 	bne.w	80042e6 <_printf_float+0x1d6>
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	b011      	add	sp, #68	@ 0x44
 80041cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	4640      	mov	r0, r8
 80041d6:	4649      	mov	r1, r9
 80041d8:	f7fc fc18 	bl	8000a0c <__aeabi_dcmpun>
 80041dc:	b148      	cbz	r0, 80041f2 <_printf_float+0xe2>
 80041de:	464b      	mov	r3, r9
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bfb8      	it	lt
 80041e4:	232d      	movlt	r3, #45	@ 0x2d
 80041e6:	4a80      	ldr	r2, [pc, #512]	@ (80043e8 <_printf_float+0x2d8>)
 80041e8:	bfb8      	it	lt
 80041ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041ee:	4b7f      	ldr	r3, [pc, #508]	@ (80043ec <_printf_float+0x2dc>)
 80041f0:	e7d3      	b.n	800419a <_printf_float+0x8a>
 80041f2:	6863      	ldr	r3, [r4, #4]
 80041f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	d13f      	bne.n	800427c <_printf_float+0x16c>
 80041fc:	2306      	movs	r3, #6
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	9206      	str	r2, [sp, #24]
 800420a:	aa0e      	add	r2, sp, #56	@ 0x38
 800420c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004210:	aa0d      	add	r2, sp, #52	@ 0x34
 8004212:	9203      	str	r2, [sp, #12]
 8004214:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004218:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800421c:	6863      	ldr	r3, [r4, #4]
 800421e:	4642      	mov	r2, r8
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4628      	mov	r0, r5
 8004224:	464b      	mov	r3, r9
 8004226:	910a      	str	r1, [sp, #40]	@ 0x28
 8004228:	f7ff fed4 	bl	8003fd4 <__cvt>
 800422c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800422e:	4680      	mov	r8, r0
 8004230:	2947      	cmp	r1, #71	@ 0x47
 8004232:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004234:	d128      	bne.n	8004288 <_printf_float+0x178>
 8004236:	1cc8      	adds	r0, r1, #3
 8004238:	db02      	blt.n	8004240 <_printf_float+0x130>
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	4299      	cmp	r1, r3
 800423e:	dd40      	ble.n	80042c2 <_printf_float+0x1b2>
 8004240:	f1aa 0a02 	sub.w	sl, sl, #2
 8004244:	fa5f fa8a 	uxtb.w	sl, sl
 8004248:	4652      	mov	r2, sl
 800424a:	3901      	subs	r1, #1
 800424c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004250:	910d      	str	r1, [sp, #52]	@ 0x34
 8004252:	f7ff ff23 	bl	800409c <__exponent>
 8004256:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004258:	4681      	mov	r9, r0
 800425a:	1813      	adds	r3, r2, r0
 800425c:	2a01      	cmp	r2, #1
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	dc02      	bgt.n	8004268 <_printf_float+0x158>
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	07d2      	lsls	r2, r2, #31
 8004266:	d501      	bpl.n	800426c <_printf_float+0x15c>
 8004268:	3301      	adds	r3, #1
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004270:	2b00      	cmp	r3, #0
 8004272:	d09e      	beq.n	80041b2 <_printf_float+0xa2>
 8004274:	232d      	movs	r3, #45	@ 0x2d
 8004276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800427a:	e79a      	b.n	80041b2 <_printf_float+0xa2>
 800427c:	2947      	cmp	r1, #71	@ 0x47
 800427e:	d1bf      	bne.n	8004200 <_printf_float+0xf0>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1bd      	bne.n	8004200 <_printf_float+0xf0>
 8004284:	2301      	movs	r3, #1
 8004286:	e7ba      	b.n	80041fe <_printf_float+0xee>
 8004288:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800428c:	d9dc      	bls.n	8004248 <_printf_float+0x138>
 800428e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004292:	d118      	bne.n	80042c6 <_printf_float+0x1b6>
 8004294:	2900      	cmp	r1, #0
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	dd0b      	ble.n	80042b2 <_printf_float+0x1a2>
 800429a:	6121      	str	r1, [r4, #16]
 800429c:	b913      	cbnz	r3, 80042a4 <_printf_float+0x194>
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	07d0      	lsls	r0, r2, #31
 80042a2:	d502      	bpl.n	80042aa <_printf_float+0x19a>
 80042a4:	3301      	adds	r3, #1
 80042a6:	440b      	add	r3, r1
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	f04f 0900 	mov.w	r9, #0
 80042ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042b0:	e7dc      	b.n	800426c <_printf_float+0x15c>
 80042b2:	b913      	cbnz	r3, 80042ba <_printf_float+0x1aa>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	07d2      	lsls	r2, r2, #31
 80042b8:	d501      	bpl.n	80042be <_printf_float+0x1ae>
 80042ba:	3302      	adds	r3, #2
 80042bc:	e7f4      	b.n	80042a8 <_printf_float+0x198>
 80042be:	2301      	movs	r3, #1
 80042c0:	e7f2      	b.n	80042a8 <_printf_float+0x198>
 80042c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042c8:	4299      	cmp	r1, r3
 80042ca:	db05      	blt.n	80042d8 <_printf_float+0x1c8>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	6121      	str	r1, [r4, #16]
 80042d0:	07d8      	lsls	r0, r3, #31
 80042d2:	d5ea      	bpl.n	80042aa <_printf_float+0x19a>
 80042d4:	1c4b      	adds	r3, r1, #1
 80042d6:	e7e7      	b.n	80042a8 <_printf_float+0x198>
 80042d8:	2900      	cmp	r1, #0
 80042da:	bfcc      	ite	gt
 80042dc:	2201      	movgt	r2, #1
 80042de:	f1c1 0202 	rsble	r2, r1, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	e7e0      	b.n	80042a8 <_printf_float+0x198>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	055a      	lsls	r2, r3, #21
 80042ea:	d407      	bmi.n	80042fc <_printf_float+0x1ec>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	4642      	mov	r2, r8
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	d12b      	bne.n	8004352 <_printf_float+0x242>
 80042fa:	e764      	b.n	80041c6 <_printf_float+0xb6>
 80042fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004300:	f240 80dc 	bls.w	80044bc <_printf_float+0x3ac>
 8004304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	f7fc fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8004310:	2800      	cmp	r0, #0
 8004312:	d033      	beq.n	800437c <_printf_float+0x26c>
 8004314:	2301      	movs	r3, #1
 8004316:	4631      	mov	r1, r6
 8004318:	4628      	mov	r0, r5
 800431a:	4a35      	ldr	r2, [pc, #212]	@ (80043f0 <_printf_float+0x2e0>)
 800431c:	47b8      	blx	r7
 800431e:	3001      	adds	r0, #1
 8004320:	f43f af51 	beq.w	80041c6 <_printf_float+0xb6>
 8004324:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004328:	4543      	cmp	r3, r8
 800432a:	db02      	blt.n	8004332 <_printf_float+0x222>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	07d8      	lsls	r0, r3, #31
 8004330:	d50f      	bpl.n	8004352 <_printf_float+0x242>
 8004332:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	f43f af42 	beq.w	80041c6 <_printf_float+0xb6>
 8004342:	f04f 0900 	mov.w	r9, #0
 8004346:	f108 38ff 	add.w	r8, r8, #4294967295
 800434a:	f104 0a1a 	add.w	sl, r4, #26
 800434e:	45c8      	cmp	r8, r9
 8004350:	dc09      	bgt.n	8004366 <_printf_float+0x256>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	079b      	lsls	r3, r3, #30
 8004356:	f100 8102 	bmi.w	800455e <_printf_float+0x44e>
 800435a:	68e0      	ldr	r0, [r4, #12]
 800435c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800435e:	4298      	cmp	r0, r3
 8004360:	bfb8      	it	lt
 8004362:	4618      	movlt	r0, r3
 8004364:	e731      	b.n	80041ca <_printf_float+0xba>
 8004366:	2301      	movs	r3, #1
 8004368:	4652      	mov	r2, sl
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	f43f af28 	beq.w	80041c6 <_printf_float+0xb6>
 8004376:	f109 0901 	add.w	r9, r9, #1
 800437a:	e7e8      	b.n	800434e <_printf_float+0x23e>
 800437c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800437e:	2b00      	cmp	r3, #0
 8004380:	dc38      	bgt.n	80043f4 <_printf_float+0x2e4>
 8004382:	2301      	movs	r3, #1
 8004384:	4631      	mov	r1, r6
 8004386:	4628      	mov	r0, r5
 8004388:	4a19      	ldr	r2, [pc, #100]	@ (80043f0 <_printf_float+0x2e0>)
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	f43f af1a 	beq.w	80041c6 <_printf_float+0xb6>
 8004392:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004396:	ea59 0303 	orrs.w	r3, r9, r3
 800439a:	d102      	bne.n	80043a2 <_printf_float+0x292>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	07d9      	lsls	r1, r3, #31
 80043a0:	d5d7      	bpl.n	8004352 <_printf_float+0x242>
 80043a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043a6:	4631      	mov	r1, r6
 80043a8:	4628      	mov	r0, r5
 80043aa:	47b8      	blx	r7
 80043ac:	3001      	adds	r0, #1
 80043ae:	f43f af0a 	beq.w	80041c6 <_printf_float+0xb6>
 80043b2:	f04f 0a00 	mov.w	sl, #0
 80043b6:	f104 0b1a 	add.w	fp, r4, #26
 80043ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043bc:	425b      	negs	r3, r3
 80043be:	4553      	cmp	r3, sl
 80043c0:	dc01      	bgt.n	80043c6 <_printf_float+0x2b6>
 80043c2:	464b      	mov	r3, r9
 80043c4:	e793      	b.n	80042ee <_printf_float+0x1de>
 80043c6:	2301      	movs	r3, #1
 80043c8:	465a      	mov	r2, fp
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f aef8 	beq.w	80041c6 <_printf_float+0xb6>
 80043d6:	f10a 0a01 	add.w	sl, sl, #1
 80043da:	e7ee      	b.n	80043ba <_printf_float+0x2aa>
 80043dc:	7fefffff 	.word	0x7fefffff
 80043e0:	08006cfe 	.word	0x08006cfe
 80043e4:	08006d02 	.word	0x08006d02
 80043e8:	08006d06 	.word	0x08006d06
 80043ec:	08006d0a 	.word	0x08006d0a
 80043f0:	08006d0e 	.word	0x08006d0e
 80043f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80043fa:	4553      	cmp	r3, sl
 80043fc:	bfa8      	it	ge
 80043fe:	4653      	movge	r3, sl
 8004400:	2b00      	cmp	r3, #0
 8004402:	4699      	mov	r9, r3
 8004404:	dc36      	bgt.n	8004474 <_printf_float+0x364>
 8004406:	f04f 0b00 	mov.w	fp, #0
 800440a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800440e:	f104 021a 	add.w	r2, r4, #26
 8004412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004414:	930a      	str	r3, [sp, #40]	@ 0x28
 8004416:	eba3 0309 	sub.w	r3, r3, r9
 800441a:	455b      	cmp	r3, fp
 800441c:	dc31      	bgt.n	8004482 <_printf_float+0x372>
 800441e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004420:	459a      	cmp	sl, r3
 8004422:	dc3a      	bgt.n	800449a <_printf_float+0x38a>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	07da      	lsls	r2, r3, #31
 8004428:	d437      	bmi.n	800449a <_printf_float+0x38a>
 800442a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800442c:	ebaa 0903 	sub.w	r9, sl, r3
 8004430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004432:	ebaa 0303 	sub.w	r3, sl, r3
 8004436:	4599      	cmp	r9, r3
 8004438:	bfa8      	it	ge
 800443a:	4699      	movge	r9, r3
 800443c:	f1b9 0f00 	cmp.w	r9, #0
 8004440:	dc33      	bgt.n	80044aa <_printf_float+0x39a>
 8004442:	f04f 0800 	mov.w	r8, #0
 8004446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800444a:	f104 0b1a 	add.w	fp, r4, #26
 800444e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004450:	ebaa 0303 	sub.w	r3, sl, r3
 8004454:	eba3 0309 	sub.w	r3, r3, r9
 8004458:	4543      	cmp	r3, r8
 800445a:	f77f af7a 	ble.w	8004352 <_printf_float+0x242>
 800445e:	2301      	movs	r3, #1
 8004460:	465a      	mov	r2, fp
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	f43f aeac 	beq.w	80041c6 <_printf_float+0xb6>
 800446e:	f108 0801 	add.w	r8, r8, #1
 8004472:	e7ec      	b.n	800444e <_printf_float+0x33e>
 8004474:	4642      	mov	r2, r8
 8004476:	4631      	mov	r1, r6
 8004478:	4628      	mov	r0, r5
 800447a:	47b8      	blx	r7
 800447c:	3001      	adds	r0, #1
 800447e:	d1c2      	bne.n	8004406 <_printf_float+0x2f6>
 8004480:	e6a1      	b.n	80041c6 <_printf_float+0xb6>
 8004482:	2301      	movs	r3, #1
 8004484:	4631      	mov	r1, r6
 8004486:	4628      	mov	r0, r5
 8004488:	920a      	str	r2, [sp, #40]	@ 0x28
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	f43f ae9a 	beq.w	80041c6 <_printf_float+0xb6>
 8004492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004494:	f10b 0b01 	add.w	fp, fp, #1
 8004498:	e7bb      	b.n	8004412 <_printf_float+0x302>
 800449a:	4631      	mov	r1, r6
 800449c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1c0      	bne.n	800442a <_printf_float+0x31a>
 80044a8:	e68d      	b.n	80041c6 <_printf_float+0xb6>
 80044aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044ac:	464b      	mov	r3, r9
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	4442      	add	r2, r8
 80044b4:	47b8      	blx	r7
 80044b6:	3001      	adds	r0, #1
 80044b8:	d1c3      	bne.n	8004442 <_printf_float+0x332>
 80044ba:	e684      	b.n	80041c6 <_printf_float+0xb6>
 80044bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044c0:	f1ba 0f01 	cmp.w	sl, #1
 80044c4:	dc01      	bgt.n	80044ca <_printf_float+0x3ba>
 80044c6:	07db      	lsls	r3, r3, #31
 80044c8:	d536      	bpl.n	8004538 <_printf_float+0x428>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4642      	mov	r2, r8
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b8      	blx	r7
 80044d4:	3001      	adds	r0, #1
 80044d6:	f43f ae76 	beq.w	80041c6 <_printf_float+0xb6>
 80044da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044de:	4631      	mov	r1, r6
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	f43f ae6e 	beq.w	80041c6 <_printf_float+0xb6>
 80044ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044ee:	2200      	movs	r2, #0
 80044f0:	2300      	movs	r3, #0
 80044f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80044f6:	f7fc fa57 	bl	80009a8 <__aeabi_dcmpeq>
 80044fa:	b9c0      	cbnz	r0, 800452e <_printf_float+0x41e>
 80044fc:	4653      	mov	r3, sl
 80044fe:	f108 0201 	add.w	r2, r8, #1
 8004502:	4631      	mov	r1, r6
 8004504:	4628      	mov	r0, r5
 8004506:	47b8      	blx	r7
 8004508:	3001      	adds	r0, #1
 800450a:	d10c      	bne.n	8004526 <_printf_float+0x416>
 800450c:	e65b      	b.n	80041c6 <_printf_float+0xb6>
 800450e:	2301      	movs	r3, #1
 8004510:	465a      	mov	r2, fp
 8004512:	4631      	mov	r1, r6
 8004514:	4628      	mov	r0, r5
 8004516:	47b8      	blx	r7
 8004518:	3001      	adds	r0, #1
 800451a:	f43f ae54 	beq.w	80041c6 <_printf_float+0xb6>
 800451e:	f108 0801 	add.w	r8, r8, #1
 8004522:	45d0      	cmp	r8, sl
 8004524:	dbf3      	blt.n	800450e <_printf_float+0x3fe>
 8004526:	464b      	mov	r3, r9
 8004528:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800452c:	e6e0      	b.n	80042f0 <_printf_float+0x1e0>
 800452e:	f04f 0800 	mov.w	r8, #0
 8004532:	f104 0b1a 	add.w	fp, r4, #26
 8004536:	e7f4      	b.n	8004522 <_printf_float+0x412>
 8004538:	2301      	movs	r3, #1
 800453a:	4642      	mov	r2, r8
 800453c:	e7e1      	b.n	8004502 <_printf_float+0x3f2>
 800453e:	2301      	movs	r3, #1
 8004540:	464a      	mov	r2, r9
 8004542:	4631      	mov	r1, r6
 8004544:	4628      	mov	r0, r5
 8004546:	47b8      	blx	r7
 8004548:	3001      	adds	r0, #1
 800454a:	f43f ae3c 	beq.w	80041c6 <_printf_float+0xb6>
 800454e:	f108 0801 	add.w	r8, r8, #1
 8004552:	68e3      	ldr	r3, [r4, #12]
 8004554:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004556:	1a5b      	subs	r3, r3, r1
 8004558:	4543      	cmp	r3, r8
 800455a:	dcf0      	bgt.n	800453e <_printf_float+0x42e>
 800455c:	e6fd      	b.n	800435a <_printf_float+0x24a>
 800455e:	f04f 0800 	mov.w	r8, #0
 8004562:	f104 0919 	add.w	r9, r4, #25
 8004566:	e7f4      	b.n	8004552 <_printf_float+0x442>

08004568 <_printf_common>:
 8004568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	4616      	mov	r6, r2
 800456e:	4698      	mov	r8, r3
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	4607      	mov	r7, r0
 8004576:	4293      	cmp	r3, r2
 8004578:	bfb8      	it	lt
 800457a:	4613      	movlt	r3, r2
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004582:	460c      	mov	r4, r1
 8004584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004588:	b10a      	cbz	r2, 800458e <_printf_common+0x26>
 800458a:	3301      	adds	r3, #1
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	bf42      	ittt	mi
 8004594:	6833      	ldrmi	r3, [r6, #0]
 8004596:	3302      	addmi	r3, #2
 8004598:	6033      	strmi	r3, [r6, #0]
 800459a:	6825      	ldr	r5, [r4, #0]
 800459c:	f015 0506 	ands.w	r5, r5, #6
 80045a0:	d106      	bne.n	80045b0 <_printf_common+0x48>
 80045a2:	f104 0a19 	add.w	sl, r4, #25
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	6832      	ldr	r2, [r6, #0]
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dc2b      	bgt.n	8004608 <_printf_common+0xa0>
 80045b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	3b00      	subs	r3, #0
 80045b8:	bf18      	it	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	0692      	lsls	r2, r2, #26
 80045be:	d430      	bmi.n	8004622 <_printf_common+0xba>
 80045c0:	4641      	mov	r1, r8
 80045c2:	4638      	mov	r0, r7
 80045c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045c8:	47c8      	blx	r9
 80045ca:	3001      	adds	r0, #1
 80045cc:	d023      	beq.n	8004616 <_printf_common+0xae>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	6922      	ldr	r2, [r4, #16]
 80045d2:	f003 0306 	and.w	r3, r3, #6
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf14      	ite	ne
 80045da:	2500      	movne	r5, #0
 80045dc:	6833      	ldreq	r3, [r6, #0]
 80045de:	f04f 0600 	mov.w	r6, #0
 80045e2:	bf08      	it	eq
 80045e4:	68e5      	ldreq	r5, [r4, #12]
 80045e6:	f104 041a 	add.w	r4, r4, #26
 80045ea:	bf08      	it	eq
 80045ec:	1aed      	subeq	r5, r5, r3
 80045ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045f2:	bf08      	it	eq
 80045f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bfc4      	itt	gt
 80045fc:	1a9b      	subgt	r3, r3, r2
 80045fe:	18ed      	addgt	r5, r5, r3
 8004600:	42b5      	cmp	r5, r6
 8004602:	d11a      	bne.n	800463a <_printf_common+0xd2>
 8004604:	2000      	movs	r0, #0
 8004606:	e008      	b.n	800461a <_printf_common+0xb2>
 8004608:	2301      	movs	r3, #1
 800460a:	4652      	mov	r2, sl
 800460c:	4641      	mov	r1, r8
 800460e:	4638      	mov	r0, r7
 8004610:	47c8      	blx	r9
 8004612:	3001      	adds	r0, #1
 8004614:	d103      	bne.n	800461e <_printf_common+0xb6>
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461e:	3501      	adds	r5, #1
 8004620:	e7c1      	b.n	80045a6 <_printf_common+0x3e>
 8004622:	2030      	movs	r0, #48	@ 0x30
 8004624:	18e1      	adds	r1, r4, r3
 8004626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004630:	4422      	add	r2, r4
 8004632:	3302      	adds	r3, #2
 8004634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004638:	e7c2      	b.n	80045c0 <_printf_common+0x58>
 800463a:	2301      	movs	r3, #1
 800463c:	4622      	mov	r2, r4
 800463e:	4641      	mov	r1, r8
 8004640:	4638      	mov	r0, r7
 8004642:	47c8      	blx	r9
 8004644:	3001      	adds	r0, #1
 8004646:	d0e6      	beq.n	8004616 <_printf_common+0xae>
 8004648:	3601      	adds	r6, #1
 800464a:	e7d9      	b.n	8004600 <_printf_common+0x98>

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	7e0f      	ldrb	r7, [r1, #24]
 8004652:	4691      	mov	r9, r2
 8004654:	2f78      	cmp	r7, #120	@ 0x78
 8004656:	4680      	mov	r8, r0
 8004658:	460c      	mov	r4, r1
 800465a:	469a      	mov	sl, r3
 800465c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800465e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	@ 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d3 	beq.w	8004814 <_printf_i+0x1c8>
 800466e:	2f58      	cmp	r7, #88	@ 0x58
 8004670:	f000 80ba 	beq.w	80047e8 <_printf_i+0x19c>
 8004674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a101      	add	r1, pc, #4	@ (adr r1, 800468c <_printf_i+0x40>)
 8004688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	080047fb 	.word	0x080047fb
 80046bc:	08004723 	.word	0x08004723
 80046c0:	080047b5 	.word	0x080047b5
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	0800481d 	.word	0x0800481d
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004723 	.word	0x08004723
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047bd 	.word	0x080047bd
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6032      	str	r2, [r6, #0]
 80046ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e09e      	b.n	8004836 <_printf_i+0x1ea>
 80046f8:	6833      	ldr	r3, [r6, #0]
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	6031      	str	r1, [r6, #0]
 8004700:	0606      	lsls	r6, r0, #24
 8004702:	d501      	bpl.n	8004708 <_printf_i+0xbc>
 8004704:	681d      	ldr	r5, [r3, #0]
 8004706:	e003      	b.n	8004710 <_printf_i+0xc4>
 8004708:	0645      	lsls	r5, r0, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0xb8>
 800470c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004710:	2d00      	cmp	r5, #0
 8004712:	da03      	bge.n	800471c <_printf_i+0xd0>
 8004714:	232d      	movs	r3, #45	@ 0x2d
 8004716:	426d      	negs	r5, r5
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800471c:	230a      	movs	r3, #10
 800471e:	4859      	ldr	r0, [pc, #356]	@ (8004884 <_printf_i+0x238>)
 8004720:	e011      	b.n	8004746 <_printf_i+0xfa>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	0608      	lsls	r0, r1, #24
 8004728:	f853 5b04 	ldr.w	r5, [r3], #4
 800472c:	d402      	bmi.n	8004734 <_printf_i+0xe8>
 800472e:	0649      	lsls	r1, r1, #25
 8004730:	bf48      	it	mi
 8004732:	b2ad      	uxthmi	r5, r5
 8004734:	2f6f      	cmp	r7, #111	@ 0x6f
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	bf14      	ite	ne
 800473a:	230a      	movne	r3, #10
 800473c:	2308      	moveq	r3, #8
 800473e:	4851      	ldr	r0, [pc, #324]	@ (8004884 <_printf_i+0x238>)
 8004740:	2100      	movs	r1, #0
 8004742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004746:	6866      	ldr	r6, [r4, #4]
 8004748:	2e00      	cmp	r6, #0
 800474a:	bfa8      	it	ge
 800474c:	6821      	ldrge	r1, [r4, #0]
 800474e:	60a6      	str	r6, [r4, #8]
 8004750:	bfa4      	itt	ge
 8004752:	f021 0104 	bicge.w	r1, r1, #4
 8004756:	6021      	strge	r1, [r4, #0]
 8004758:	b90d      	cbnz	r5, 800475e <_printf_i+0x112>
 800475a:	2e00      	cmp	r6, #0
 800475c:	d04b      	beq.n	80047f6 <_printf_i+0x1aa>
 800475e:	4616      	mov	r6, r2
 8004760:	fbb5 f1f3 	udiv	r1, r5, r3
 8004764:	fb03 5711 	mls	r7, r3, r1, r5
 8004768:	5dc7      	ldrb	r7, [r0, r7]
 800476a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800476e:	462f      	mov	r7, r5
 8004770:	42bb      	cmp	r3, r7
 8004772:	460d      	mov	r5, r1
 8004774:	d9f4      	bls.n	8004760 <_printf_i+0x114>
 8004776:	2b08      	cmp	r3, #8
 8004778:	d10b      	bne.n	8004792 <_printf_i+0x146>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	07df      	lsls	r7, r3, #31
 800477e:	d508      	bpl.n	8004792 <_printf_i+0x146>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	6861      	ldr	r1, [r4, #4]
 8004784:	4299      	cmp	r1, r3
 8004786:	bfde      	ittt	le
 8004788:	2330      	movle	r3, #48	@ 0x30
 800478a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800478e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004792:	1b92      	subs	r2, r2, r6
 8004794:	6122      	str	r2, [r4, #16]
 8004796:	464b      	mov	r3, r9
 8004798:	4621      	mov	r1, r4
 800479a:	4640      	mov	r0, r8
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	aa03      	add	r2, sp, #12
 80047a2:	f7ff fee1 	bl	8004568 <_printf_common>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d14a      	bne.n	8004840 <_printf_i+0x1f4>
 80047aa:	f04f 30ff 	mov.w	r0, #4294967295
 80047ae:	b004      	add	sp, #16
 80047b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	f043 0320 	orr.w	r3, r3, #32
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	2778      	movs	r7, #120	@ 0x78
 80047be:	4832      	ldr	r0, [pc, #200]	@ (8004888 <_printf_i+0x23c>)
 80047c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	6831      	ldr	r1, [r6, #0]
 80047c8:	061f      	lsls	r7, r3, #24
 80047ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ce:	d402      	bmi.n	80047d6 <_printf_i+0x18a>
 80047d0:	065f      	lsls	r7, r3, #25
 80047d2:	bf48      	it	mi
 80047d4:	b2ad      	uxthmi	r5, r5
 80047d6:	6031      	str	r1, [r6, #0]
 80047d8:	07d9      	lsls	r1, r3, #31
 80047da:	bf44      	itt	mi
 80047dc:	f043 0320 	orrmi.w	r3, r3, #32
 80047e0:	6023      	strmi	r3, [r4, #0]
 80047e2:	b11d      	cbz	r5, 80047ec <_printf_i+0x1a0>
 80047e4:	2310      	movs	r3, #16
 80047e6:	e7ab      	b.n	8004740 <_printf_i+0xf4>
 80047e8:	4826      	ldr	r0, [pc, #152]	@ (8004884 <_printf_i+0x238>)
 80047ea:	e7e9      	b.n	80047c0 <_printf_i+0x174>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	f023 0320 	bic.w	r3, r3, #32
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	e7f6      	b.n	80047e4 <_printf_i+0x198>
 80047f6:	4616      	mov	r6, r2
 80047f8:	e7bd      	b.n	8004776 <_printf_i+0x12a>
 80047fa:	6833      	ldr	r3, [r6, #0]
 80047fc:	6825      	ldr	r5, [r4, #0]
 80047fe:	1d18      	adds	r0, r3, #4
 8004800:	6961      	ldr	r1, [r4, #20]
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	062e      	lsls	r6, r5, #24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	d501      	bpl.n	800480e <_printf_i+0x1c2>
 800480a:	6019      	str	r1, [r3, #0]
 800480c:	e002      	b.n	8004814 <_printf_i+0x1c8>
 800480e:	0668      	lsls	r0, r5, #25
 8004810:	d5fb      	bpl.n	800480a <_printf_i+0x1be>
 8004812:	8019      	strh	r1, [r3, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	4616      	mov	r6, r2
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	e7bc      	b.n	8004796 <_printf_i+0x14a>
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	2100      	movs	r1, #0
 8004820:	1d1a      	adds	r2, r3, #4
 8004822:	6032      	str	r2, [r6, #0]
 8004824:	681e      	ldr	r6, [r3, #0]
 8004826:	6862      	ldr	r2, [r4, #4]
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f9d4 	bl	8004bd6 <memchr>
 800482e:	b108      	cbz	r0, 8004834 <_printf_i+0x1e8>
 8004830:	1b80      	subs	r0, r0, r6
 8004832:	6060      	str	r0, [r4, #4]
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	2300      	movs	r3, #0
 800483a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483e:	e7aa      	b.n	8004796 <_printf_i+0x14a>
 8004840:	4632      	mov	r2, r6
 8004842:	4649      	mov	r1, r9
 8004844:	4640      	mov	r0, r8
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	47d0      	blx	sl
 800484a:	3001      	adds	r0, #1
 800484c:	d0ad      	beq.n	80047aa <_printf_i+0x15e>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	079b      	lsls	r3, r3, #30
 8004852:	d413      	bmi.n	800487c <_printf_i+0x230>
 8004854:	68e0      	ldr	r0, [r4, #12]
 8004856:	9b03      	ldr	r3, [sp, #12]
 8004858:	4298      	cmp	r0, r3
 800485a:	bfb8      	it	lt
 800485c:	4618      	movlt	r0, r3
 800485e:	e7a6      	b.n	80047ae <_printf_i+0x162>
 8004860:	2301      	movs	r3, #1
 8004862:	4632      	mov	r2, r6
 8004864:	4649      	mov	r1, r9
 8004866:	4640      	mov	r0, r8
 8004868:	47d0      	blx	sl
 800486a:	3001      	adds	r0, #1
 800486c:	d09d      	beq.n	80047aa <_printf_i+0x15e>
 800486e:	3501      	adds	r5, #1
 8004870:	68e3      	ldr	r3, [r4, #12]
 8004872:	9903      	ldr	r1, [sp, #12]
 8004874:	1a5b      	subs	r3, r3, r1
 8004876:	42ab      	cmp	r3, r5
 8004878:	dcf2      	bgt.n	8004860 <_printf_i+0x214>
 800487a:	e7eb      	b.n	8004854 <_printf_i+0x208>
 800487c:	2500      	movs	r5, #0
 800487e:	f104 0619 	add.w	r6, r4, #25
 8004882:	e7f5      	b.n	8004870 <_printf_i+0x224>
 8004884:	08006d10 	.word	0x08006d10
 8004888:	08006d21 	.word	0x08006d21

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	e9c0 3300 	strd	r3, r3, [r0]
 8004896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	@ 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6183      	str	r3, [r0, #24]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	@ 0x5c
 80048aa:	f000 f914 	bl	8004ad6 <memset>
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <std+0x58>)
 80048b0:	6224      	str	r4, [r4, #32]
 80048b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <std+0x5c>)
 80048b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <std+0x60>)
 80048ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <std+0x64>)
 80048be:	6323      	str	r3, [r4, #48]	@ 0x30
 80048c0:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <std+0x68>)
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d006      	beq.n	80048d4 <std+0x48>
 80048c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ca:	4294      	cmp	r4, r2
 80048cc:	d002      	beq.n	80048d4 <std+0x48>
 80048ce:	33d0      	adds	r3, #208	@ 0xd0
 80048d0:	429c      	cmp	r4, r3
 80048d2:	d105      	bne.n	80048e0 <std+0x54>
 80048d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048dc:	f000 b978 	b.w	8004bd0 <__retarget_lock_init_recursive>
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	bf00      	nop
 80048e4:	08004a51 	.word	0x08004a51
 80048e8:	08004a73 	.word	0x08004a73
 80048ec:	08004aab 	.word	0x08004aab
 80048f0:	08004acf 	.word	0x08004acf
 80048f4:	200002ec 	.word	0x200002ec

080048f8 <stdio_exit_handler>:
 80048f8:	4a02      	ldr	r2, [pc, #8]	@ (8004904 <stdio_exit_handler+0xc>)
 80048fa:	4903      	ldr	r1, [pc, #12]	@ (8004908 <stdio_exit_handler+0x10>)
 80048fc:	4803      	ldr	r0, [pc, #12]	@ (800490c <stdio_exit_handler+0x14>)
 80048fe:	f000 b869 	b.w	80049d4 <_fwalk_sglue>
 8004902:	bf00      	nop
 8004904:	20000050 	.word	0x20000050
 8004908:	08006545 	.word	0x08006545
 800490c:	20000060 	.word	0x20000060

08004910 <cleanup_stdio>:
 8004910:	6841      	ldr	r1, [r0, #4]
 8004912:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <cleanup_stdio+0x34>)
 8004914:	b510      	push	{r4, lr}
 8004916:	4299      	cmp	r1, r3
 8004918:	4604      	mov	r4, r0
 800491a:	d001      	beq.n	8004920 <cleanup_stdio+0x10>
 800491c:	f001 fe12 	bl	8006544 <_fflush_r>
 8004920:	68a1      	ldr	r1, [r4, #8]
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <cleanup_stdio+0x38>)
 8004924:	4299      	cmp	r1, r3
 8004926:	d002      	beq.n	800492e <cleanup_stdio+0x1e>
 8004928:	4620      	mov	r0, r4
 800492a:	f001 fe0b 	bl	8006544 <_fflush_r>
 800492e:	68e1      	ldr	r1, [r4, #12]
 8004930:	4b06      	ldr	r3, [pc, #24]	@ (800494c <cleanup_stdio+0x3c>)
 8004932:	4299      	cmp	r1, r3
 8004934:	d004      	beq.n	8004940 <cleanup_stdio+0x30>
 8004936:	4620      	mov	r0, r4
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f001 be02 	b.w	8006544 <_fflush_r>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	200002ec 	.word	0x200002ec
 8004948:	20000354 	.word	0x20000354
 800494c:	200003bc 	.word	0x200003bc

08004950 <global_stdio_init.part.0>:
 8004950:	b510      	push	{r4, lr}
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <global_stdio_init.part.0+0x30>)
 8004954:	4c0b      	ldr	r4, [pc, #44]	@ (8004984 <global_stdio_init.part.0+0x34>)
 8004956:	4a0c      	ldr	r2, [pc, #48]	@ (8004988 <global_stdio_init.part.0+0x38>)
 8004958:	4620      	mov	r0, r4
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	2104      	movs	r1, #4
 800495e:	2200      	movs	r2, #0
 8004960:	f7ff ff94 	bl	800488c <std>
 8004964:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004968:	2201      	movs	r2, #1
 800496a:	2109      	movs	r1, #9
 800496c:	f7ff ff8e 	bl	800488c <std>
 8004970:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004974:	2202      	movs	r2, #2
 8004976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497a:	2112      	movs	r1, #18
 800497c:	f7ff bf86 	b.w	800488c <std>
 8004980:	20000424 	.word	0x20000424
 8004984:	200002ec 	.word	0x200002ec
 8004988:	080048f9 	.word	0x080048f9

0800498c <__sfp_lock_acquire>:
 800498c:	4801      	ldr	r0, [pc, #4]	@ (8004994 <__sfp_lock_acquire+0x8>)
 800498e:	f000 b920 	b.w	8004bd2 <__retarget_lock_acquire_recursive>
 8004992:	bf00      	nop
 8004994:	2000042d 	.word	0x2000042d

08004998 <__sfp_lock_release>:
 8004998:	4801      	ldr	r0, [pc, #4]	@ (80049a0 <__sfp_lock_release+0x8>)
 800499a:	f000 b91b 	b.w	8004bd4 <__retarget_lock_release_recursive>
 800499e:	bf00      	nop
 80049a0:	2000042d 	.word	0x2000042d

080049a4 <__sinit>:
 80049a4:	b510      	push	{r4, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	f7ff fff0 	bl	800498c <__sfp_lock_acquire>
 80049ac:	6a23      	ldr	r3, [r4, #32]
 80049ae:	b11b      	cbz	r3, 80049b8 <__sinit+0x14>
 80049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b4:	f7ff bff0 	b.w	8004998 <__sfp_lock_release>
 80049b8:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <__sinit+0x28>)
 80049ba:	6223      	str	r3, [r4, #32]
 80049bc:	4b04      	ldr	r3, [pc, #16]	@ (80049d0 <__sinit+0x2c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f5      	bne.n	80049b0 <__sinit+0xc>
 80049c4:	f7ff ffc4 	bl	8004950 <global_stdio_init.part.0>
 80049c8:	e7f2      	b.n	80049b0 <__sinit+0xc>
 80049ca:	bf00      	nop
 80049cc:	08004911 	.word	0x08004911
 80049d0:	20000424 	.word	0x20000424

080049d4 <_fwalk_sglue>:
 80049d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d8:	4607      	mov	r7, r0
 80049da:	4688      	mov	r8, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	2600      	movs	r6, #0
 80049e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049e4:	f1b9 0901 	subs.w	r9, r9, #1
 80049e8:	d505      	bpl.n	80049f6 <_fwalk_sglue+0x22>
 80049ea:	6824      	ldr	r4, [r4, #0]
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	d1f7      	bne.n	80049e0 <_fwalk_sglue+0xc>
 80049f0:	4630      	mov	r0, r6
 80049f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d907      	bls.n	8004a0c <_fwalk_sglue+0x38>
 80049fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a00:	3301      	adds	r3, #1
 8004a02:	d003      	beq.n	8004a0c <_fwalk_sglue+0x38>
 8004a04:	4629      	mov	r1, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	4306      	orrs	r6, r0
 8004a0c:	3568      	adds	r5, #104	@ 0x68
 8004a0e:	e7e9      	b.n	80049e4 <_fwalk_sglue+0x10>

08004a10 <siprintf>:
 8004a10:	b40e      	push	{r1, r2, r3}
 8004a12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a16:	b500      	push	{lr}
 8004a18:	b09c      	sub	sp, #112	@ 0x70
 8004a1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a1c:	9002      	str	r0, [sp, #8]
 8004a1e:	9006      	str	r0, [sp, #24]
 8004a20:	9107      	str	r1, [sp, #28]
 8004a22:	9104      	str	r1, [sp, #16]
 8004a24:	4808      	ldr	r0, [pc, #32]	@ (8004a48 <siprintf+0x38>)
 8004a26:	4909      	ldr	r1, [pc, #36]	@ (8004a4c <siprintf+0x3c>)
 8004a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a2c:	9105      	str	r1, [sp, #20]
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	a902      	add	r1, sp, #8
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	f001 fc0a 	bl	800624c <_svfiprintf_r>
 8004a38:	2200      	movs	r2, #0
 8004a3a:	9b02      	ldr	r3, [sp, #8]
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	b01c      	add	sp, #112	@ 0x70
 8004a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a44:	b003      	add	sp, #12
 8004a46:	4770      	bx	lr
 8004a48:	2000005c 	.word	0x2000005c
 8004a4c:	ffff0208 	.word	0xffff0208

08004a50 <__sread>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	460c      	mov	r4, r1
 8004a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a58:	f000 f86c 	bl	8004b34 <_read_r>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	bfab      	itete	ge
 8004a60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a62:	89a3      	ldrhlt	r3, [r4, #12]
 8004a64:	181b      	addge	r3, r3, r0
 8004a66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a6a:	bfac      	ite	ge
 8004a6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a6e:	81a3      	strhlt	r3, [r4, #12]
 8004a70:	bd10      	pop	{r4, pc}

08004a72 <__swrite>:
 8004a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a76:	461f      	mov	r7, r3
 8004a78:	898b      	ldrh	r3, [r1, #12]
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	05db      	lsls	r3, r3, #23
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4616      	mov	r6, r2
 8004a82:	d505      	bpl.n	8004a90 <__swrite+0x1e>
 8004a84:	2302      	movs	r3, #2
 8004a86:	2200      	movs	r2, #0
 8004a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8c:	f000 f840 	bl	8004b10 <_lseek_r>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	4632      	mov	r2, r6
 8004a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	463b      	mov	r3, r7
 8004a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	f000 b857 	b.w	8004b58 <_write_r>

08004aaa <__sseek>:
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	460c      	mov	r4, r1
 8004aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab2:	f000 f82d 	bl	8004b10 <_lseek_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	bf15      	itete	ne
 8004abc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004abe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ac2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ac6:	81a3      	strheq	r3, [r4, #12]
 8004ac8:	bf18      	it	ne
 8004aca:	81a3      	strhne	r3, [r4, #12]
 8004acc:	bd10      	pop	{r4, pc}

08004ace <__sclose>:
 8004ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad2:	f000 b80d 	b.w	8004af0 <_close_r>

08004ad6 <memset>:
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4402      	add	r2, r0
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <memset+0xa>
 8004ade:	4770      	bx	lr
 8004ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae4:	e7f9      	b.n	8004ada <memset+0x4>
	...

08004ae8 <_localeconv_r>:
 8004ae8:	4800      	ldr	r0, [pc, #0]	@ (8004aec <_localeconv_r+0x4>)
 8004aea:	4770      	bx	lr
 8004aec:	2000019c 	.word	0x2000019c

08004af0 <_close_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	2300      	movs	r3, #0
 8004af4:	4d05      	ldr	r5, [pc, #20]	@ (8004b0c <_close_r+0x1c>)
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fc fd0b 	bl	8001516 <_close>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_close_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_close_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	20000428 	.word	0x20000428

08004b10 <_lseek_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4d05      	ldr	r5, [pc, #20]	@ (8004b30 <_lseek_r+0x20>)
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fc fd1d 	bl	800155e <_lseek>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_lseek_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_lseek_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	20000428 	.word	0x20000428

08004b34 <_read_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4d05      	ldr	r5, [pc, #20]	@ (8004b54 <_read_r+0x20>)
 8004b40:	602a      	str	r2, [r5, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f7fc fcae 	bl	80014a4 <_read>
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	d102      	bne.n	8004b52 <_read_r+0x1e>
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	b103      	cbz	r3, 8004b52 <_read_r+0x1e>
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	bd38      	pop	{r3, r4, r5, pc}
 8004b54:	20000428 	.word	0x20000428

08004b58 <_write_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	2200      	movs	r2, #0
 8004b62:	4d05      	ldr	r5, [pc, #20]	@ (8004b78 <_write_r+0x20>)
 8004b64:	602a      	str	r2, [r5, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fc fcb9 	bl	80014de <_write>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_write_r+0x1e>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_write_r+0x1e>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20000428 	.word	0x20000428

08004b7c <__errno>:
 8004b7c:	4b01      	ldr	r3, [pc, #4]	@ (8004b84 <__errno+0x8>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000005c 	.word	0x2000005c

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	4d0c      	ldr	r5, [pc, #48]	@ (8004bc0 <__libc_init_array+0x38>)
 8004b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8004bc4 <__libc_init_array+0x3c>)
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	f002 f870 	bl	8006c7c <_init>
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	4d0a      	ldr	r5, [pc, #40]	@ (8004bc8 <__libc_init_array+0x40>)
 8004ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8004bcc <__libc_init_array+0x44>)
 8004ba2:	1b64      	subs	r4, r4, r5
 8004ba4:	10a4      	asrs	r4, r4, #2
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	08007078 	.word	0x08007078
 8004bc4:	08007078 	.word	0x08007078
 8004bc8:	08007078 	.word	0x08007078
 8004bcc:	0800707c 	.word	0x0800707c

08004bd0 <__retarget_lock_init_recursive>:
 8004bd0:	4770      	bx	lr

08004bd2 <__retarget_lock_acquire_recursive>:
 8004bd2:	4770      	bx	lr

08004bd4 <__retarget_lock_release_recursive>:
 8004bd4:	4770      	bx	lr

08004bd6 <memchr>:
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	b2c9      	uxtb	r1, r1
 8004bdc:	4402      	add	r2, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	d101      	bne.n	8004be8 <memchr+0x12>
 8004be4:	2000      	movs	r0, #0
 8004be6:	e003      	b.n	8004bf0 <memchr+0x1a>
 8004be8:	7804      	ldrb	r4, [r0, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	428c      	cmp	r4, r1
 8004bee:	d1f6      	bne.n	8004bde <memchr+0x8>
 8004bf0:	bd10      	pop	{r4, pc}

08004bf2 <quorem>:
 8004bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf6:	6903      	ldr	r3, [r0, #16]
 8004bf8:	690c      	ldr	r4, [r1, #16]
 8004bfa:	4607      	mov	r7, r0
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	db7e      	blt.n	8004cfe <quorem+0x10c>
 8004c00:	3c01      	subs	r4, #1
 8004c02:	00a3      	lsls	r3, r4, #2
 8004c04:	f100 0514 	add.w	r5, r0, #20
 8004c08:	f101 0814 	add.w	r8, r1, #20
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004c28:	d32e      	bcc.n	8004c88 <quorem+0x96>
 8004c2a:	f04f 0a00 	mov.w	sl, #0
 8004c2e:	46c4      	mov	ip, r8
 8004c30:	46ae      	mov	lr, r5
 8004c32:	46d3      	mov	fp, sl
 8004c34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c38:	b298      	uxth	r0, r3
 8004c3a:	fb06 a000 	mla	r0, r6, r0, sl
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	0c02      	lsrs	r2, r0, #16
 8004c42:	fb06 2303 	mla	r3, r6, r3, r2
 8004c46:	f8de 2000 	ldr.w	r2, [lr]
 8004c4a:	b280      	uxth	r0, r0
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	1a12      	subs	r2, r2, r0
 8004c50:	445a      	add	r2, fp
 8004c52:	f8de 0000 	ldr.w	r0, [lr]
 8004c56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004c60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004c64:	b292      	uxth	r2, r2
 8004c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c6a:	45e1      	cmp	r9, ip
 8004c6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c70:	f84e 2b04 	str.w	r2, [lr], #4
 8004c74:	d2de      	bcs.n	8004c34 <quorem+0x42>
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	58eb      	ldr	r3, [r5, r3]
 8004c7a:	b92b      	cbnz	r3, 8004c88 <quorem+0x96>
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	429d      	cmp	r5, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	d32f      	bcc.n	8004ce6 <quorem+0xf4>
 8004c86:	613c      	str	r4, [r7, #16]
 8004c88:	4638      	mov	r0, r7
 8004c8a:	f001 f97b 	bl	8005f84 <__mcmp>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	db25      	blt.n	8004cde <quorem+0xec>
 8004c92:	4629      	mov	r1, r5
 8004c94:	2000      	movs	r0, #0
 8004c96:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c9a:	f8d1 c000 	ldr.w	ip, [r1]
 8004c9e:	fa1f fe82 	uxth.w	lr, r2
 8004ca2:	fa1f f38c 	uxth.w	r3, ip
 8004ca6:	eba3 030e 	sub.w	r3, r3, lr
 8004caa:	4403      	add	r3, r0
 8004cac:	0c12      	lsrs	r2, r2, #16
 8004cae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004cb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cbc:	45c1      	cmp	r9, r8
 8004cbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004cc2:	f841 3b04 	str.w	r3, [r1], #4
 8004cc6:	d2e6      	bcs.n	8004c96 <quorem+0xa4>
 8004cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cd0:	b922      	cbnz	r2, 8004cdc <quorem+0xea>
 8004cd2:	3b04      	subs	r3, #4
 8004cd4:	429d      	cmp	r5, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	d30b      	bcc.n	8004cf2 <quorem+0x100>
 8004cda:	613c      	str	r4, [r7, #16]
 8004cdc:	3601      	adds	r6, #1
 8004cde:	4630      	mov	r0, r6
 8004ce0:	b003      	add	sp, #12
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d1cb      	bne.n	8004c86 <quorem+0x94>
 8004cee:	3c01      	subs	r4, #1
 8004cf0:	e7c6      	b.n	8004c80 <quorem+0x8e>
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	3b04      	subs	r3, #4
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d1ef      	bne.n	8004cda <quorem+0xe8>
 8004cfa:	3c01      	subs	r4, #1
 8004cfc:	e7ea      	b.n	8004cd4 <quorem+0xe2>
 8004cfe:	2000      	movs	r0, #0
 8004d00:	e7ee      	b.n	8004ce0 <quorem+0xee>
 8004d02:	0000      	movs	r0, r0
 8004d04:	0000      	movs	r0, r0
	...

08004d08 <_dtoa_r>:
 8004d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	69c7      	ldr	r7, [r0, #28]
 8004d12:	b097      	sub	sp, #92	@ 0x5c
 8004d14:	4683      	mov	fp, r0
 8004d16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004d1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004d1c:	b97f      	cbnz	r7, 8004d3e <_dtoa_r+0x36>
 8004d1e:	2010      	movs	r0, #16
 8004d20:	f000 fe02 	bl	8005928 <malloc>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f8cb 001c 	str.w	r0, [fp, #28]
 8004d2a:	b920      	cbnz	r0, 8004d36 <_dtoa_r+0x2e>
 8004d2c:	21ef      	movs	r1, #239	@ 0xef
 8004d2e:	4ba8      	ldr	r3, [pc, #672]	@ (8004fd0 <_dtoa_r+0x2c8>)
 8004d30:	48a8      	ldr	r0, [pc, #672]	@ (8004fd4 <_dtoa_r+0x2cc>)
 8004d32:	f001 fc67 	bl	8006604 <__assert_func>
 8004d36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004d3a:	6007      	str	r7, [r0, #0]
 8004d3c:	60c7      	str	r7, [r0, #12]
 8004d3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	b159      	cbz	r1, 8004d5e <_dtoa_r+0x56>
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4093      	lsls	r3, r2
 8004d4c:	604a      	str	r2, [r1, #4]
 8004d4e:	608b      	str	r3, [r1, #8]
 8004d50:	4658      	mov	r0, fp
 8004d52:	f000 fedf 	bl	8005b14 <_Bfree>
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	1e2b      	subs	r3, r5, #0
 8004d60:	bfaf      	iteee	ge
 8004d62:	2300      	movge	r3, #0
 8004d64:	2201      	movlt	r2, #1
 8004d66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004d6a:	9303      	strlt	r3, [sp, #12]
 8004d6c:	bfa8      	it	ge
 8004d6e:	6033      	strge	r3, [r6, #0]
 8004d70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004d74:	4b98      	ldr	r3, [pc, #608]	@ (8004fd8 <_dtoa_r+0x2d0>)
 8004d76:	bfb8      	it	lt
 8004d78:	6032      	strlt	r2, [r6, #0]
 8004d7a:	ea33 0308 	bics.w	r3, r3, r8
 8004d7e:	d112      	bne.n	8004da6 <_dtoa_r+0x9e>
 8004d80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004d84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d8c:	4323      	orrs	r3, r4
 8004d8e:	f000 8550 	beq.w	8005832 <_dtoa_r+0xb2a>
 8004d92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004fdc <_dtoa_r+0x2d4>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8552 	beq.w	8005842 <_dtoa_r+0xb3a>
 8004d9e:	f10a 0303 	add.w	r3, sl, #3
 8004da2:	f000 bd4c 	b.w	800583e <_dtoa_r+0xb36>
 8004da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004daa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004db2:	2200      	movs	r2, #0
 8004db4:	2300      	movs	r3, #0
 8004db6:	f7fb fdf7 	bl	80009a8 <__aeabi_dcmpeq>
 8004dba:	4607      	mov	r7, r0
 8004dbc:	b158      	cbz	r0, 8004dd6 <_dtoa_r+0xce>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004dc6:	b113      	cbz	r3, 8004dce <_dtoa_r+0xc6>
 8004dc8:	4b85      	ldr	r3, [pc, #532]	@ (8004fe0 <_dtoa_r+0x2d8>)
 8004dca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004fe4 <_dtoa_r+0x2dc>
 8004dd2:	f000 bd36 	b.w	8005842 <_dtoa_r+0xb3a>
 8004dd6:	ab14      	add	r3, sp, #80	@ 0x50
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	ab15      	add	r3, sp, #84	@ 0x54
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4658      	mov	r0, fp
 8004de0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004de4:	f001 f97e 	bl	80060e4 <__d2b>
 8004de8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004dec:	4681      	mov	r9, r0
 8004dee:	2e00      	cmp	r6, #0
 8004df0:	d077      	beq.n	8004ee2 <_dtoa_r+0x1da>
 8004df2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004df8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e08:	9712      	str	r7, [sp, #72]	@ 0x48
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4b76      	ldr	r3, [pc, #472]	@ (8004fe8 <_dtoa_r+0x2e0>)
 8004e10:	f7fb f9aa 	bl	8000168 <__aeabi_dsub>
 8004e14:	a368      	add	r3, pc, #416	@ (adr r3, 8004fb8 <_dtoa_r+0x2b0>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fb5d 	bl	80004d8 <__aeabi_dmul>
 8004e1e:	a368      	add	r3, pc, #416	@ (adr r3, 8004fc0 <_dtoa_r+0x2b8>)
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f7fb f9a2 	bl	800016c <__adddf3>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	f7fb fae9 	bl	8000404 <__aeabi_i2d>
 8004e32:	a365      	add	r3, pc, #404	@ (adr r3, 8004fc8 <_dtoa_r+0x2c0>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f7fb fb4e 	bl	80004d8 <__aeabi_dmul>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	f7fb f992 	bl	800016c <__adddf3>
 8004e48:	4604      	mov	r4, r0
 8004e4a:	460d      	mov	r5, r1
 8004e4c:	f7fb fdf4 	bl	8000a38 <__aeabi_d2iz>
 8004e50:	2200      	movs	r2, #0
 8004e52:	4607      	mov	r7, r0
 8004e54:	2300      	movs	r3, #0
 8004e56:	4620      	mov	r0, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f7fb fdaf 	bl	80009bc <__aeabi_dcmplt>
 8004e5e:	b140      	cbz	r0, 8004e72 <_dtoa_r+0x16a>
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7fb facf 	bl	8000404 <__aeabi_i2d>
 8004e66:	4622      	mov	r2, r4
 8004e68:	462b      	mov	r3, r5
 8004e6a:	f7fb fd9d 	bl	80009a8 <__aeabi_dcmpeq>
 8004e6e:	b900      	cbnz	r0, 8004e72 <_dtoa_r+0x16a>
 8004e70:	3f01      	subs	r7, #1
 8004e72:	2f16      	cmp	r7, #22
 8004e74:	d853      	bhi.n	8004f1e <_dtoa_r+0x216>
 8004e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fec <_dtoa_r+0x2e4>)
 8004e7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb fd9a 	bl	80009bc <__aeabi_dcmplt>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d04a      	beq.n	8004f22 <_dtoa_r+0x21a>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	3f01      	subs	r7, #1
 8004e90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e94:	1b9b      	subs	r3, r3, r6
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	bf46      	itte	mi
 8004e9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8004e9e:	2300      	movmi	r3, #0
 8004ea0:	f04f 0800 	movpl.w	r8, #0
 8004ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ea6:	bf48      	it	mi
 8004ea8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004eaa:	2f00      	cmp	r7, #0
 8004eac:	db3b      	blt.n	8004f26 <_dtoa_r+0x21e>
 8004eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb0:	970e      	str	r7, [sp, #56]	@ 0x38
 8004eb2:	443b      	add	r3, r7
 8004eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ebc:	2b09      	cmp	r3, #9
 8004ebe:	d866      	bhi.n	8004f8e <_dtoa_r+0x286>
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	bfc4      	itt	gt
 8004ec4:	3b04      	subgt	r3, #4
 8004ec6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004ec8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004eca:	bfc8      	it	gt
 8004ecc:	2400      	movgt	r4, #0
 8004ece:	f1a3 0302 	sub.w	r3, r3, #2
 8004ed2:	bfd8      	it	le
 8004ed4:	2401      	movle	r4, #1
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d864      	bhi.n	8004fa4 <_dtoa_r+0x29c>
 8004eda:	e8df f003 	tbb	[pc, r3]
 8004ede:	382b      	.short	0x382b
 8004ee0:	5636      	.short	0x5636
 8004ee2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004ee6:	441e      	add	r6, r3
 8004ee8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	bfc1      	itttt	gt
 8004ef0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ef4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ef8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004efc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f00:	bfd6      	itet	le
 8004f02:	f1c3 0320 	rsble	r3, r3, #32
 8004f06:	ea48 0003 	orrgt.w	r0, r8, r3
 8004f0a:	fa04 f003 	lslle.w	r0, r4, r3
 8004f0e:	f7fb fa69 	bl	80003e4 <__aeabi_ui2d>
 8004f12:	2201      	movs	r2, #1
 8004f14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f18:	3e01      	subs	r6, #1
 8004f1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8004f1c:	e775      	b.n	8004e0a <_dtoa_r+0x102>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e7b6      	b.n	8004e90 <_dtoa_r+0x188>
 8004f22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004f24:	e7b5      	b.n	8004e92 <_dtoa_r+0x18a>
 8004f26:	427b      	negs	r3, r7
 8004f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	eba8 0807 	sub.w	r8, r8, r7
 8004f30:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f32:	e7c2      	b.n	8004eba <_dtoa_r+0x1b2>
 8004f34:	2300      	movs	r3, #0
 8004f36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	dc35      	bgt.n	8004faa <_dtoa_r+0x2a2>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	461a      	mov	r2, r3
 8004f42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004f46:	9221      	str	r2, [sp, #132]	@ 0x84
 8004f48:	e00b      	b.n	8004f62 <_dtoa_r+0x25a>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e7f3      	b.n	8004f36 <_dtoa_r+0x22e>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	9308      	str	r3, [sp, #32]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	9307      	str	r3, [sp, #28]
 8004f5e:	bfb8      	it	lt
 8004f60:	2301      	movlt	r3, #1
 8004f62:	2100      	movs	r1, #0
 8004f64:	2204      	movs	r2, #4
 8004f66:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004f6a:	f102 0514 	add.w	r5, r2, #20
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	d91f      	bls.n	8004fb2 <_dtoa_r+0x2aa>
 8004f72:	6041      	str	r1, [r0, #4]
 8004f74:	4658      	mov	r0, fp
 8004f76:	f000 fd8d 	bl	8005a94 <_Balloc>
 8004f7a:	4682      	mov	sl, r0
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d139      	bne.n	8004ff4 <_dtoa_r+0x2ec>
 8004f80:	4602      	mov	r2, r0
 8004f82:	f240 11af 	movw	r1, #431	@ 0x1af
 8004f86:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <_dtoa_r+0x2e8>)
 8004f88:	e6d2      	b.n	8004d30 <_dtoa_r+0x28>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e7e0      	b.n	8004f50 <_dtoa_r+0x248>
 8004f8e:	2401      	movs	r4, #1
 8004f90:	2300      	movs	r3, #0
 8004f92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004f94:	9320      	str	r3, [sp, #128]	@ 0x80
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004fa0:	2312      	movs	r3, #18
 8004fa2:	e7d0      	b.n	8004f46 <_dtoa_r+0x23e>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fa8:	e7f5      	b.n	8004f96 <_dtoa_r+0x28e>
 8004faa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004fb0:	e7d7      	b.n	8004f62 <_dtoa_r+0x25a>
 8004fb2:	3101      	adds	r1, #1
 8004fb4:	0052      	lsls	r2, r2, #1
 8004fb6:	e7d8      	b.n	8004f6a <_dtoa_r+0x262>
 8004fb8:	636f4361 	.word	0x636f4361
 8004fbc:	3fd287a7 	.word	0x3fd287a7
 8004fc0:	8b60c8b3 	.word	0x8b60c8b3
 8004fc4:	3fc68a28 	.word	0x3fc68a28
 8004fc8:	509f79fb 	.word	0x509f79fb
 8004fcc:	3fd34413 	.word	0x3fd34413
 8004fd0:	08006d3f 	.word	0x08006d3f
 8004fd4:	08006d56 	.word	0x08006d56
 8004fd8:	7ff00000 	.word	0x7ff00000
 8004fdc:	08006d3b 	.word	0x08006d3b
 8004fe0:	08006d0f 	.word	0x08006d0f
 8004fe4:	08006d0e 	.word	0x08006d0e
 8004fe8:	3ff80000 	.word	0x3ff80000
 8004fec:	08006e50 	.word	0x08006e50
 8004ff0:	08006dae 	.word	0x08006dae
 8004ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ff8:	6018      	str	r0, [r3, #0]
 8004ffa:	9b07      	ldr	r3, [sp, #28]
 8004ffc:	2b0e      	cmp	r3, #14
 8004ffe:	f200 80a4 	bhi.w	800514a <_dtoa_r+0x442>
 8005002:	2c00      	cmp	r4, #0
 8005004:	f000 80a1 	beq.w	800514a <_dtoa_r+0x442>
 8005008:	2f00      	cmp	r7, #0
 800500a:	dd33      	ble.n	8005074 <_dtoa_r+0x36c>
 800500c:	4b86      	ldr	r3, [pc, #536]	@ (8005228 <_dtoa_r+0x520>)
 800500e:	f007 020f 	and.w	r2, r7, #15
 8005012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005016:	05f8      	lsls	r0, r7, #23
 8005018:	e9d3 3400 	ldrd	r3, r4, [r3]
 800501c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005020:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005024:	d516      	bpl.n	8005054 <_dtoa_r+0x34c>
 8005026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800502a:	4b80      	ldr	r3, [pc, #512]	@ (800522c <_dtoa_r+0x524>)
 800502c:	2603      	movs	r6, #3
 800502e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005032:	f7fb fb7b 	bl	800072c <__aeabi_ddiv>
 8005036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800503a:	f004 040f 	and.w	r4, r4, #15
 800503e:	4d7b      	ldr	r5, [pc, #492]	@ (800522c <_dtoa_r+0x524>)
 8005040:	b954      	cbnz	r4, 8005058 <_dtoa_r+0x350>
 8005042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504a:	f7fb fb6f 	bl	800072c <__aeabi_ddiv>
 800504e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005052:	e028      	b.n	80050a6 <_dtoa_r+0x39e>
 8005054:	2602      	movs	r6, #2
 8005056:	e7f2      	b.n	800503e <_dtoa_r+0x336>
 8005058:	07e1      	lsls	r1, r4, #31
 800505a:	d508      	bpl.n	800506e <_dtoa_r+0x366>
 800505c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005060:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005064:	f7fb fa38 	bl	80004d8 <__aeabi_dmul>
 8005068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800506c:	3601      	adds	r6, #1
 800506e:	1064      	asrs	r4, r4, #1
 8005070:	3508      	adds	r5, #8
 8005072:	e7e5      	b.n	8005040 <_dtoa_r+0x338>
 8005074:	f000 80d2 	beq.w	800521c <_dtoa_r+0x514>
 8005078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800507c:	427c      	negs	r4, r7
 800507e:	4b6a      	ldr	r3, [pc, #424]	@ (8005228 <_dtoa_r+0x520>)
 8005080:	f004 020f 	and.w	r2, r4, #15
 8005084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb fa24 	bl	80004d8 <__aeabi_dmul>
 8005090:	2602      	movs	r6, #2
 8005092:	2300      	movs	r3, #0
 8005094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005098:	4d64      	ldr	r5, [pc, #400]	@ (800522c <_dtoa_r+0x524>)
 800509a:	1124      	asrs	r4, r4, #4
 800509c:	2c00      	cmp	r4, #0
 800509e:	f040 80b2 	bne.w	8005206 <_dtoa_r+0x4fe>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1d3      	bne.n	800504e <_dtoa_r+0x346>
 80050a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80b7 	beq.w	8005220 <_dtoa_r+0x518>
 80050b2:	2200      	movs	r2, #0
 80050b4:	4620      	mov	r0, r4
 80050b6:	4629      	mov	r1, r5
 80050b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005230 <_dtoa_r+0x528>)
 80050ba:	f7fb fc7f 	bl	80009bc <__aeabi_dcmplt>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f000 80ae 	beq.w	8005220 <_dtoa_r+0x518>
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80aa 	beq.w	8005220 <_dtoa_r+0x518>
 80050cc:	9b08      	ldr	r3, [sp, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dd37      	ble.n	8005142 <_dtoa_r+0x43a>
 80050d2:	1e7b      	subs	r3, r7, #1
 80050d4:	4620      	mov	r0, r4
 80050d6:	9304      	str	r3, [sp, #16]
 80050d8:	2200      	movs	r2, #0
 80050da:	4629      	mov	r1, r5
 80050dc:	4b55      	ldr	r3, [pc, #340]	@ (8005234 <_dtoa_r+0x52c>)
 80050de:	f7fb f9fb 	bl	80004d8 <__aeabi_dmul>
 80050e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e6:	9c08      	ldr	r4, [sp, #32]
 80050e8:	3601      	adds	r6, #1
 80050ea:	4630      	mov	r0, r6
 80050ec:	f7fb f98a 	bl	8000404 <__aeabi_i2d>
 80050f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f4:	f7fb f9f0 	bl	80004d8 <__aeabi_dmul>
 80050f8:	2200      	movs	r2, #0
 80050fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005238 <_dtoa_r+0x530>)
 80050fc:	f7fb f836 	bl	800016c <__adddf3>
 8005100:	4605      	mov	r5, r0
 8005102:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005106:	2c00      	cmp	r4, #0
 8005108:	f040 809a 	bne.w	8005240 <_dtoa_r+0x538>
 800510c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005110:	2200      	movs	r2, #0
 8005112:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <_dtoa_r+0x534>)
 8005114:	f7fb f828 	bl	8000168 <__aeabi_dsub>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005120:	462a      	mov	r2, r5
 8005122:	4633      	mov	r3, r6
 8005124:	f7fb fc68 	bl	80009f8 <__aeabi_dcmpgt>
 8005128:	2800      	cmp	r0, #0
 800512a:	f040 828e 	bne.w	800564a <_dtoa_r+0x942>
 800512e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005132:	462a      	mov	r2, r5
 8005134:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005138:	f7fb fc40 	bl	80009bc <__aeabi_dcmplt>
 800513c:	2800      	cmp	r0, #0
 800513e:	f040 8127 	bne.w	8005390 <_dtoa_r+0x688>
 8005142:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005146:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800514a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800514c:	2b00      	cmp	r3, #0
 800514e:	f2c0 8163 	blt.w	8005418 <_dtoa_r+0x710>
 8005152:	2f0e      	cmp	r7, #14
 8005154:	f300 8160 	bgt.w	8005418 <_dtoa_r+0x710>
 8005158:	4b33      	ldr	r3, [pc, #204]	@ (8005228 <_dtoa_r+0x520>)
 800515a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800515e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005162:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005166:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005168:	2b00      	cmp	r3, #0
 800516a:	da03      	bge.n	8005174 <_dtoa_r+0x46c>
 800516c:	9b07      	ldr	r3, [sp, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f340 8100 	ble.w	8005374 <_dtoa_r+0x66c>
 8005174:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005178:	4656      	mov	r6, sl
 800517a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	f7fb fad3 	bl	800072c <__aeabi_ddiv>
 8005186:	f7fb fc57 	bl	8000a38 <__aeabi_d2iz>
 800518a:	4680      	mov	r8, r0
 800518c:	f7fb f93a 	bl	8000404 <__aeabi_i2d>
 8005190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005194:	f7fb f9a0 	bl	80004d8 <__aeabi_dmul>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4620      	mov	r0, r4
 800519e:	4629      	mov	r1, r5
 80051a0:	f7fa ffe2 	bl	8000168 <__aeabi_dsub>
 80051a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80051a8:	9d07      	ldr	r5, [sp, #28]
 80051aa:	f806 4b01 	strb.w	r4, [r6], #1
 80051ae:	eba6 040a 	sub.w	r4, r6, sl
 80051b2:	42a5      	cmp	r5, r4
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	f040 8116 	bne.w	80053e8 <_dtoa_r+0x6e0>
 80051bc:	f7fa ffd6 	bl	800016c <__adddf3>
 80051c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	f7fb fc16 	bl	80009f8 <__aeabi_dcmpgt>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	f040 80f8 	bne.w	80053c2 <_dtoa_r+0x6ba>
 80051d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f7fb fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80051de:	b118      	cbz	r0, 80051e8 <_dtoa_r+0x4e0>
 80051e0:	f018 0f01 	tst.w	r8, #1
 80051e4:	f040 80ed 	bne.w	80053c2 <_dtoa_r+0x6ba>
 80051e8:	4649      	mov	r1, r9
 80051ea:	4658      	mov	r0, fp
 80051ec:	f000 fc92 	bl	8005b14 <_Bfree>
 80051f0:	2300      	movs	r3, #0
 80051f2:	7033      	strb	r3, [r6, #0]
 80051f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80051f6:	3701      	adds	r7, #1
 80051f8:	601f      	str	r7, [r3, #0]
 80051fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8320 	beq.w	8005842 <_dtoa_r+0xb3a>
 8005202:	601e      	str	r6, [r3, #0]
 8005204:	e31d      	b.n	8005842 <_dtoa_r+0xb3a>
 8005206:	07e2      	lsls	r2, r4, #31
 8005208:	d505      	bpl.n	8005216 <_dtoa_r+0x50e>
 800520a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800520e:	f7fb f963 	bl	80004d8 <__aeabi_dmul>
 8005212:	2301      	movs	r3, #1
 8005214:	3601      	adds	r6, #1
 8005216:	1064      	asrs	r4, r4, #1
 8005218:	3508      	adds	r5, #8
 800521a:	e73f      	b.n	800509c <_dtoa_r+0x394>
 800521c:	2602      	movs	r6, #2
 800521e:	e742      	b.n	80050a6 <_dtoa_r+0x39e>
 8005220:	9c07      	ldr	r4, [sp, #28]
 8005222:	9704      	str	r7, [sp, #16]
 8005224:	e761      	b.n	80050ea <_dtoa_r+0x3e2>
 8005226:	bf00      	nop
 8005228:	08006e50 	.word	0x08006e50
 800522c:	08006e28 	.word	0x08006e28
 8005230:	3ff00000 	.word	0x3ff00000
 8005234:	40240000 	.word	0x40240000
 8005238:	401c0000 	.word	0x401c0000
 800523c:	40140000 	.word	0x40140000
 8005240:	4b70      	ldr	r3, [pc, #448]	@ (8005404 <_dtoa_r+0x6fc>)
 8005242:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005244:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800524c:	4454      	add	r4, sl
 800524e:	2900      	cmp	r1, #0
 8005250:	d045      	beq.n	80052de <_dtoa_r+0x5d6>
 8005252:	2000      	movs	r0, #0
 8005254:	496c      	ldr	r1, [pc, #432]	@ (8005408 <_dtoa_r+0x700>)
 8005256:	f7fb fa69 	bl	800072c <__aeabi_ddiv>
 800525a:	4633      	mov	r3, r6
 800525c:	462a      	mov	r2, r5
 800525e:	f7fa ff83 	bl	8000168 <__aeabi_dsub>
 8005262:	4656      	mov	r6, sl
 8005264:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800526c:	f7fb fbe4 	bl	8000a38 <__aeabi_d2iz>
 8005270:	4605      	mov	r5, r0
 8005272:	f7fb f8c7 	bl	8000404 <__aeabi_i2d>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527e:	f7fa ff73 	bl	8000168 <__aeabi_dsub>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	3530      	adds	r5, #48	@ 0x30
 8005288:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800528c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005290:	f806 5b01 	strb.w	r5, [r6], #1
 8005294:	f7fb fb92 	bl	80009bc <__aeabi_dcmplt>
 8005298:	2800      	cmp	r0, #0
 800529a:	d163      	bne.n	8005364 <_dtoa_r+0x65c>
 800529c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052a0:	2000      	movs	r0, #0
 80052a2:	495a      	ldr	r1, [pc, #360]	@ (800540c <_dtoa_r+0x704>)
 80052a4:	f7fa ff60 	bl	8000168 <__aeabi_dsub>
 80052a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052ac:	f7fb fb86 	bl	80009bc <__aeabi_dcmplt>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f040 8087 	bne.w	80053c4 <_dtoa_r+0x6bc>
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	f43f af43 	beq.w	8005142 <_dtoa_r+0x43a>
 80052bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052c0:	2200      	movs	r2, #0
 80052c2:	4b53      	ldr	r3, [pc, #332]	@ (8005410 <_dtoa_r+0x708>)
 80052c4:	f7fb f908 	bl	80004d8 <__aeabi_dmul>
 80052c8:	2200      	movs	r2, #0
 80052ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005410 <_dtoa_r+0x708>)
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052dc:	e7c4      	b.n	8005268 <_dtoa_r+0x560>
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	f7fb f8f9 	bl	80004d8 <__aeabi_dmul>
 80052e6:	4656      	mov	r6, sl
 80052e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80052ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f2:	f7fb fba1 	bl	8000a38 <__aeabi_d2iz>
 80052f6:	4605      	mov	r5, r0
 80052f8:	f7fb f884 	bl	8000404 <__aeabi_i2d>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005304:	f7fa ff30 	bl	8000168 <__aeabi_dsub>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	3530      	adds	r5, #48	@ 0x30
 800530e:	f806 5b01 	strb.w	r5, [r6], #1
 8005312:	42a6      	cmp	r6, r4
 8005314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	d124      	bne.n	8005368 <_dtoa_r+0x660>
 800531e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005322:	4b39      	ldr	r3, [pc, #228]	@ (8005408 <_dtoa_r+0x700>)
 8005324:	f7fa ff22 	bl	800016c <__adddf3>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005330:	f7fb fb62 	bl	80009f8 <__aeabi_dcmpgt>
 8005334:	2800      	cmp	r0, #0
 8005336:	d145      	bne.n	80053c4 <_dtoa_r+0x6bc>
 8005338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800533c:	2000      	movs	r0, #0
 800533e:	4932      	ldr	r1, [pc, #200]	@ (8005408 <_dtoa_r+0x700>)
 8005340:	f7fa ff12 	bl	8000168 <__aeabi_dsub>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800534c:	f7fb fb36 	bl	80009bc <__aeabi_dcmplt>
 8005350:	2800      	cmp	r0, #0
 8005352:	f43f aef6 	beq.w	8005142 <_dtoa_r+0x43a>
 8005356:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005358:	1e73      	subs	r3, r6, #1
 800535a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800535c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005360:	2b30      	cmp	r3, #48	@ 0x30
 8005362:	d0f8      	beq.n	8005356 <_dtoa_r+0x64e>
 8005364:	9f04      	ldr	r7, [sp, #16]
 8005366:	e73f      	b.n	80051e8 <_dtoa_r+0x4e0>
 8005368:	4b29      	ldr	r3, [pc, #164]	@ (8005410 <_dtoa_r+0x708>)
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005372:	e7bc      	b.n	80052ee <_dtoa_r+0x5e6>
 8005374:	d10c      	bne.n	8005390 <_dtoa_r+0x688>
 8005376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800537a:	2200      	movs	r2, #0
 800537c:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <_dtoa_r+0x70c>)
 800537e:	f7fb f8ab 	bl	80004d8 <__aeabi_dmul>
 8005382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005386:	f7fb fb2d 	bl	80009e4 <__aeabi_dcmpge>
 800538a:	2800      	cmp	r0, #0
 800538c:	f000 815b 	beq.w	8005646 <_dtoa_r+0x93e>
 8005390:	2400      	movs	r4, #0
 8005392:	4625      	mov	r5, r4
 8005394:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005396:	4656      	mov	r6, sl
 8005398:	43db      	mvns	r3, r3
 800539a:	9304      	str	r3, [sp, #16]
 800539c:	2700      	movs	r7, #0
 800539e:	4621      	mov	r1, r4
 80053a0:	4658      	mov	r0, fp
 80053a2:	f000 fbb7 	bl	8005b14 <_Bfree>
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	d0dc      	beq.n	8005364 <_dtoa_r+0x65c>
 80053aa:	b12f      	cbz	r7, 80053b8 <_dtoa_r+0x6b0>
 80053ac:	42af      	cmp	r7, r5
 80053ae:	d003      	beq.n	80053b8 <_dtoa_r+0x6b0>
 80053b0:	4639      	mov	r1, r7
 80053b2:	4658      	mov	r0, fp
 80053b4:	f000 fbae 	bl	8005b14 <_Bfree>
 80053b8:	4629      	mov	r1, r5
 80053ba:	4658      	mov	r0, fp
 80053bc:	f000 fbaa 	bl	8005b14 <_Bfree>
 80053c0:	e7d0      	b.n	8005364 <_dtoa_r+0x65c>
 80053c2:	9704      	str	r7, [sp, #16]
 80053c4:	4633      	mov	r3, r6
 80053c6:	461e      	mov	r6, r3
 80053c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053cc:	2a39      	cmp	r2, #57	@ 0x39
 80053ce:	d107      	bne.n	80053e0 <_dtoa_r+0x6d8>
 80053d0:	459a      	cmp	sl, r3
 80053d2:	d1f8      	bne.n	80053c6 <_dtoa_r+0x6be>
 80053d4:	9a04      	ldr	r2, [sp, #16]
 80053d6:	3201      	adds	r2, #1
 80053d8:	9204      	str	r2, [sp, #16]
 80053da:	2230      	movs	r2, #48	@ 0x30
 80053dc:	f88a 2000 	strb.w	r2, [sl]
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	3201      	adds	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e7bd      	b.n	8005364 <_dtoa_r+0x65c>
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <_dtoa_r+0x708>)
 80053ec:	f7fb f874 	bl	80004d8 <__aeabi_dmul>
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	f7fb fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f43f aebc 	beq.w	800517a <_dtoa_r+0x472>
 8005402:	e6f1      	b.n	80051e8 <_dtoa_r+0x4e0>
 8005404:	08006e50 	.word	0x08006e50
 8005408:	3fe00000 	.word	0x3fe00000
 800540c:	3ff00000 	.word	0x3ff00000
 8005410:	40240000 	.word	0x40240000
 8005414:	40140000 	.word	0x40140000
 8005418:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800541a:	2a00      	cmp	r2, #0
 800541c:	f000 80db 	beq.w	80055d6 <_dtoa_r+0x8ce>
 8005420:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005422:	2a01      	cmp	r2, #1
 8005424:	f300 80bf 	bgt.w	80055a6 <_dtoa_r+0x89e>
 8005428:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800542a:	2a00      	cmp	r2, #0
 800542c:	f000 80b7 	beq.w	800559e <_dtoa_r+0x896>
 8005430:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005434:	4646      	mov	r6, r8
 8005436:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800543a:	2101      	movs	r1, #1
 800543c:	441a      	add	r2, r3
 800543e:	4658      	mov	r0, fp
 8005440:	4498      	add	r8, r3
 8005442:	9209      	str	r2, [sp, #36]	@ 0x24
 8005444:	f000 fc1a 	bl	8005c7c <__i2b>
 8005448:	4605      	mov	r5, r0
 800544a:	b15e      	cbz	r6, 8005464 <_dtoa_r+0x75c>
 800544c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	dd08      	ble.n	8005464 <_dtoa_r+0x75c>
 8005452:	42b3      	cmp	r3, r6
 8005454:	bfa8      	it	ge
 8005456:	4633      	movge	r3, r6
 8005458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800545a:	eba8 0803 	sub.w	r8, r8, r3
 800545e:	1af6      	subs	r6, r6, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	9309      	str	r3, [sp, #36]	@ 0x24
 8005464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005466:	b1f3      	cbz	r3, 80054a6 <_dtoa_r+0x79e>
 8005468:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80b7 	beq.w	80055de <_dtoa_r+0x8d6>
 8005470:	b18c      	cbz	r4, 8005496 <_dtoa_r+0x78e>
 8005472:	4629      	mov	r1, r5
 8005474:	4622      	mov	r2, r4
 8005476:	4658      	mov	r0, fp
 8005478:	f000 fcbe 	bl	8005df8 <__pow5mult>
 800547c:	464a      	mov	r2, r9
 800547e:	4601      	mov	r1, r0
 8005480:	4605      	mov	r5, r0
 8005482:	4658      	mov	r0, fp
 8005484:	f000 fc10 	bl	8005ca8 <__multiply>
 8005488:	4649      	mov	r1, r9
 800548a:	9004      	str	r0, [sp, #16]
 800548c:	4658      	mov	r0, fp
 800548e:	f000 fb41 	bl	8005b14 <_Bfree>
 8005492:	9b04      	ldr	r3, [sp, #16]
 8005494:	4699      	mov	r9, r3
 8005496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005498:	1b1a      	subs	r2, r3, r4
 800549a:	d004      	beq.n	80054a6 <_dtoa_r+0x79e>
 800549c:	4649      	mov	r1, r9
 800549e:	4658      	mov	r0, fp
 80054a0:	f000 fcaa 	bl	8005df8 <__pow5mult>
 80054a4:	4681      	mov	r9, r0
 80054a6:	2101      	movs	r1, #1
 80054a8:	4658      	mov	r0, fp
 80054aa:	f000 fbe7 	bl	8005c7c <__i2b>
 80054ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054b0:	4604      	mov	r4, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 81c9 	beq.w	800584a <_dtoa_r+0xb42>
 80054b8:	461a      	mov	r2, r3
 80054ba:	4601      	mov	r1, r0
 80054bc:	4658      	mov	r0, fp
 80054be:	f000 fc9b 	bl	8005df8 <__pow5mult>
 80054c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054c4:	4604      	mov	r4, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	f300 808f 	bgt.w	80055ea <_dtoa_r+0x8e2>
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 8087 	bne.w	80055e2 <_dtoa_r+0x8da>
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8083 	bne.w	80055e6 <_dtoa_r+0x8de>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054e6:	0d1b      	lsrs	r3, r3, #20
 80054e8:	051b      	lsls	r3, r3, #20
 80054ea:	b12b      	cbz	r3, 80054f8 <_dtoa_r+0x7f0>
 80054ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ee:	f108 0801 	add.w	r8, r8, #1
 80054f2:	3301      	adds	r3, #1
 80054f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f6:	2301      	movs	r3, #1
 80054f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80054fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 81aa 	beq.w	8005856 <_dtoa_r+0xb4e>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005508:	6918      	ldr	r0, [r3, #16]
 800550a:	f000 fb6b 	bl	8005be4 <__hi0bits>
 800550e:	f1c0 0020 	rsb	r0, r0, #32
 8005512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005514:	4418      	add	r0, r3
 8005516:	f010 001f 	ands.w	r0, r0, #31
 800551a:	d071      	beq.n	8005600 <_dtoa_r+0x8f8>
 800551c:	f1c0 0320 	rsb	r3, r0, #32
 8005520:	2b04      	cmp	r3, #4
 8005522:	dd65      	ble.n	80055f0 <_dtoa_r+0x8e8>
 8005524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005526:	f1c0 001c 	rsb	r0, r0, #28
 800552a:	4403      	add	r3, r0
 800552c:	4480      	add	r8, r0
 800552e:	4406      	add	r6, r0
 8005530:	9309      	str	r3, [sp, #36]	@ 0x24
 8005532:	f1b8 0f00 	cmp.w	r8, #0
 8005536:	dd05      	ble.n	8005544 <_dtoa_r+0x83c>
 8005538:	4649      	mov	r1, r9
 800553a:	4642      	mov	r2, r8
 800553c:	4658      	mov	r0, fp
 800553e:	f000 fcb5 	bl	8005eac <__lshift>
 8005542:	4681      	mov	r9, r0
 8005544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd05      	ble.n	8005556 <_dtoa_r+0x84e>
 800554a:	4621      	mov	r1, r4
 800554c:	461a      	mov	r2, r3
 800554e:	4658      	mov	r0, fp
 8005550:	f000 fcac 	bl	8005eac <__lshift>
 8005554:	4604      	mov	r4, r0
 8005556:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d053      	beq.n	8005604 <_dtoa_r+0x8fc>
 800555c:	4621      	mov	r1, r4
 800555e:	4648      	mov	r0, r9
 8005560:	f000 fd10 	bl	8005f84 <__mcmp>
 8005564:	2800      	cmp	r0, #0
 8005566:	da4d      	bge.n	8005604 <_dtoa_r+0x8fc>
 8005568:	1e7b      	subs	r3, r7, #1
 800556a:	4649      	mov	r1, r9
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	220a      	movs	r2, #10
 8005570:	2300      	movs	r3, #0
 8005572:	4658      	mov	r0, fp
 8005574:	f000 faf0 	bl	8005b58 <__multadd>
 8005578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800557a:	4681      	mov	r9, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 816c 	beq.w	800585a <_dtoa_r+0xb52>
 8005582:	2300      	movs	r3, #0
 8005584:	4629      	mov	r1, r5
 8005586:	220a      	movs	r2, #10
 8005588:	4658      	mov	r0, fp
 800558a:	f000 fae5 	bl	8005b58 <__multadd>
 800558e:	9b08      	ldr	r3, [sp, #32]
 8005590:	4605      	mov	r5, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	dc61      	bgt.n	800565a <_dtoa_r+0x952>
 8005596:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005598:	2b02      	cmp	r3, #2
 800559a:	dc3b      	bgt.n	8005614 <_dtoa_r+0x90c>
 800559c:	e05d      	b.n	800565a <_dtoa_r+0x952>
 800559e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80055a4:	e746      	b.n	8005434 <_dtoa_r+0x72c>
 80055a6:	9b07      	ldr	r3, [sp, #28]
 80055a8:	1e5c      	subs	r4, r3, #1
 80055aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	bfbf      	itttt	lt
 80055b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80055b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80055b4:	1ae3      	sublt	r3, r4, r3
 80055b6:	18d2      	addlt	r2, r2, r3
 80055b8:	bfa8      	it	ge
 80055ba:	1b1c      	subge	r4, r3, r4
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	bfbe      	ittt	lt
 80055c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80055c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80055c4:	2400      	movlt	r4, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bfb5      	itete	lt
 80055ca:	eba8 0603 	sublt.w	r6, r8, r3
 80055ce:	4646      	movge	r6, r8
 80055d0:	2300      	movlt	r3, #0
 80055d2:	9b07      	ldrge	r3, [sp, #28]
 80055d4:	e730      	b.n	8005438 <_dtoa_r+0x730>
 80055d6:	4646      	mov	r6, r8
 80055d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80055da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80055dc:	e735      	b.n	800544a <_dtoa_r+0x742>
 80055de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055e0:	e75c      	b.n	800549c <_dtoa_r+0x794>
 80055e2:	2300      	movs	r3, #0
 80055e4:	e788      	b.n	80054f8 <_dtoa_r+0x7f0>
 80055e6:	9b02      	ldr	r3, [sp, #8]
 80055e8:	e786      	b.n	80054f8 <_dtoa_r+0x7f0>
 80055ea:	2300      	movs	r3, #0
 80055ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ee:	e788      	b.n	8005502 <_dtoa_r+0x7fa>
 80055f0:	d09f      	beq.n	8005532 <_dtoa_r+0x82a>
 80055f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055f4:	331c      	adds	r3, #28
 80055f6:	441a      	add	r2, r3
 80055f8:	4498      	add	r8, r3
 80055fa:	441e      	add	r6, r3
 80055fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80055fe:	e798      	b.n	8005532 <_dtoa_r+0x82a>
 8005600:	4603      	mov	r3, r0
 8005602:	e7f6      	b.n	80055f2 <_dtoa_r+0x8ea>
 8005604:	9b07      	ldr	r3, [sp, #28]
 8005606:	9704      	str	r7, [sp, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	dc20      	bgt.n	800564e <_dtoa_r+0x946>
 800560c:	9308      	str	r3, [sp, #32]
 800560e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005610:	2b02      	cmp	r3, #2
 8005612:	dd1e      	ble.n	8005652 <_dtoa_r+0x94a>
 8005614:	9b08      	ldr	r3, [sp, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f aebc 	bne.w	8005394 <_dtoa_r+0x68c>
 800561c:	4621      	mov	r1, r4
 800561e:	2205      	movs	r2, #5
 8005620:	4658      	mov	r0, fp
 8005622:	f000 fa99 	bl	8005b58 <__multadd>
 8005626:	4601      	mov	r1, r0
 8005628:	4604      	mov	r4, r0
 800562a:	4648      	mov	r0, r9
 800562c:	f000 fcaa 	bl	8005f84 <__mcmp>
 8005630:	2800      	cmp	r0, #0
 8005632:	f77f aeaf 	ble.w	8005394 <_dtoa_r+0x68c>
 8005636:	2331      	movs	r3, #49	@ 0x31
 8005638:	4656      	mov	r6, sl
 800563a:	f806 3b01 	strb.w	r3, [r6], #1
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	3301      	adds	r3, #1
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	e6aa      	b.n	800539c <_dtoa_r+0x694>
 8005646:	9c07      	ldr	r4, [sp, #28]
 8005648:	9704      	str	r7, [sp, #16]
 800564a:	4625      	mov	r5, r4
 800564c:	e7f3      	b.n	8005636 <_dtoa_r+0x92e>
 800564e:	9b07      	ldr	r3, [sp, #28]
 8005650:	9308      	str	r3, [sp, #32]
 8005652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8104 	beq.w	8005862 <_dtoa_r+0xb5a>
 800565a:	2e00      	cmp	r6, #0
 800565c:	dd05      	ble.n	800566a <_dtoa_r+0x962>
 800565e:	4629      	mov	r1, r5
 8005660:	4632      	mov	r2, r6
 8005662:	4658      	mov	r0, fp
 8005664:	f000 fc22 	bl	8005eac <__lshift>
 8005668:	4605      	mov	r5, r0
 800566a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05a      	beq.n	8005726 <_dtoa_r+0xa1e>
 8005670:	4658      	mov	r0, fp
 8005672:	6869      	ldr	r1, [r5, #4]
 8005674:	f000 fa0e 	bl	8005a94 <_Balloc>
 8005678:	4606      	mov	r6, r0
 800567a:	b928      	cbnz	r0, 8005688 <_dtoa_r+0x980>
 800567c:	4602      	mov	r2, r0
 800567e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005682:	4b83      	ldr	r3, [pc, #524]	@ (8005890 <_dtoa_r+0xb88>)
 8005684:	f7ff bb54 	b.w	8004d30 <_dtoa_r+0x28>
 8005688:	692a      	ldr	r2, [r5, #16]
 800568a:	f105 010c 	add.w	r1, r5, #12
 800568e:	3202      	adds	r2, #2
 8005690:	0092      	lsls	r2, r2, #2
 8005692:	300c      	adds	r0, #12
 8005694:	f000 ffa8 	bl	80065e8 <memcpy>
 8005698:	2201      	movs	r2, #1
 800569a:	4631      	mov	r1, r6
 800569c:	4658      	mov	r0, fp
 800569e:	f000 fc05 	bl	8005eac <__lshift>
 80056a2:	462f      	mov	r7, r5
 80056a4:	4605      	mov	r5, r0
 80056a6:	f10a 0301 	add.w	r3, sl, #1
 80056aa:	9307      	str	r3, [sp, #28]
 80056ac:	9b08      	ldr	r3, [sp, #32]
 80056ae:	4453      	add	r3, sl
 80056b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056b2:	9b02      	ldr	r3, [sp, #8]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80056ba:	9b07      	ldr	r3, [sp, #28]
 80056bc:	4621      	mov	r1, r4
 80056be:	3b01      	subs	r3, #1
 80056c0:	4648      	mov	r0, r9
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	f7ff fa95 	bl	8004bf2 <quorem>
 80056c8:	4639      	mov	r1, r7
 80056ca:	9008      	str	r0, [sp, #32]
 80056cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80056d0:	4648      	mov	r0, r9
 80056d2:	f000 fc57 	bl	8005f84 <__mcmp>
 80056d6:	462a      	mov	r2, r5
 80056d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80056da:	4621      	mov	r1, r4
 80056dc:	4658      	mov	r0, fp
 80056de:	f000 fc6d 	bl	8005fbc <__mdiff>
 80056e2:	68c2      	ldr	r2, [r0, #12]
 80056e4:	4606      	mov	r6, r0
 80056e6:	bb02      	cbnz	r2, 800572a <_dtoa_r+0xa22>
 80056e8:	4601      	mov	r1, r0
 80056ea:	4648      	mov	r0, r9
 80056ec:	f000 fc4a 	bl	8005f84 <__mcmp>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4631      	mov	r1, r6
 80056f4:	4658      	mov	r0, fp
 80056f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80056f8:	f000 fa0c 	bl	8005b14 <_Bfree>
 80056fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005700:	9e07      	ldr	r6, [sp, #28]
 8005702:	ea43 0102 	orr.w	r1, r3, r2
 8005706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005708:	4319      	orrs	r1, r3
 800570a:	d110      	bne.n	800572e <_dtoa_r+0xa26>
 800570c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005710:	d029      	beq.n	8005766 <_dtoa_r+0xa5e>
 8005712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd02      	ble.n	800571e <_dtoa_r+0xa16>
 8005718:	9b08      	ldr	r3, [sp, #32]
 800571a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800571e:	9b02      	ldr	r3, [sp, #8]
 8005720:	f883 8000 	strb.w	r8, [r3]
 8005724:	e63b      	b.n	800539e <_dtoa_r+0x696>
 8005726:	4628      	mov	r0, r5
 8005728:	e7bb      	b.n	80056a2 <_dtoa_r+0x99a>
 800572a:	2201      	movs	r2, #1
 800572c:	e7e1      	b.n	80056f2 <_dtoa_r+0x9ea>
 800572e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	db04      	blt.n	800573e <_dtoa_r+0xa36>
 8005734:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005736:	430b      	orrs	r3, r1
 8005738:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800573a:	430b      	orrs	r3, r1
 800573c:	d120      	bne.n	8005780 <_dtoa_r+0xa78>
 800573e:	2a00      	cmp	r2, #0
 8005740:	dded      	ble.n	800571e <_dtoa_r+0xa16>
 8005742:	4649      	mov	r1, r9
 8005744:	2201      	movs	r2, #1
 8005746:	4658      	mov	r0, fp
 8005748:	f000 fbb0 	bl	8005eac <__lshift>
 800574c:	4621      	mov	r1, r4
 800574e:	4681      	mov	r9, r0
 8005750:	f000 fc18 	bl	8005f84 <__mcmp>
 8005754:	2800      	cmp	r0, #0
 8005756:	dc03      	bgt.n	8005760 <_dtoa_r+0xa58>
 8005758:	d1e1      	bne.n	800571e <_dtoa_r+0xa16>
 800575a:	f018 0f01 	tst.w	r8, #1
 800575e:	d0de      	beq.n	800571e <_dtoa_r+0xa16>
 8005760:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005764:	d1d8      	bne.n	8005718 <_dtoa_r+0xa10>
 8005766:	2339      	movs	r3, #57	@ 0x39
 8005768:	9a02      	ldr	r2, [sp, #8]
 800576a:	7013      	strb	r3, [r2, #0]
 800576c:	4633      	mov	r3, r6
 800576e:	461e      	mov	r6, r3
 8005770:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005774:	3b01      	subs	r3, #1
 8005776:	2a39      	cmp	r2, #57	@ 0x39
 8005778:	d052      	beq.n	8005820 <_dtoa_r+0xb18>
 800577a:	3201      	adds	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e60e      	b.n	800539e <_dtoa_r+0x696>
 8005780:	2a00      	cmp	r2, #0
 8005782:	dd07      	ble.n	8005794 <_dtoa_r+0xa8c>
 8005784:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005788:	d0ed      	beq.n	8005766 <_dtoa_r+0xa5e>
 800578a:	9a02      	ldr	r2, [sp, #8]
 800578c:	f108 0301 	add.w	r3, r8, #1
 8005790:	7013      	strb	r3, [r2, #0]
 8005792:	e604      	b.n	800539e <_dtoa_r+0x696>
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	9a07      	ldr	r2, [sp, #28]
 8005798:	f803 8c01 	strb.w	r8, [r3, #-1]
 800579c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800579e:	4293      	cmp	r3, r2
 80057a0:	d028      	beq.n	80057f4 <_dtoa_r+0xaec>
 80057a2:	4649      	mov	r1, r9
 80057a4:	2300      	movs	r3, #0
 80057a6:	220a      	movs	r2, #10
 80057a8:	4658      	mov	r0, fp
 80057aa:	f000 f9d5 	bl	8005b58 <__multadd>
 80057ae:	42af      	cmp	r7, r5
 80057b0:	4681      	mov	r9, r0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	f04f 020a 	mov.w	r2, #10
 80057ba:	4639      	mov	r1, r7
 80057bc:	4658      	mov	r0, fp
 80057be:	d107      	bne.n	80057d0 <_dtoa_r+0xac8>
 80057c0:	f000 f9ca 	bl	8005b58 <__multadd>
 80057c4:	4607      	mov	r7, r0
 80057c6:	4605      	mov	r5, r0
 80057c8:	9b07      	ldr	r3, [sp, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	9307      	str	r3, [sp, #28]
 80057ce:	e774      	b.n	80056ba <_dtoa_r+0x9b2>
 80057d0:	f000 f9c2 	bl	8005b58 <__multadd>
 80057d4:	4629      	mov	r1, r5
 80057d6:	4607      	mov	r7, r0
 80057d8:	2300      	movs	r3, #0
 80057da:	220a      	movs	r2, #10
 80057dc:	4658      	mov	r0, fp
 80057de:	f000 f9bb 	bl	8005b58 <__multadd>
 80057e2:	4605      	mov	r5, r0
 80057e4:	e7f0      	b.n	80057c8 <_dtoa_r+0xac0>
 80057e6:	9b08      	ldr	r3, [sp, #32]
 80057e8:	2700      	movs	r7, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bfcc      	ite	gt
 80057ee:	461e      	movgt	r6, r3
 80057f0:	2601      	movle	r6, #1
 80057f2:	4456      	add	r6, sl
 80057f4:	4649      	mov	r1, r9
 80057f6:	2201      	movs	r2, #1
 80057f8:	4658      	mov	r0, fp
 80057fa:	f000 fb57 	bl	8005eac <__lshift>
 80057fe:	4621      	mov	r1, r4
 8005800:	4681      	mov	r9, r0
 8005802:	f000 fbbf 	bl	8005f84 <__mcmp>
 8005806:	2800      	cmp	r0, #0
 8005808:	dcb0      	bgt.n	800576c <_dtoa_r+0xa64>
 800580a:	d102      	bne.n	8005812 <_dtoa_r+0xb0a>
 800580c:	f018 0f01 	tst.w	r8, #1
 8005810:	d1ac      	bne.n	800576c <_dtoa_r+0xa64>
 8005812:	4633      	mov	r3, r6
 8005814:	461e      	mov	r6, r3
 8005816:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800581a:	2a30      	cmp	r2, #48	@ 0x30
 800581c:	d0fa      	beq.n	8005814 <_dtoa_r+0xb0c>
 800581e:	e5be      	b.n	800539e <_dtoa_r+0x696>
 8005820:	459a      	cmp	sl, r3
 8005822:	d1a4      	bne.n	800576e <_dtoa_r+0xa66>
 8005824:	9b04      	ldr	r3, [sp, #16]
 8005826:	3301      	adds	r3, #1
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	2331      	movs	r3, #49	@ 0x31
 800582c:	f88a 3000 	strb.w	r3, [sl]
 8005830:	e5b5      	b.n	800539e <_dtoa_r+0x696>
 8005832:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005834:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005894 <_dtoa_r+0xb8c>
 8005838:	b11b      	cbz	r3, 8005842 <_dtoa_r+0xb3a>
 800583a:	f10a 0308 	add.w	r3, sl, #8
 800583e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	4650      	mov	r0, sl
 8005844:	b017      	add	sp, #92	@ 0x5c
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800584c:	2b01      	cmp	r3, #1
 800584e:	f77f ae3d 	ble.w	80054cc <_dtoa_r+0x7c4>
 8005852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005854:	930a      	str	r3, [sp, #40]	@ 0x28
 8005856:	2001      	movs	r0, #1
 8005858:	e65b      	b.n	8005512 <_dtoa_r+0x80a>
 800585a:	9b08      	ldr	r3, [sp, #32]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f77f aed6 	ble.w	800560e <_dtoa_r+0x906>
 8005862:	4656      	mov	r6, sl
 8005864:	4621      	mov	r1, r4
 8005866:	4648      	mov	r0, r9
 8005868:	f7ff f9c3 	bl	8004bf2 <quorem>
 800586c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005870:	9b08      	ldr	r3, [sp, #32]
 8005872:	f806 8b01 	strb.w	r8, [r6], #1
 8005876:	eba6 020a 	sub.w	r2, r6, sl
 800587a:	4293      	cmp	r3, r2
 800587c:	ddb3      	ble.n	80057e6 <_dtoa_r+0xade>
 800587e:	4649      	mov	r1, r9
 8005880:	2300      	movs	r3, #0
 8005882:	220a      	movs	r2, #10
 8005884:	4658      	mov	r0, fp
 8005886:	f000 f967 	bl	8005b58 <__multadd>
 800588a:	4681      	mov	r9, r0
 800588c:	e7ea      	b.n	8005864 <_dtoa_r+0xb5c>
 800588e:	bf00      	nop
 8005890:	08006dae 	.word	0x08006dae
 8005894:	08006d32 	.word	0x08006d32

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d040      	beq.n	8005922 <_free_r+0x8a>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f000 f8e6 	bl	8005a7c <__malloc_lock>
 80058b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <_free_r+0x8c>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x2c>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	4628      	mov	r0, r5
 80058bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c0:	f000 b8e2 	b.w	8005a88 <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x42>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	1821      	adds	r1, r4, r0
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1809      	addeq	r1, r1, r0
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x1e>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x4c>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x42>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x6c>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1850      	adds	r0, r2, r1
 80058f2:	4283      	cmp	r3, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x22>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4408      	add	r0, r1
 80058fe:	6010      	str	r0, [r2, #0]
 8005900:	6053      	str	r3, [r2, #4]
 8005902:	e7da      	b.n	80058ba <_free_r+0x22>
 8005904:	d902      	bls.n	800590c <_free_r+0x74>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x22>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf01      	itttt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	1809      	addeq	r1, r1, r0
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6054      	str	r4, [r2, #4]
 8005920:	e7cb      	b.n	80058ba <_free_r+0x22>
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000434 	.word	0x20000434

08005928 <malloc>:
 8005928:	4b02      	ldr	r3, [pc, #8]	@ (8005934 <malloc+0xc>)
 800592a:	4601      	mov	r1, r0
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f000 b825 	b.w	800597c <_malloc_r>
 8005932:	bf00      	nop
 8005934:	2000005c 	.word	0x2000005c

08005938 <sbrk_aligned>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4e0f      	ldr	r6, [pc, #60]	@ (8005978 <sbrk_aligned+0x40>)
 800593c:	460c      	mov	r4, r1
 800593e:	6831      	ldr	r1, [r6, #0]
 8005940:	4605      	mov	r5, r0
 8005942:	b911      	cbnz	r1, 800594a <sbrk_aligned+0x12>
 8005944:	f000 fe40 	bl	80065c8 <_sbrk_r>
 8005948:	6030      	str	r0, [r6, #0]
 800594a:	4621      	mov	r1, r4
 800594c:	4628      	mov	r0, r5
 800594e:	f000 fe3b 	bl	80065c8 <_sbrk_r>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	d103      	bne.n	800595e <sbrk_aligned+0x26>
 8005956:	f04f 34ff 	mov.w	r4, #4294967295
 800595a:	4620      	mov	r0, r4
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	1cc4      	adds	r4, r0, #3
 8005960:	f024 0403 	bic.w	r4, r4, #3
 8005964:	42a0      	cmp	r0, r4
 8005966:	d0f8      	beq.n	800595a <sbrk_aligned+0x22>
 8005968:	1a21      	subs	r1, r4, r0
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fe2c 	bl	80065c8 <_sbrk_r>
 8005970:	3001      	adds	r0, #1
 8005972:	d1f2      	bne.n	800595a <sbrk_aligned+0x22>
 8005974:	e7ef      	b.n	8005956 <sbrk_aligned+0x1e>
 8005976:	bf00      	nop
 8005978:	20000430 	.word	0x20000430

0800597c <_malloc_r>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	1ccd      	adds	r5, r1, #3
 8005982:	f025 0503 	bic.w	r5, r5, #3
 8005986:	3508      	adds	r5, #8
 8005988:	2d0c      	cmp	r5, #12
 800598a:	bf38      	it	cc
 800598c:	250c      	movcc	r5, #12
 800598e:	2d00      	cmp	r5, #0
 8005990:	4606      	mov	r6, r0
 8005992:	db01      	blt.n	8005998 <_malloc_r+0x1c>
 8005994:	42a9      	cmp	r1, r5
 8005996:	d904      	bls.n	80059a2 <_malloc_r+0x26>
 8005998:	230c      	movs	r3, #12
 800599a:	6033      	str	r3, [r6, #0]
 800599c:	2000      	movs	r0, #0
 800599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a78 <_malloc_r+0xfc>
 80059a6:	f000 f869 	bl	8005a7c <__malloc_lock>
 80059aa:	f8d8 3000 	ldr.w	r3, [r8]
 80059ae:	461c      	mov	r4, r3
 80059b0:	bb44      	cbnz	r4, 8005a04 <_malloc_r+0x88>
 80059b2:	4629      	mov	r1, r5
 80059b4:	4630      	mov	r0, r6
 80059b6:	f7ff ffbf 	bl	8005938 <sbrk_aligned>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	4604      	mov	r4, r0
 80059be:	d158      	bne.n	8005a72 <_malloc_r+0xf6>
 80059c0:	f8d8 4000 	ldr.w	r4, [r8]
 80059c4:	4627      	mov	r7, r4
 80059c6:	2f00      	cmp	r7, #0
 80059c8:	d143      	bne.n	8005a52 <_malloc_r+0xd6>
 80059ca:	2c00      	cmp	r4, #0
 80059cc:	d04b      	beq.n	8005a66 <_malloc_r+0xea>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	4639      	mov	r1, r7
 80059d2:	4630      	mov	r0, r6
 80059d4:	eb04 0903 	add.w	r9, r4, r3
 80059d8:	f000 fdf6 	bl	80065c8 <_sbrk_r>
 80059dc:	4581      	cmp	r9, r0
 80059de:	d142      	bne.n	8005a66 <_malloc_r+0xea>
 80059e0:	6821      	ldr	r1, [r4, #0]
 80059e2:	4630      	mov	r0, r6
 80059e4:	1a6d      	subs	r5, r5, r1
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7ff ffa6 	bl	8005938 <sbrk_aligned>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d03a      	beq.n	8005a66 <_malloc_r+0xea>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	442b      	add	r3, r5
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	f8d8 3000 	ldr.w	r3, [r8]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	bb62      	cbnz	r2, 8005a58 <_malloc_r+0xdc>
 80059fe:	f8c8 7000 	str.w	r7, [r8]
 8005a02:	e00f      	b.n	8005a24 <_malloc_r+0xa8>
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	1b52      	subs	r2, r2, r5
 8005a08:	d420      	bmi.n	8005a4c <_malloc_r+0xd0>
 8005a0a:	2a0b      	cmp	r2, #11
 8005a0c:	d917      	bls.n	8005a3e <_malloc_r+0xc2>
 8005a0e:	1961      	adds	r1, r4, r5
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	6025      	str	r5, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	6059      	strne	r1, [r3, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	bf08      	it	eq
 8005a1c:	f8c8 1000 	streq.w	r1, [r8]
 8005a20:	5162      	str	r2, [r4, r5]
 8005a22:	604b      	str	r3, [r1, #4]
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f82f 	bl	8005a88 <__malloc_unlock>
 8005a2a:	f104 000b 	add.w	r0, r4, #11
 8005a2e:	1d23      	adds	r3, r4, #4
 8005a30:	f020 0007 	bic.w	r0, r0, #7
 8005a34:	1ac2      	subs	r2, r0, r3
 8005a36:	bf1c      	itt	ne
 8005a38:	1a1b      	subne	r3, r3, r0
 8005a3a:	50a3      	strne	r3, [r4, r2]
 8005a3c:	e7af      	b.n	800599e <_malloc_r+0x22>
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	bf0c      	ite	eq
 8005a44:	f8c8 2000 	streq.w	r2, [r8]
 8005a48:	605a      	strne	r2, [r3, #4]
 8005a4a:	e7eb      	b.n	8005a24 <_malloc_r+0xa8>
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	6864      	ldr	r4, [r4, #4]
 8005a50:	e7ae      	b.n	80059b0 <_malloc_r+0x34>
 8005a52:	463c      	mov	r4, r7
 8005a54:	687f      	ldr	r7, [r7, #4]
 8005a56:	e7b6      	b.n	80059c6 <_malloc_r+0x4a>
 8005a58:	461a      	mov	r2, r3
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d1fb      	bne.n	8005a58 <_malloc_r+0xdc>
 8005a60:	2300      	movs	r3, #0
 8005a62:	6053      	str	r3, [r2, #4]
 8005a64:	e7de      	b.n	8005a24 <_malloc_r+0xa8>
 8005a66:	230c      	movs	r3, #12
 8005a68:	4630      	mov	r0, r6
 8005a6a:	6033      	str	r3, [r6, #0]
 8005a6c:	f000 f80c 	bl	8005a88 <__malloc_unlock>
 8005a70:	e794      	b.n	800599c <_malloc_r+0x20>
 8005a72:	6005      	str	r5, [r0, #0]
 8005a74:	e7d6      	b.n	8005a24 <_malloc_r+0xa8>
 8005a76:	bf00      	nop
 8005a78:	20000434 	.word	0x20000434

08005a7c <__malloc_lock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	@ (8005a84 <__malloc_lock+0x8>)
 8005a7e:	f7ff b8a8 	b.w	8004bd2 <__retarget_lock_acquire_recursive>
 8005a82:	bf00      	nop
 8005a84:	2000042c 	.word	0x2000042c

08005a88 <__malloc_unlock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	@ (8005a90 <__malloc_unlock+0x8>)
 8005a8a:	f7ff b8a3 	b.w	8004bd4 <__retarget_lock_release_recursive>
 8005a8e:	bf00      	nop
 8005a90:	2000042c 	.word	0x2000042c

08005a94 <_Balloc>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	69c6      	ldr	r6, [r0, #28]
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	b976      	cbnz	r6, 8005abc <_Balloc+0x28>
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff ff42 	bl	8005928 <malloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	61e0      	str	r0, [r4, #28]
 8005aa8:	b920      	cbnz	r0, 8005ab4 <_Balloc+0x20>
 8005aaa:	216b      	movs	r1, #107	@ 0x6b
 8005aac:	4b17      	ldr	r3, [pc, #92]	@ (8005b0c <_Balloc+0x78>)
 8005aae:	4818      	ldr	r0, [pc, #96]	@ (8005b10 <_Balloc+0x7c>)
 8005ab0:	f000 fda8 	bl	8006604 <__assert_func>
 8005ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab8:	6006      	str	r6, [r0, #0]
 8005aba:	60c6      	str	r6, [r0, #12]
 8005abc:	69e6      	ldr	r6, [r4, #28]
 8005abe:	68f3      	ldr	r3, [r6, #12]
 8005ac0:	b183      	cbz	r3, 8005ae4 <_Balloc+0x50>
 8005ac2:	69e3      	ldr	r3, [r4, #28]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aca:	b9b8      	cbnz	r0, 8005afc <_Balloc+0x68>
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f605 	lsl.w	r6, r1, r5
 8005ad2:	1d72      	adds	r2, r6, #5
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	f000 fdb2 	bl	8006640 <_calloc_r>
 8005adc:	b160      	cbz	r0, 8005af8 <_Balloc+0x64>
 8005ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ae2:	e00e      	b.n	8005b02 <_Balloc+0x6e>
 8005ae4:	2221      	movs	r2, #33	@ 0x21
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fda9 	bl	8006640 <_calloc_r>
 8005aee:	69e3      	ldr	r3, [r4, #28]
 8005af0:	60f0      	str	r0, [r6, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e4      	bne.n	8005ac2 <_Balloc+0x2e>
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b02:	2300      	movs	r3, #0
 8005b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b08:	e7f7      	b.n	8005afa <_Balloc+0x66>
 8005b0a:	bf00      	nop
 8005b0c:	08006d3f 	.word	0x08006d3f
 8005b10:	08006dbf 	.word	0x08006dbf

08005b14 <_Bfree>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	69c6      	ldr	r6, [r0, #28]
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b976      	cbnz	r6, 8005b3c <_Bfree+0x28>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f7ff ff02 	bl	8005928 <malloc>
 8005b24:	4602      	mov	r2, r0
 8005b26:	61e8      	str	r0, [r5, #28]
 8005b28:	b920      	cbnz	r0, 8005b34 <_Bfree+0x20>
 8005b2a:	218f      	movs	r1, #143	@ 0x8f
 8005b2c:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <_Bfree+0x3c>)
 8005b2e:	4809      	ldr	r0, [pc, #36]	@ (8005b54 <_Bfree+0x40>)
 8005b30:	f000 fd68 	bl	8006604 <__assert_func>
 8005b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b38:	6006      	str	r6, [r0, #0]
 8005b3a:	60c6      	str	r6, [r0, #12]
 8005b3c:	b13c      	cbz	r4, 8005b4e <_Bfree+0x3a>
 8005b3e:	69eb      	ldr	r3, [r5, #28]
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b48:	6021      	str	r1, [r4, #0]
 8005b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	08006d3f 	.word	0x08006d3f
 8005b54:	08006dbf 	.word	0x08006dbf

08005b58 <__multadd>:
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	461e      	mov	r6, r3
 8005b62:	2000      	movs	r0, #0
 8005b64:	690d      	ldr	r5, [r1, #16]
 8005b66:	f101 0c14 	add.w	ip, r1, #20
 8005b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005b6e:	3001      	adds	r0, #1
 8005b70:	b299      	uxth	r1, r3
 8005b72:	fb02 6101 	mla	r1, r2, r1, r6
 8005b76:	0c1e      	lsrs	r6, r3, #16
 8005b78:	0c0b      	lsrs	r3, r1, #16
 8005b7a:	fb02 3306 	mla	r3, r2, r6, r3
 8005b7e:	b289      	uxth	r1, r1
 8005b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b84:	4285      	cmp	r5, r0
 8005b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b8e:	dcec      	bgt.n	8005b6a <__multadd+0x12>
 8005b90:	b30e      	cbz	r6, 8005bd6 <__multadd+0x7e>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc19      	bgt.n	8005bcc <__multadd+0x74>
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	f7ff ff79 	bl	8005a94 <_Balloc>
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__multadd+0x5a>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	21ba      	movs	r1, #186	@ 0xba
 8005baa:	4b0c      	ldr	r3, [pc, #48]	@ (8005bdc <__multadd+0x84>)
 8005bac:	480c      	ldr	r0, [pc, #48]	@ (8005be0 <__multadd+0x88>)
 8005bae:	f000 fd29 	bl	8006604 <__assert_func>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	f104 010c 	add.w	r1, r4, #12
 8005bb8:	3202      	adds	r2, #2
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f000 fd13 	bl	80065e8 <memcpy>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ffa5 	bl	8005b14 <_Bfree>
 8005bca:	4644      	mov	r4, r8
 8005bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	615e      	str	r6, [r3, #20]
 8005bd4:	6125      	str	r5, [r4, #16]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	08006dae 	.word	0x08006dae
 8005be0:	08006dbf 	.word	0x08006dbf

08005be4 <__hi0bits>:
 8005be4:	4603      	mov	r3, r0
 8005be6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005bea:	bf3a      	itte	cc
 8005bec:	0403      	lslcc	r3, r0, #16
 8005bee:	2010      	movcc	r0, #16
 8005bf0:	2000      	movcs	r0, #0
 8005bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bf6:	bf3c      	itt	cc
 8005bf8:	021b      	lslcc	r3, r3, #8
 8005bfa:	3008      	addcc	r0, #8
 8005bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c00:	bf3c      	itt	cc
 8005c02:	011b      	lslcc	r3, r3, #4
 8005c04:	3004      	addcc	r0, #4
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c0a:	bf3c      	itt	cc
 8005c0c:	009b      	lslcc	r3, r3, #2
 8005c0e:	3002      	addcc	r0, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db05      	blt.n	8005c20 <__hi0bits+0x3c>
 8005c14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c18:	f100 0001 	add.w	r0, r0, #1
 8005c1c:	bf08      	it	eq
 8005c1e:	2020      	moveq	r0, #32
 8005c20:	4770      	bx	lr

08005c22 <__lo0bits>:
 8005c22:	6803      	ldr	r3, [r0, #0]
 8005c24:	4602      	mov	r2, r0
 8005c26:	f013 0007 	ands.w	r0, r3, #7
 8005c2a:	d00b      	beq.n	8005c44 <__lo0bits+0x22>
 8005c2c:	07d9      	lsls	r1, r3, #31
 8005c2e:	d421      	bmi.n	8005c74 <__lo0bits+0x52>
 8005c30:	0798      	lsls	r0, r3, #30
 8005c32:	bf49      	itett	mi
 8005c34:	085b      	lsrmi	r3, r3, #1
 8005c36:	089b      	lsrpl	r3, r3, #2
 8005c38:	2001      	movmi	r0, #1
 8005c3a:	6013      	strmi	r3, [r2, #0]
 8005c3c:	bf5c      	itt	pl
 8005c3e:	2002      	movpl	r0, #2
 8005c40:	6013      	strpl	r3, [r2, #0]
 8005c42:	4770      	bx	lr
 8005c44:	b299      	uxth	r1, r3
 8005c46:	b909      	cbnz	r1, 8005c4c <__lo0bits+0x2a>
 8005c48:	2010      	movs	r0, #16
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	b2d9      	uxtb	r1, r3
 8005c4e:	b909      	cbnz	r1, 8005c54 <__lo0bits+0x32>
 8005c50:	3008      	adds	r0, #8
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	0719      	lsls	r1, r3, #28
 8005c56:	bf04      	itt	eq
 8005c58:	091b      	lsreq	r3, r3, #4
 8005c5a:	3004      	addeq	r0, #4
 8005c5c:	0799      	lsls	r1, r3, #30
 8005c5e:	bf04      	itt	eq
 8005c60:	089b      	lsreq	r3, r3, #2
 8005c62:	3002      	addeq	r0, #2
 8005c64:	07d9      	lsls	r1, r3, #31
 8005c66:	d403      	bmi.n	8005c70 <__lo0bits+0x4e>
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	f100 0001 	add.w	r0, r0, #1
 8005c6e:	d003      	beq.n	8005c78 <__lo0bits+0x56>
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4770      	bx	lr
 8005c74:	2000      	movs	r0, #0
 8005c76:	4770      	bx	lr
 8005c78:	2020      	movs	r0, #32
 8005c7a:	4770      	bx	lr

08005c7c <__i2b>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	460c      	mov	r4, r1
 8005c80:	2101      	movs	r1, #1
 8005c82:	f7ff ff07 	bl	8005a94 <_Balloc>
 8005c86:	4602      	mov	r2, r0
 8005c88:	b928      	cbnz	r0, 8005c96 <__i2b+0x1a>
 8005c8a:	f240 1145 	movw	r1, #325	@ 0x145
 8005c8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <__i2b+0x24>)
 8005c90:	4804      	ldr	r0, [pc, #16]	@ (8005ca4 <__i2b+0x28>)
 8005c92:	f000 fcb7 	bl	8006604 <__assert_func>
 8005c96:	2301      	movs	r3, #1
 8005c98:	6144      	str	r4, [r0, #20]
 8005c9a:	6103      	str	r3, [r0, #16]
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	bf00      	nop
 8005ca0:	08006dae 	.word	0x08006dae
 8005ca4:	08006dbf 	.word	0x08006dbf

08005ca8 <__multiply>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	4614      	mov	r4, r2
 8005cae:	690a      	ldr	r2, [r1, #16]
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	460f      	mov	r7, r1
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	bfa2      	ittt	ge
 8005cb8:	4623      	movge	r3, r4
 8005cba:	460c      	movge	r4, r1
 8005cbc:	461f      	movge	r7, r3
 8005cbe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005cc2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	6861      	ldr	r1, [r4, #4]
 8005cca:	eb0a 0609 	add.w	r6, sl, r9
 8005cce:	42b3      	cmp	r3, r6
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	bfb8      	it	lt
 8005cd4:	3101      	addlt	r1, #1
 8005cd6:	f7ff fedd 	bl	8005a94 <_Balloc>
 8005cda:	b930      	cbnz	r0, 8005cea <__multiply+0x42>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ce2:	4b43      	ldr	r3, [pc, #268]	@ (8005df0 <__multiply+0x148>)
 8005ce4:	4843      	ldr	r0, [pc, #268]	@ (8005df4 <__multiply+0x14c>)
 8005ce6:	f000 fc8d 	bl	8006604 <__assert_func>
 8005cea:	f100 0514 	add.w	r5, r0, #20
 8005cee:	462b      	mov	r3, r5
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cf6:	4543      	cmp	r3, r8
 8005cf8:	d321      	bcc.n	8005d3e <__multiply+0x96>
 8005cfa:	f107 0114 	add.w	r1, r7, #20
 8005cfe:	f104 0214 	add.w	r2, r4, #20
 8005d02:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d06:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d0a:	9302      	str	r3, [sp, #8]
 8005d0c:	1b13      	subs	r3, r2, r4
 8005d0e:	3b15      	subs	r3, #21
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	3304      	adds	r3, #4
 8005d16:	f104 0715 	add.w	r7, r4, #21
 8005d1a:	42ba      	cmp	r2, r7
 8005d1c:	bf38      	it	cc
 8005d1e:	2304      	movcc	r3, #4
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	9b02      	ldr	r3, [sp, #8]
 8005d24:	9103      	str	r1, [sp, #12]
 8005d26:	428b      	cmp	r3, r1
 8005d28:	d80c      	bhi.n	8005d44 <__multiply+0x9c>
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	dd03      	ble.n	8005d36 <__multiply+0x8e>
 8005d2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d05a      	beq.n	8005dec <__multiply+0x144>
 8005d36:	6106      	str	r6, [r0, #16]
 8005d38:	b005      	add	sp, #20
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3e:	f843 2b04 	str.w	r2, [r3], #4
 8005d42:	e7d8      	b.n	8005cf6 <__multiply+0x4e>
 8005d44:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	d023      	beq.n	8005d96 <__multiply+0xee>
 8005d4e:	46a9      	mov	r9, r5
 8005d50:	f04f 0c00 	mov.w	ip, #0
 8005d54:	f104 0e14 	add.w	lr, r4, #20
 8005d58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d5c:	f8d9 3000 	ldr.w	r3, [r9]
 8005d60:	fa1f fb87 	uxth.w	fp, r7
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d6a:	4463      	add	r3, ip
 8005d6c:	f8d9 c000 	ldr.w	ip, [r9]
 8005d70:	0c3f      	lsrs	r7, r7, #16
 8005d72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d76:	fb0a c707 	mla	r7, sl, r7, ip
 8005d7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d84:	4572      	cmp	r2, lr
 8005d86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d8a:	f849 3b04 	str.w	r3, [r9], #4
 8005d8e:	d8e3      	bhi.n	8005d58 <__multiply+0xb0>
 8005d90:	9b01      	ldr	r3, [sp, #4]
 8005d92:	f845 c003 	str.w	ip, [r5, r3]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	3104      	adds	r1, #4
 8005d9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d9e:	f1b9 0f00 	cmp.w	r9, #0
 8005da2:	d021      	beq.n	8005de8 <__multiply+0x140>
 8005da4:	46ae      	mov	lr, r5
 8005da6:	f04f 0a00 	mov.w	sl, #0
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	f104 0c14 	add.w	ip, r4, #20
 8005db0:	f8bc b000 	ldrh.w	fp, [ip]
 8005db4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	fb09 770b 	mla	r7, r9, fp, r7
 8005dbe:	4457      	add	r7, sl
 8005dc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005dc4:	f84e 3b04 	str.w	r3, [lr], #4
 8005dc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005dcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dd0:	f8be 3000 	ldrh.w	r3, [lr]
 8005dd4:	4562      	cmp	r2, ip
 8005dd6:	fb09 330a 	mla	r3, r9, sl, r3
 8005dda:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005dde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005de2:	d8e5      	bhi.n	8005db0 <__multiply+0x108>
 8005de4:	9f01      	ldr	r7, [sp, #4]
 8005de6:	51eb      	str	r3, [r5, r7]
 8005de8:	3504      	adds	r5, #4
 8005dea:	e79a      	b.n	8005d22 <__multiply+0x7a>
 8005dec:	3e01      	subs	r6, #1
 8005dee:	e79c      	b.n	8005d2a <__multiply+0x82>
 8005df0:	08006dae 	.word	0x08006dae
 8005df4:	08006dbf 	.word	0x08006dbf

08005df8 <__pow5mult>:
 8005df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dfc:	4615      	mov	r5, r2
 8005dfe:	f012 0203 	ands.w	r2, r2, #3
 8005e02:	4607      	mov	r7, r0
 8005e04:	460e      	mov	r6, r1
 8005e06:	d007      	beq.n	8005e18 <__pow5mult+0x20>
 8005e08:	4c25      	ldr	r4, [pc, #148]	@ (8005ea0 <__pow5mult+0xa8>)
 8005e0a:	3a01      	subs	r2, #1
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e12:	f7ff fea1 	bl	8005b58 <__multadd>
 8005e16:	4606      	mov	r6, r0
 8005e18:	10ad      	asrs	r5, r5, #2
 8005e1a:	d03d      	beq.n	8005e98 <__pow5mult+0xa0>
 8005e1c:	69fc      	ldr	r4, [r7, #28]
 8005e1e:	b97c      	cbnz	r4, 8005e40 <__pow5mult+0x48>
 8005e20:	2010      	movs	r0, #16
 8005e22:	f7ff fd81 	bl	8005928 <malloc>
 8005e26:	4602      	mov	r2, r0
 8005e28:	61f8      	str	r0, [r7, #28]
 8005e2a:	b928      	cbnz	r0, 8005e38 <__pow5mult+0x40>
 8005e2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e30:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea4 <__pow5mult+0xac>)
 8005e32:	481d      	ldr	r0, [pc, #116]	@ (8005ea8 <__pow5mult+0xb0>)
 8005e34:	f000 fbe6 	bl	8006604 <__assert_func>
 8005e38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e3c:	6004      	str	r4, [r0, #0]
 8005e3e:	60c4      	str	r4, [r0, #12]
 8005e40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e48:	b94c      	cbnz	r4, 8005e5e <__pow5mult+0x66>
 8005e4a:	f240 2171 	movw	r1, #625	@ 0x271
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f7ff ff14 	bl	8005c7c <__i2b>
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e5c:	6003      	str	r3, [r0, #0]
 8005e5e:	f04f 0900 	mov.w	r9, #0
 8005e62:	07eb      	lsls	r3, r5, #31
 8005e64:	d50a      	bpl.n	8005e7c <__pow5mult+0x84>
 8005e66:	4631      	mov	r1, r6
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	f7ff ff1c 	bl	8005ca8 <__multiply>
 8005e70:	4680      	mov	r8, r0
 8005e72:	4631      	mov	r1, r6
 8005e74:	4638      	mov	r0, r7
 8005e76:	f7ff fe4d 	bl	8005b14 <_Bfree>
 8005e7a:	4646      	mov	r6, r8
 8005e7c:	106d      	asrs	r5, r5, #1
 8005e7e:	d00b      	beq.n	8005e98 <__pow5mult+0xa0>
 8005e80:	6820      	ldr	r0, [r4, #0]
 8005e82:	b938      	cbnz	r0, 8005e94 <__pow5mult+0x9c>
 8005e84:	4622      	mov	r2, r4
 8005e86:	4621      	mov	r1, r4
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff ff0d 	bl	8005ca8 <__multiply>
 8005e8e:	6020      	str	r0, [r4, #0]
 8005e90:	f8c0 9000 	str.w	r9, [r0]
 8005e94:	4604      	mov	r4, r0
 8005e96:	e7e4      	b.n	8005e62 <__pow5mult+0x6a>
 8005e98:	4630      	mov	r0, r6
 8005e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e9e:	bf00      	nop
 8005ea0:	08006e18 	.word	0x08006e18
 8005ea4:	08006d3f 	.word	0x08006d3f
 8005ea8:	08006dbf 	.word	0x08006dbf

08005eac <__lshift>:
 8005eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	4607      	mov	r7, r0
 8005eb4:	4691      	mov	r9, r2
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	6849      	ldr	r1, [r1, #4]
 8005eba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ec4:	f108 0601 	add.w	r6, r8, #1
 8005ec8:	42b3      	cmp	r3, r6
 8005eca:	db0b      	blt.n	8005ee4 <__lshift+0x38>
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff fde1 	bl	8005a94 <_Balloc>
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	b948      	cbnz	r0, 8005eea <__lshift+0x3e>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005edc:	4b27      	ldr	r3, [pc, #156]	@ (8005f7c <__lshift+0xd0>)
 8005ede:	4828      	ldr	r0, [pc, #160]	@ (8005f80 <__lshift+0xd4>)
 8005ee0:	f000 fb90 	bl	8006604 <__assert_func>
 8005ee4:	3101      	adds	r1, #1
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	e7ee      	b.n	8005ec8 <__lshift+0x1c>
 8005eea:	2300      	movs	r3, #0
 8005eec:	f100 0114 	add.w	r1, r0, #20
 8005ef0:	f100 0210 	add.w	r2, r0, #16
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	4553      	cmp	r3, sl
 8005ef8:	db33      	blt.n	8005f62 <__lshift+0xb6>
 8005efa:	6920      	ldr	r0, [r4, #16]
 8005efc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f00:	f104 0314 	add.w	r3, r4, #20
 8005f04:	f019 091f 	ands.w	r9, r9, #31
 8005f08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f10:	d02b      	beq.n	8005f6a <__lshift+0xbe>
 8005f12:	468a      	mov	sl, r1
 8005f14:	2200      	movs	r2, #0
 8005f16:	f1c9 0e20 	rsb	lr, r9, #32
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	fa00 f009 	lsl.w	r0, r0, r9
 8005f20:	4310      	orrs	r0, r2
 8005f22:	f84a 0b04 	str.w	r0, [sl], #4
 8005f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f2a:	459c      	cmp	ip, r3
 8005f2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f30:	d8f3      	bhi.n	8005f1a <__lshift+0x6e>
 8005f32:	ebac 0304 	sub.w	r3, ip, r4
 8005f36:	3b15      	subs	r3, #21
 8005f38:	f023 0303 	bic.w	r3, r3, #3
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	f104 0015 	add.w	r0, r4, #21
 8005f42:	4584      	cmp	ip, r0
 8005f44:	bf38      	it	cc
 8005f46:	2304      	movcc	r3, #4
 8005f48:	50ca      	str	r2, [r1, r3]
 8005f4a:	b10a      	cbz	r2, 8005f50 <__lshift+0xa4>
 8005f4c:	f108 0602 	add.w	r6, r8, #2
 8005f50:	3e01      	subs	r6, #1
 8005f52:	4638      	mov	r0, r7
 8005f54:	4621      	mov	r1, r4
 8005f56:	612e      	str	r6, [r5, #16]
 8005f58:	f7ff fddc 	bl	8005b14 <_Bfree>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f66:	3301      	adds	r3, #1
 8005f68:	e7c5      	b.n	8005ef6 <__lshift+0x4a>
 8005f6a:	3904      	subs	r1, #4
 8005f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f70:	459c      	cmp	ip, r3
 8005f72:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f76:	d8f9      	bhi.n	8005f6c <__lshift+0xc0>
 8005f78:	e7ea      	b.n	8005f50 <__lshift+0xa4>
 8005f7a:	bf00      	nop
 8005f7c:	08006dae 	.word	0x08006dae
 8005f80:	08006dbf 	.word	0x08006dbf

08005f84 <__mcmp>:
 8005f84:	4603      	mov	r3, r0
 8005f86:	690a      	ldr	r2, [r1, #16]
 8005f88:	6900      	ldr	r0, [r0, #16]
 8005f8a:	b530      	push	{r4, r5, lr}
 8005f8c:	1a80      	subs	r0, r0, r2
 8005f8e:	d10e      	bne.n	8005fae <__mcmp+0x2a>
 8005f90:	3314      	adds	r3, #20
 8005f92:	3114      	adds	r1, #20
 8005f94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fa4:	4295      	cmp	r5, r2
 8005fa6:	d003      	beq.n	8005fb0 <__mcmp+0x2c>
 8005fa8:	d205      	bcs.n	8005fb6 <__mcmp+0x32>
 8005faa:	f04f 30ff 	mov.w	r0, #4294967295
 8005fae:	bd30      	pop	{r4, r5, pc}
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d3f3      	bcc.n	8005f9c <__mcmp+0x18>
 8005fb4:	e7fb      	b.n	8005fae <__mcmp+0x2a>
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	e7f9      	b.n	8005fae <__mcmp+0x2a>
	...

08005fbc <__mdiff>:
 8005fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc0:	4689      	mov	r9, r1
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4648      	mov	r0, r9
 8005fc8:	4614      	mov	r4, r2
 8005fca:	f7ff ffdb 	bl	8005f84 <__mcmp>
 8005fce:	1e05      	subs	r5, r0, #0
 8005fd0:	d112      	bne.n	8005ff8 <__mdiff+0x3c>
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff fd5d 	bl	8005a94 <_Balloc>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	b928      	cbnz	r0, 8005fea <__mdiff+0x2e>
 8005fde:	f240 2137 	movw	r1, #567	@ 0x237
 8005fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80060dc <__mdiff+0x120>)
 8005fe4:	483e      	ldr	r0, [pc, #248]	@ (80060e0 <__mdiff+0x124>)
 8005fe6:	f000 fb0d 	bl	8006604 <__assert_func>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	b003      	add	sp, #12
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	bfbc      	itt	lt
 8005ffa:	464b      	movlt	r3, r9
 8005ffc:	46a1      	movlt	r9, r4
 8005ffe:	4630      	mov	r0, r6
 8006000:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006004:	bfba      	itte	lt
 8006006:	461c      	movlt	r4, r3
 8006008:	2501      	movlt	r5, #1
 800600a:	2500      	movge	r5, #0
 800600c:	f7ff fd42 	bl	8005a94 <_Balloc>
 8006010:	4602      	mov	r2, r0
 8006012:	b918      	cbnz	r0, 800601c <__mdiff+0x60>
 8006014:	f240 2145 	movw	r1, #581	@ 0x245
 8006018:	4b30      	ldr	r3, [pc, #192]	@ (80060dc <__mdiff+0x120>)
 800601a:	e7e3      	b.n	8005fe4 <__mdiff+0x28>
 800601c:	f100 0b14 	add.w	fp, r0, #20
 8006020:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006024:	f109 0310 	add.w	r3, r9, #16
 8006028:	60c5      	str	r5, [r0, #12]
 800602a:	f04f 0c00 	mov.w	ip, #0
 800602e:	f109 0514 	add.w	r5, r9, #20
 8006032:	46d9      	mov	r9, fp
 8006034:	6926      	ldr	r6, [r4, #16]
 8006036:	f104 0e14 	add.w	lr, r4, #20
 800603a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800603e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	f85e 0b04 	ldr.w	r0, [lr], #4
 800604a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800604e:	b281      	uxth	r1, r0
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	fa1f f38a 	uxth.w	r3, sl
 8006056:	1a5b      	subs	r3, r3, r1
 8006058:	0c00      	lsrs	r0, r0, #16
 800605a:	4463      	add	r3, ip
 800605c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006060:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800606a:	4576      	cmp	r6, lr
 800606c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006070:	f849 3b04 	str.w	r3, [r9], #4
 8006074:	d8e6      	bhi.n	8006044 <__mdiff+0x88>
 8006076:	1b33      	subs	r3, r6, r4
 8006078:	3b15      	subs	r3, #21
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	3415      	adds	r4, #21
 8006080:	3304      	adds	r3, #4
 8006082:	42a6      	cmp	r6, r4
 8006084:	bf38      	it	cc
 8006086:	2304      	movcc	r3, #4
 8006088:	441d      	add	r5, r3
 800608a:	445b      	add	r3, fp
 800608c:	461e      	mov	r6, r3
 800608e:	462c      	mov	r4, r5
 8006090:	4544      	cmp	r4, r8
 8006092:	d30e      	bcc.n	80060b2 <__mdiff+0xf6>
 8006094:	f108 0103 	add.w	r1, r8, #3
 8006098:	1b49      	subs	r1, r1, r5
 800609a:	f021 0103 	bic.w	r1, r1, #3
 800609e:	3d03      	subs	r5, #3
 80060a0:	45a8      	cmp	r8, r5
 80060a2:	bf38      	it	cc
 80060a4:	2100      	movcc	r1, #0
 80060a6:	440b      	add	r3, r1
 80060a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80060ac:	b199      	cbz	r1, 80060d6 <__mdiff+0x11a>
 80060ae:	6117      	str	r7, [r2, #16]
 80060b0:	e79e      	b.n	8005ff0 <__mdiff+0x34>
 80060b2:	46e6      	mov	lr, ip
 80060b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80060b8:	fa1f fc81 	uxth.w	ip, r1
 80060bc:	44f4      	add	ip, lr
 80060be:	0c08      	lsrs	r0, r1, #16
 80060c0:	4471      	add	r1, lr
 80060c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80060c6:	b289      	uxth	r1, r1
 80060c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80060cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060d0:	f846 1b04 	str.w	r1, [r6], #4
 80060d4:	e7dc      	b.n	8006090 <__mdiff+0xd4>
 80060d6:	3f01      	subs	r7, #1
 80060d8:	e7e6      	b.n	80060a8 <__mdiff+0xec>
 80060da:	bf00      	nop
 80060dc:	08006dae 	.word	0x08006dae
 80060e0:	08006dbf 	.word	0x08006dbf

080060e4 <__d2b>:
 80060e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80060e8:	2101      	movs	r1, #1
 80060ea:	4690      	mov	r8, r2
 80060ec:	4699      	mov	r9, r3
 80060ee:	9e08      	ldr	r6, [sp, #32]
 80060f0:	f7ff fcd0 	bl	8005a94 <_Balloc>
 80060f4:	4604      	mov	r4, r0
 80060f6:	b930      	cbnz	r0, 8006106 <__d2b+0x22>
 80060f8:	4602      	mov	r2, r0
 80060fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80060fe:	4b23      	ldr	r3, [pc, #140]	@ (800618c <__d2b+0xa8>)
 8006100:	4823      	ldr	r0, [pc, #140]	@ (8006190 <__d2b+0xac>)
 8006102:	f000 fa7f 	bl	8006604 <__assert_func>
 8006106:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800610a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800610e:	b10d      	cbz	r5, 8006114 <__d2b+0x30>
 8006110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	f1b8 0300 	subs.w	r3, r8, #0
 800611a:	d024      	beq.n	8006166 <__d2b+0x82>
 800611c:	4668      	mov	r0, sp
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	f7ff fd7f 	bl	8005c22 <__lo0bits>
 8006124:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006128:	b1d8      	cbz	r0, 8006162 <__d2b+0x7e>
 800612a:	f1c0 0320 	rsb	r3, r0, #32
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	430b      	orrs	r3, r1
 8006134:	40c2      	lsrs	r2, r0
 8006136:	6163      	str	r3, [r4, #20]
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf0c      	ite	eq
 8006140:	2201      	moveq	r2, #1
 8006142:	2202      	movne	r2, #2
 8006144:	61a3      	str	r3, [r4, #24]
 8006146:	6122      	str	r2, [r4, #16]
 8006148:	b1ad      	cbz	r5, 8006176 <__d2b+0x92>
 800614a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800614e:	4405      	add	r5, r0
 8006150:	6035      	str	r5, [r6, #0]
 8006152:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006158:	6018      	str	r0, [r3, #0]
 800615a:	4620      	mov	r0, r4
 800615c:	b002      	add	sp, #8
 800615e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006162:	6161      	str	r1, [r4, #20]
 8006164:	e7e9      	b.n	800613a <__d2b+0x56>
 8006166:	a801      	add	r0, sp, #4
 8006168:	f7ff fd5b 	bl	8005c22 <__lo0bits>
 800616c:	9b01      	ldr	r3, [sp, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	6163      	str	r3, [r4, #20]
 8006172:	3020      	adds	r0, #32
 8006174:	e7e7      	b.n	8006146 <__d2b+0x62>
 8006176:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800617a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800617e:	6030      	str	r0, [r6, #0]
 8006180:	6918      	ldr	r0, [r3, #16]
 8006182:	f7ff fd2f 	bl	8005be4 <__hi0bits>
 8006186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800618a:	e7e4      	b.n	8006156 <__d2b+0x72>
 800618c:	08006dae 	.word	0x08006dae
 8006190:	08006dbf 	.word	0x08006dbf

08006194 <__ssputs_r>:
 8006194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	461f      	mov	r7, r3
 800619a:	688e      	ldr	r6, [r1, #8]
 800619c:	4682      	mov	sl, r0
 800619e:	42be      	cmp	r6, r7
 80061a0:	460c      	mov	r4, r1
 80061a2:	4690      	mov	r8, r2
 80061a4:	680b      	ldr	r3, [r1, #0]
 80061a6:	d82d      	bhi.n	8006204 <__ssputs_r+0x70>
 80061a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061b0:	d026      	beq.n	8006200 <__ssputs_r+0x6c>
 80061b2:	6965      	ldr	r5, [r4, #20]
 80061b4:	6909      	ldr	r1, [r1, #16]
 80061b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ba:	eba3 0901 	sub.w	r9, r3, r1
 80061be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061c2:	1c7b      	adds	r3, r7, #1
 80061c4:	444b      	add	r3, r9
 80061c6:	106d      	asrs	r5, r5, #1
 80061c8:	429d      	cmp	r5, r3
 80061ca:	bf38      	it	cc
 80061cc:	461d      	movcc	r5, r3
 80061ce:	0553      	lsls	r3, r2, #21
 80061d0:	d527      	bpl.n	8006222 <__ssputs_r+0x8e>
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7ff fbd2 	bl	800597c <_malloc_r>
 80061d8:	4606      	mov	r6, r0
 80061da:	b360      	cbz	r0, 8006236 <__ssputs_r+0xa2>
 80061dc:	464a      	mov	r2, r9
 80061de:	6921      	ldr	r1, [r4, #16]
 80061e0:	f000 fa02 	bl	80065e8 <memcpy>
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	6126      	str	r6, [r4, #16]
 80061f2:	444e      	add	r6, r9
 80061f4:	6026      	str	r6, [r4, #0]
 80061f6:	463e      	mov	r6, r7
 80061f8:	6165      	str	r5, [r4, #20]
 80061fa:	eba5 0509 	sub.w	r5, r5, r9
 80061fe:	60a5      	str	r5, [r4, #8]
 8006200:	42be      	cmp	r6, r7
 8006202:	d900      	bls.n	8006206 <__ssputs_r+0x72>
 8006204:	463e      	mov	r6, r7
 8006206:	4632      	mov	r2, r6
 8006208:	4641      	mov	r1, r8
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	f000 f9c2 	bl	8006594 <memmove>
 8006210:	2000      	movs	r0, #0
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	1b9b      	subs	r3, r3, r6
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	4433      	add	r3, r6
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	462a      	mov	r2, r5
 8006224:	f000 fa32 	bl	800668c <_realloc_r>
 8006228:	4606      	mov	r6, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	d1e0      	bne.n	80061f0 <__ssputs_r+0x5c>
 800622e:	4650      	mov	r0, sl
 8006230:	6921      	ldr	r1, [r4, #16]
 8006232:	f7ff fb31 	bl	8005898 <_free_r>
 8006236:	230c      	movs	r3, #12
 8006238:	f8ca 3000 	str.w	r3, [sl]
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	f04f 30ff 	mov.w	r0, #4294967295
 8006242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	e7e9      	b.n	800621e <__ssputs_r+0x8a>
	...

0800624c <_svfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	4698      	mov	r8, r3
 8006252:	898b      	ldrh	r3, [r1, #12]
 8006254:	4607      	mov	r7, r0
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	460d      	mov	r5, r1
 800625a:	4614      	mov	r4, r2
 800625c:	b09d      	sub	sp, #116	@ 0x74
 800625e:	d510      	bpl.n	8006282 <_svfiprintf_r+0x36>
 8006260:	690b      	ldr	r3, [r1, #16]
 8006262:	b973      	cbnz	r3, 8006282 <_svfiprintf_r+0x36>
 8006264:	2140      	movs	r1, #64	@ 0x40
 8006266:	f7ff fb89 	bl	800597c <_malloc_r>
 800626a:	6028      	str	r0, [r5, #0]
 800626c:	6128      	str	r0, [r5, #16]
 800626e:	b930      	cbnz	r0, 800627e <_svfiprintf_r+0x32>
 8006270:	230c      	movs	r3, #12
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	b01d      	add	sp, #116	@ 0x74
 800627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627e:	2340      	movs	r3, #64	@ 0x40
 8006280:	616b      	str	r3, [r5, #20]
 8006282:	2300      	movs	r3, #0
 8006284:	9309      	str	r3, [sp, #36]	@ 0x24
 8006286:	2320      	movs	r3, #32
 8006288:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800628c:	2330      	movs	r3, #48	@ 0x30
 800628e:	f04f 0901 	mov.w	r9, #1
 8006292:	f8cd 800c 	str.w	r8, [sp, #12]
 8006296:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006430 <_svfiprintf_r+0x1e4>
 800629a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800629e:	4623      	mov	r3, r4
 80062a0:	469a      	mov	sl, r3
 80062a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a6:	b10a      	cbz	r2, 80062ac <_svfiprintf_r+0x60>
 80062a8:	2a25      	cmp	r2, #37	@ 0x25
 80062aa:	d1f9      	bne.n	80062a0 <_svfiprintf_r+0x54>
 80062ac:	ebba 0b04 	subs.w	fp, sl, r4
 80062b0:	d00b      	beq.n	80062ca <_svfiprintf_r+0x7e>
 80062b2:	465b      	mov	r3, fp
 80062b4:	4622      	mov	r2, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7ff ff6b 	bl	8006194 <__ssputs_r>
 80062be:	3001      	adds	r0, #1
 80062c0:	f000 80a7 	beq.w	8006412 <_svfiprintf_r+0x1c6>
 80062c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c6:	445a      	add	r2, fp
 80062c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80062ca:	f89a 3000 	ldrb.w	r3, [sl]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 809f 	beq.w	8006412 <_svfiprintf_r+0x1c6>
 80062d4:	2300      	movs	r3, #0
 80062d6:	f04f 32ff 	mov.w	r2, #4294967295
 80062da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062de:	f10a 0a01 	add.w	sl, sl, #1
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	9307      	str	r3, [sp, #28]
 80062e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80062ec:	4654      	mov	r4, sl
 80062ee:	2205      	movs	r2, #5
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	484e      	ldr	r0, [pc, #312]	@ (8006430 <_svfiprintf_r+0x1e4>)
 80062f6:	f7fe fc6e 	bl	8004bd6 <memchr>
 80062fa:	9a04      	ldr	r2, [sp, #16]
 80062fc:	b9d8      	cbnz	r0, 8006336 <_svfiprintf_r+0xea>
 80062fe:	06d0      	lsls	r0, r2, #27
 8006300:	bf44      	itt	mi
 8006302:	2320      	movmi	r3, #32
 8006304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006308:	0711      	lsls	r1, r2, #28
 800630a:	bf44      	itt	mi
 800630c:	232b      	movmi	r3, #43	@ 0x2b
 800630e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006312:	f89a 3000 	ldrb.w	r3, [sl]
 8006316:	2b2a      	cmp	r3, #42	@ 0x2a
 8006318:	d015      	beq.n	8006346 <_svfiprintf_r+0xfa>
 800631a:	4654      	mov	r4, sl
 800631c:	2000      	movs	r0, #0
 800631e:	f04f 0c0a 	mov.w	ip, #10
 8006322:	9a07      	ldr	r2, [sp, #28]
 8006324:	4621      	mov	r1, r4
 8006326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800632a:	3b30      	subs	r3, #48	@ 0x30
 800632c:	2b09      	cmp	r3, #9
 800632e:	d94b      	bls.n	80063c8 <_svfiprintf_r+0x17c>
 8006330:	b1b0      	cbz	r0, 8006360 <_svfiprintf_r+0x114>
 8006332:	9207      	str	r2, [sp, #28]
 8006334:	e014      	b.n	8006360 <_svfiprintf_r+0x114>
 8006336:	eba0 0308 	sub.w	r3, r0, r8
 800633a:	fa09 f303 	lsl.w	r3, r9, r3
 800633e:	4313      	orrs	r3, r2
 8006340:	46a2      	mov	sl, r4
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	e7d2      	b.n	80062ec <_svfiprintf_r+0xa0>
 8006346:	9b03      	ldr	r3, [sp, #12]
 8006348:	1d19      	adds	r1, r3, #4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	9103      	str	r1, [sp, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	bfbb      	ittet	lt
 8006352:	425b      	neglt	r3, r3
 8006354:	f042 0202 	orrlt.w	r2, r2, #2
 8006358:	9307      	strge	r3, [sp, #28]
 800635a:	9307      	strlt	r3, [sp, #28]
 800635c:	bfb8      	it	lt
 800635e:	9204      	strlt	r2, [sp, #16]
 8006360:	7823      	ldrb	r3, [r4, #0]
 8006362:	2b2e      	cmp	r3, #46	@ 0x2e
 8006364:	d10a      	bne.n	800637c <_svfiprintf_r+0x130>
 8006366:	7863      	ldrb	r3, [r4, #1]
 8006368:	2b2a      	cmp	r3, #42	@ 0x2a
 800636a:	d132      	bne.n	80063d2 <_svfiprintf_r+0x186>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	3402      	adds	r4, #2
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	9203      	str	r2, [sp, #12]
 8006376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800637a:	9305      	str	r3, [sp, #20]
 800637c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006434 <_svfiprintf_r+0x1e8>
 8006380:	2203      	movs	r2, #3
 8006382:	4650      	mov	r0, sl
 8006384:	7821      	ldrb	r1, [r4, #0]
 8006386:	f7fe fc26 	bl	8004bd6 <memchr>
 800638a:	b138      	cbz	r0, 800639c <_svfiprintf_r+0x150>
 800638c:	2240      	movs	r2, #64	@ 0x40
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	eba0 000a 	sub.w	r0, r0, sl
 8006394:	4082      	lsls	r2, r0
 8006396:	4313      	orrs	r3, r2
 8006398:	3401      	adds	r4, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a0:	2206      	movs	r2, #6
 80063a2:	4825      	ldr	r0, [pc, #148]	@ (8006438 <_svfiprintf_r+0x1ec>)
 80063a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063a8:	f7fe fc15 	bl	8004bd6 <memchr>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d036      	beq.n	800641e <_svfiprintf_r+0x1d2>
 80063b0:	4b22      	ldr	r3, [pc, #136]	@ (800643c <_svfiprintf_r+0x1f0>)
 80063b2:	bb1b      	cbnz	r3, 80063fc <_svfiprintf_r+0x1b0>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	3307      	adds	r3, #7
 80063b8:	f023 0307 	bic.w	r3, r3, #7
 80063bc:	3308      	adds	r3, #8
 80063be:	9303      	str	r3, [sp, #12]
 80063c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c2:	4433      	add	r3, r6
 80063c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c6:	e76a      	b.n	800629e <_svfiprintf_r+0x52>
 80063c8:	460c      	mov	r4, r1
 80063ca:	2001      	movs	r0, #1
 80063cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d0:	e7a8      	b.n	8006324 <_svfiprintf_r+0xd8>
 80063d2:	2300      	movs	r3, #0
 80063d4:	f04f 0c0a 	mov.w	ip, #10
 80063d8:	4619      	mov	r1, r3
 80063da:	3401      	adds	r4, #1
 80063dc:	9305      	str	r3, [sp, #20]
 80063de:	4620      	mov	r0, r4
 80063e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e4:	3a30      	subs	r2, #48	@ 0x30
 80063e6:	2a09      	cmp	r2, #9
 80063e8:	d903      	bls.n	80063f2 <_svfiprintf_r+0x1a6>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0c6      	beq.n	800637c <_svfiprintf_r+0x130>
 80063ee:	9105      	str	r1, [sp, #20]
 80063f0:	e7c4      	b.n	800637c <_svfiprintf_r+0x130>
 80063f2:	4604      	mov	r4, r0
 80063f4:	2301      	movs	r3, #1
 80063f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063fa:	e7f0      	b.n	80063de <_svfiprintf_r+0x192>
 80063fc:	ab03      	add	r3, sp, #12
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	462a      	mov	r2, r5
 8006402:	4638      	mov	r0, r7
 8006404:	4b0e      	ldr	r3, [pc, #56]	@ (8006440 <_svfiprintf_r+0x1f4>)
 8006406:	a904      	add	r1, sp, #16
 8006408:	f7fd fe82 	bl	8004110 <_printf_float>
 800640c:	1c42      	adds	r2, r0, #1
 800640e:	4606      	mov	r6, r0
 8006410:	d1d6      	bne.n	80063c0 <_svfiprintf_r+0x174>
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	065b      	lsls	r3, r3, #25
 8006416:	f53f af2d 	bmi.w	8006274 <_svfiprintf_r+0x28>
 800641a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800641c:	e72c      	b.n	8006278 <_svfiprintf_r+0x2c>
 800641e:	ab03      	add	r3, sp, #12
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	462a      	mov	r2, r5
 8006424:	4638      	mov	r0, r7
 8006426:	4b06      	ldr	r3, [pc, #24]	@ (8006440 <_svfiprintf_r+0x1f4>)
 8006428:	a904      	add	r1, sp, #16
 800642a:	f7fe f90f 	bl	800464c <_printf_i>
 800642e:	e7ed      	b.n	800640c <_svfiprintf_r+0x1c0>
 8006430:	08006f18 	.word	0x08006f18
 8006434:	08006f1e 	.word	0x08006f1e
 8006438:	08006f22 	.word	0x08006f22
 800643c:	08004111 	.word	0x08004111
 8006440:	08006195 	.word	0x08006195

08006444 <__sflush_r>:
 8006444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	0716      	lsls	r6, r2, #28
 800644c:	4605      	mov	r5, r0
 800644e:	460c      	mov	r4, r1
 8006450:	d454      	bmi.n	80064fc <__sflush_r+0xb8>
 8006452:	684b      	ldr	r3, [r1, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	dc02      	bgt.n	800645e <__sflush_r+0x1a>
 8006458:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	dd48      	ble.n	80064f0 <__sflush_r+0xac>
 800645e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006460:	2e00      	cmp	r6, #0
 8006462:	d045      	beq.n	80064f0 <__sflush_r+0xac>
 8006464:	2300      	movs	r3, #0
 8006466:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800646a:	682f      	ldr	r7, [r5, #0]
 800646c:	6a21      	ldr	r1, [r4, #32]
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	d030      	beq.n	80064d4 <__sflush_r+0x90>
 8006472:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	0759      	lsls	r1, r3, #29
 8006478:	d505      	bpl.n	8006486 <__sflush_r+0x42>
 800647a:	6863      	ldr	r3, [r4, #4]
 800647c:	1ad2      	subs	r2, r2, r3
 800647e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006480:	b10b      	cbz	r3, 8006486 <__sflush_r+0x42>
 8006482:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	4628      	mov	r0, r5
 800648a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800648c:	6a21      	ldr	r1, [r4, #32]
 800648e:	47b0      	blx	r6
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	d106      	bne.n	80064a4 <__sflush_r+0x60>
 8006496:	6829      	ldr	r1, [r5, #0]
 8006498:	291d      	cmp	r1, #29
 800649a:	d82b      	bhi.n	80064f4 <__sflush_r+0xb0>
 800649c:	4a28      	ldr	r2, [pc, #160]	@ (8006540 <__sflush_r+0xfc>)
 800649e:	410a      	asrs	r2, r1
 80064a0:	07d6      	lsls	r6, r2, #31
 80064a2:	d427      	bmi.n	80064f4 <__sflush_r+0xb0>
 80064a4:	2200      	movs	r2, #0
 80064a6:	6062      	str	r2, [r4, #4]
 80064a8:	6922      	ldr	r2, [r4, #16]
 80064aa:	04d9      	lsls	r1, r3, #19
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	d504      	bpl.n	80064ba <__sflush_r+0x76>
 80064b0:	1c42      	adds	r2, r0, #1
 80064b2:	d101      	bne.n	80064b8 <__sflush_r+0x74>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b903      	cbnz	r3, 80064ba <__sflush_r+0x76>
 80064b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80064ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064bc:	602f      	str	r7, [r5, #0]
 80064be:	b1b9      	cbz	r1, 80064f0 <__sflush_r+0xac>
 80064c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064c4:	4299      	cmp	r1, r3
 80064c6:	d002      	beq.n	80064ce <__sflush_r+0x8a>
 80064c8:	4628      	mov	r0, r5
 80064ca:	f7ff f9e5 	bl	8005898 <_free_r>
 80064ce:	2300      	movs	r3, #0
 80064d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064d2:	e00d      	b.n	80064f0 <__sflush_r+0xac>
 80064d4:	2301      	movs	r3, #1
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b0      	blx	r6
 80064da:	4602      	mov	r2, r0
 80064dc:	1c50      	adds	r0, r2, #1
 80064de:	d1c9      	bne.n	8006474 <__sflush_r+0x30>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c6      	beq.n	8006474 <__sflush_r+0x30>
 80064e6:	2b1d      	cmp	r3, #29
 80064e8:	d001      	beq.n	80064ee <__sflush_r+0xaa>
 80064ea:	2b16      	cmp	r3, #22
 80064ec:	d11d      	bne.n	800652a <__sflush_r+0xe6>
 80064ee:	602f      	str	r7, [r5, #0]
 80064f0:	2000      	movs	r0, #0
 80064f2:	e021      	b.n	8006538 <__sflush_r+0xf4>
 80064f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064f8:	b21b      	sxth	r3, r3
 80064fa:	e01a      	b.n	8006532 <__sflush_r+0xee>
 80064fc:	690f      	ldr	r7, [r1, #16]
 80064fe:	2f00      	cmp	r7, #0
 8006500:	d0f6      	beq.n	80064f0 <__sflush_r+0xac>
 8006502:	0793      	lsls	r3, r2, #30
 8006504:	bf18      	it	ne
 8006506:	2300      	movne	r3, #0
 8006508:	680e      	ldr	r6, [r1, #0]
 800650a:	bf08      	it	eq
 800650c:	694b      	ldreq	r3, [r1, #20]
 800650e:	1bf6      	subs	r6, r6, r7
 8006510:	600f      	str	r7, [r1, #0]
 8006512:	608b      	str	r3, [r1, #8]
 8006514:	2e00      	cmp	r6, #0
 8006516:	ddeb      	ble.n	80064f0 <__sflush_r+0xac>
 8006518:	4633      	mov	r3, r6
 800651a:	463a      	mov	r2, r7
 800651c:	4628      	mov	r0, r5
 800651e:	6a21      	ldr	r1, [r4, #32]
 8006520:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006524:	47e0      	blx	ip
 8006526:	2800      	cmp	r0, #0
 8006528:	dc07      	bgt.n	800653a <__sflush_r+0xf6>
 800652a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006532:	f04f 30ff 	mov.w	r0, #4294967295
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653a:	4407      	add	r7, r0
 800653c:	1a36      	subs	r6, r6, r0
 800653e:	e7e9      	b.n	8006514 <__sflush_r+0xd0>
 8006540:	dfbffffe 	.word	0xdfbffffe

08006544 <_fflush_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	690b      	ldr	r3, [r1, #16]
 8006548:	4605      	mov	r5, r0
 800654a:	460c      	mov	r4, r1
 800654c:	b913      	cbnz	r3, 8006554 <_fflush_r+0x10>
 800654e:	2500      	movs	r5, #0
 8006550:	4628      	mov	r0, r5
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	b118      	cbz	r0, 800655e <_fflush_r+0x1a>
 8006556:	6a03      	ldr	r3, [r0, #32]
 8006558:	b90b      	cbnz	r3, 800655e <_fflush_r+0x1a>
 800655a:	f7fe fa23 	bl	80049a4 <__sinit>
 800655e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f3      	beq.n	800654e <_fflush_r+0xa>
 8006566:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006568:	07d0      	lsls	r0, r2, #31
 800656a:	d404      	bmi.n	8006576 <_fflush_r+0x32>
 800656c:	0599      	lsls	r1, r3, #22
 800656e:	d402      	bmi.n	8006576 <_fflush_r+0x32>
 8006570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006572:	f7fe fb2e 	bl	8004bd2 <__retarget_lock_acquire_recursive>
 8006576:	4628      	mov	r0, r5
 8006578:	4621      	mov	r1, r4
 800657a:	f7ff ff63 	bl	8006444 <__sflush_r>
 800657e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006580:	4605      	mov	r5, r0
 8006582:	07da      	lsls	r2, r3, #31
 8006584:	d4e4      	bmi.n	8006550 <_fflush_r+0xc>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	059b      	lsls	r3, r3, #22
 800658a:	d4e1      	bmi.n	8006550 <_fflush_r+0xc>
 800658c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800658e:	f7fe fb21 	bl	8004bd4 <__retarget_lock_release_recursive>
 8006592:	e7dd      	b.n	8006550 <_fflush_r+0xc>

08006594 <memmove>:
 8006594:	4288      	cmp	r0, r1
 8006596:	b510      	push	{r4, lr}
 8006598:	eb01 0402 	add.w	r4, r1, r2
 800659c:	d902      	bls.n	80065a4 <memmove+0x10>
 800659e:	4284      	cmp	r4, r0
 80065a0:	4623      	mov	r3, r4
 80065a2:	d807      	bhi.n	80065b4 <memmove+0x20>
 80065a4:	1e43      	subs	r3, r0, #1
 80065a6:	42a1      	cmp	r1, r4
 80065a8:	d008      	beq.n	80065bc <memmove+0x28>
 80065aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065b2:	e7f8      	b.n	80065a6 <memmove+0x12>
 80065b4:	4601      	mov	r1, r0
 80065b6:	4402      	add	r2, r0
 80065b8:	428a      	cmp	r2, r1
 80065ba:	d100      	bne.n	80065be <memmove+0x2a>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065c6:	e7f7      	b.n	80065b8 <memmove+0x24>

080065c8 <_sbrk_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	2300      	movs	r3, #0
 80065cc:	4d05      	ldr	r5, [pc, #20]	@ (80065e4 <_sbrk_r+0x1c>)
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	f7fa ffd0 	bl	8001578 <_sbrk>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_sbrk_r+0x1a>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_sbrk_r+0x1a>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000428 	.word	0x20000428

080065e8 <memcpy>:
 80065e8:	440a      	add	r2, r1
 80065ea:	4291      	cmp	r1, r2
 80065ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f0:	d100      	bne.n	80065f4 <memcpy+0xc>
 80065f2:	4770      	bx	lr
 80065f4:	b510      	push	{r4, lr}
 80065f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006600:	d1f9      	bne.n	80065f6 <memcpy+0xe>
 8006602:	bd10      	pop	{r4, pc}

08006604 <__assert_func>:
 8006604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006606:	4614      	mov	r4, r2
 8006608:	461a      	mov	r2, r3
 800660a:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <__assert_func+0x2c>)
 800660c:	4605      	mov	r5, r0
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68d8      	ldr	r0, [r3, #12]
 8006612:	b954      	cbnz	r4, 800662a <__assert_func+0x26>
 8006614:	4b07      	ldr	r3, [pc, #28]	@ (8006634 <__assert_func+0x30>)
 8006616:	461c      	mov	r4, r3
 8006618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800661c:	9100      	str	r1, [sp, #0]
 800661e:	462b      	mov	r3, r5
 8006620:	4905      	ldr	r1, [pc, #20]	@ (8006638 <__assert_func+0x34>)
 8006622:	f000 f86f 	bl	8006704 <fiprintf>
 8006626:	f000 f87f 	bl	8006728 <abort>
 800662a:	4b04      	ldr	r3, [pc, #16]	@ (800663c <__assert_func+0x38>)
 800662c:	e7f4      	b.n	8006618 <__assert_func+0x14>
 800662e:	bf00      	nop
 8006630:	2000005c 	.word	0x2000005c
 8006634:	08006f6e 	.word	0x08006f6e
 8006638:	08006f40 	.word	0x08006f40
 800663c:	08006f33 	.word	0x08006f33

08006640 <_calloc_r>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	fba1 5402 	umull	r5, r4, r1, r2
 8006646:	b93c      	cbnz	r4, 8006658 <_calloc_r+0x18>
 8006648:	4629      	mov	r1, r5
 800664a:	f7ff f997 	bl	800597c <_malloc_r>
 800664e:	4606      	mov	r6, r0
 8006650:	b928      	cbnz	r0, 800665e <_calloc_r+0x1e>
 8006652:	2600      	movs	r6, #0
 8006654:	4630      	mov	r0, r6
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	220c      	movs	r2, #12
 800665a:	6002      	str	r2, [r0, #0]
 800665c:	e7f9      	b.n	8006652 <_calloc_r+0x12>
 800665e:	462a      	mov	r2, r5
 8006660:	4621      	mov	r1, r4
 8006662:	f7fe fa38 	bl	8004ad6 <memset>
 8006666:	e7f5      	b.n	8006654 <_calloc_r+0x14>

08006668 <__ascii_mbtowc>:
 8006668:	b082      	sub	sp, #8
 800666a:	b901      	cbnz	r1, 800666e <__ascii_mbtowc+0x6>
 800666c:	a901      	add	r1, sp, #4
 800666e:	b142      	cbz	r2, 8006682 <__ascii_mbtowc+0x1a>
 8006670:	b14b      	cbz	r3, 8006686 <__ascii_mbtowc+0x1e>
 8006672:	7813      	ldrb	r3, [r2, #0]
 8006674:	600b      	str	r3, [r1, #0]
 8006676:	7812      	ldrb	r2, [r2, #0]
 8006678:	1e10      	subs	r0, r2, #0
 800667a:	bf18      	it	ne
 800667c:	2001      	movne	r0, #1
 800667e:	b002      	add	sp, #8
 8006680:	4770      	bx	lr
 8006682:	4610      	mov	r0, r2
 8006684:	e7fb      	b.n	800667e <__ascii_mbtowc+0x16>
 8006686:	f06f 0001 	mvn.w	r0, #1
 800668a:	e7f8      	b.n	800667e <__ascii_mbtowc+0x16>

0800668c <_realloc_r>:
 800668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	4680      	mov	r8, r0
 8006692:	4615      	mov	r5, r2
 8006694:	460c      	mov	r4, r1
 8006696:	b921      	cbnz	r1, 80066a2 <_realloc_r+0x16>
 8006698:	4611      	mov	r1, r2
 800669a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	f7ff b96d 	b.w	800597c <_malloc_r>
 80066a2:	b92a      	cbnz	r2, 80066b0 <_realloc_r+0x24>
 80066a4:	f7ff f8f8 	bl	8005898 <_free_r>
 80066a8:	2400      	movs	r4, #0
 80066aa:	4620      	mov	r0, r4
 80066ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b0:	f000 f841 	bl	8006736 <_malloc_usable_size_r>
 80066b4:	4285      	cmp	r5, r0
 80066b6:	4606      	mov	r6, r0
 80066b8:	d802      	bhi.n	80066c0 <_realloc_r+0x34>
 80066ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066be:	d8f4      	bhi.n	80066aa <_realloc_r+0x1e>
 80066c0:	4629      	mov	r1, r5
 80066c2:	4640      	mov	r0, r8
 80066c4:	f7ff f95a 	bl	800597c <_malloc_r>
 80066c8:	4607      	mov	r7, r0
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d0ec      	beq.n	80066a8 <_realloc_r+0x1c>
 80066ce:	42b5      	cmp	r5, r6
 80066d0:	462a      	mov	r2, r5
 80066d2:	4621      	mov	r1, r4
 80066d4:	bf28      	it	cs
 80066d6:	4632      	movcs	r2, r6
 80066d8:	f7ff ff86 	bl	80065e8 <memcpy>
 80066dc:	4621      	mov	r1, r4
 80066de:	4640      	mov	r0, r8
 80066e0:	f7ff f8da 	bl	8005898 <_free_r>
 80066e4:	463c      	mov	r4, r7
 80066e6:	e7e0      	b.n	80066aa <_realloc_r+0x1e>

080066e8 <__ascii_wctomb>:
 80066e8:	4603      	mov	r3, r0
 80066ea:	4608      	mov	r0, r1
 80066ec:	b141      	cbz	r1, 8006700 <__ascii_wctomb+0x18>
 80066ee:	2aff      	cmp	r2, #255	@ 0xff
 80066f0:	d904      	bls.n	80066fc <__ascii_wctomb+0x14>
 80066f2:	228a      	movs	r2, #138	@ 0x8a
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	4770      	bx	lr
 80066fc:	2001      	movs	r0, #1
 80066fe:	700a      	strb	r2, [r1, #0]
 8006700:	4770      	bx	lr
	...

08006704 <fiprintf>:
 8006704:	b40e      	push	{r1, r2, r3}
 8006706:	b503      	push	{r0, r1, lr}
 8006708:	4601      	mov	r1, r0
 800670a:	ab03      	add	r3, sp, #12
 800670c:	4805      	ldr	r0, [pc, #20]	@ (8006724 <fiprintf+0x20>)
 800670e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006712:	6800      	ldr	r0, [r0, #0]
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	f000 f83d 	bl	8006794 <_vfiprintf_r>
 800671a:	b002      	add	sp, #8
 800671c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006720:	b003      	add	sp, #12
 8006722:	4770      	bx	lr
 8006724:	2000005c 	.word	0x2000005c

08006728 <abort>:
 8006728:	2006      	movs	r0, #6
 800672a:	b508      	push	{r3, lr}
 800672c:	f000 fa06 	bl	8006b3c <raise>
 8006730:	2001      	movs	r0, #1
 8006732:	f7fa feac 	bl	800148e <_exit>

08006736 <_malloc_usable_size_r>:
 8006736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673a:	1f18      	subs	r0, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfbc      	itt	lt
 8006740:	580b      	ldrlt	r3, [r1, r0]
 8006742:	18c0      	addlt	r0, r0, r3
 8006744:	4770      	bx	lr

08006746 <__sfputc_r>:
 8006746:	6893      	ldr	r3, [r2, #8]
 8006748:	b410      	push	{r4}
 800674a:	3b01      	subs	r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	6093      	str	r3, [r2, #8]
 8006750:	da07      	bge.n	8006762 <__sfputc_r+0x1c>
 8006752:	6994      	ldr	r4, [r2, #24]
 8006754:	42a3      	cmp	r3, r4
 8006756:	db01      	blt.n	800675c <__sfputc_r+0x16>
 8006758:	290a      	cmp	r1, #10
 800675a:	d102      	bne.n	8006762 <__sfputc_r+0x1c>
 800675c:	bc10      	pop	{r4}
 800675e:	f000 b931 	b.w	80069c4 <__swbuf_r>
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	1c58      	adds	r0, r3, #1
 8006766:	6010      	str	r0, [r2, #0]
 8006768:	7019      	strb	r1, [r3, #0]
 800676a:	4608      	mov	r0, r1
 800676c:	bc10      	pop	{r4}
 800676e:	4770      	bx	lr

08006770 <__sfputs_r>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	4614      	mov	r4, r2
 8006778:	18d5      	adds	r5, r2, r3
 800677a:	42ac      	cmp	r4, r5
 800677c:	d101      	bne.n	8006782 <__sfputs_r+0x12>
 800677e:	2000      	movs	r0, #0
 8006780:	e007      	b.n	8006792 <__sfputs_r+0x22>
 8006782:	463a      	mov	r2, r7
 8006784:	4630      	mov	r0, r6
 8006786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800678a:	f7ff ffdc 	bl	8006746 <__sfputc_r>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d1f3      	bne.n	800677a <__sfputs_r+0xa>
 8006792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006794 <_vfiprintf_r>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	460d      	mov	r5, r1
 800679a:	4614      	mov	r4, r2
 800679c:	4698      	mov	r8, r3
 800679e:	4606      	mov	r6, r0
 80067a0:	b09d      	sub	sp, #116	@ 0x74
 80067a2:	b118      	cbz	r0, 80067ac <_vfiprintf_r+0x18>
 80067a4:	6a03      	ldr	r3, [r0, #32]
 80067a6:	b90b      	cbnz	r3, 80067ac <_vfiprintf_r+0x18>
 80067a8:	f7fe f8fc 	bl	80049a4 <__sinit>
 80067ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ae:	07d9      	lsls	r1, r3, #31
 80067b0:	d405      	bmi.n	80067be <_vfiprintf_r+0x2a>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	059a      	lsls	r2, r3, #22
 80067b6:	d402      	bmi.n	80067be <_vfiprintf_r+0x2a>
 80067b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ba:	f7fe fa0a 	bl	8004bd2 <__retarget_lock_acquire_recursive>
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	d501      	bpl.n	80067c8 <_vfiprintf_r+0x34>
 80067c4:	692b      	ldr	r3, [r5, #16]
 80067c6:	b99b      	cbnz	r3, 80067f0 <_vfiprintf_r+0x5c>
 80067c8:	4629      	mov	r1, r5
 80067ca:	4630      	mov	r0, r6
 80067cc:	f000 f938 	bl	8006a40 <__swsetup_r>
 80067d0:	b170      	cbz	r0, 80067f0 <_vfiprintf_r+0x5c>
 80067d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067d4:	07dc      	lsls	r4, r3, #31
 80067d6:	d504      	bpl.n	80067e2 <_vfiprintf_r+0x4e>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	b01d      	add	sp, #116	@ 0x74
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	89ab      	ldrh	r3, [r5, #12]
 80067e4:	0598      	lsls	r0, r3, #22
 80067e6:	d4f7      	bmi.n	80067d8 <_vfiprintf_r+0x44>
 80067e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ea:	f7fe f9f3 	bl	8004bd4 <__retarget_lock_release_recursive>
 80067ee:	e7f3      	b.n	80067d8 <_vfiprintf_r+0x44>
 80067f0:	2300      	movs	r3, #0
 80067f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f4:	2320      	movs	r3, #32
 80067f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067fa:	2330      	movs	r3, #48	@ 0x30
 80067fc:	f04f 0901 	mov.w	r9, #1
 8006800:	f8cd 800c 	str.w	r8, [sp, #12]
 8006804:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80069b0 <_vfiprintf_r+0x21c>
 8006808:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800680c:	4623      	mov	r3, r4
 800680e:	469a      	mov	sl, r3
 8006810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006814:	b10a      	cbz	r2, 800681a <_vfiprintf_r+0x86>
 8006816:	2a25      	cmp	r2, #37	@ 0x25
 8006818:	d1f9      	bne.n	800680e <_vfiprintf_r+0x7a>
 800681a:	ebba 0b04 	subs.w	fp, sl, r4
 800681e:	d00b      	beq.n	8006838 <_vfiprintf_r+0xa4>
 8006820:	465b      	mov	r3, fp
 8006822:	4622      	mov	r2, r4
 8006824:	4629      	mov	r1, r5
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff ffa2 	bl	8006770 <__sfputs_r>
 800682c:	3001      	adds	r0, #1
 800682e:	f000 80a7 	beq.w	8006980 <_vfiprintf_r+0x1ec>
 8006832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006834:	445a      	add	r2, fp
 8006836:	9209      	str	r2, [sp, #36]	@ 0x24
 8006838:	f89a 3000 	ldrb.w	r3, [sl]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 809f 	beq.w	8006980 <_vfiprintf_r+0x1ec>
 8006842:	2300      	movs	r3, #0
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800684c:	f10a 0a01 	add.w	sl, sl, #1
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006858:	931a      	str	r3, [sp, #104]	@ 0x68
 800685a:	4654      	mov	r4, sl
 800685c:	2205      	movs	r2, #5
 800685e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006862:	4853      	ldr	r0, [pc, #332]	@ (80069b0 <_vfiprintf_r+0x21c>)
 8006864:	f7fe f9b7 	bl	8004bd6 <memchr>
 8006868:	9a04      	ldr	r2, [sp, #16]
 800686a:	b9d8      	cbnz	r0, 80068a4 <_vfiprintf_r+0x110>
 800686c:	06d1      	lsls	r1, r2, #27
 800686e:	bf44      	itt	mi
 8006870:	2320      	movmi	r3, #32
 8006872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006876:	0713      	lsls	r3, r2, #28
 8006878:	bf44      	itt	mi
 800687a:	232b      	movmi	r3, #43	@ 0x2b
 800687c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006880:	f89a 3000 	ldrb.w	r3, [sl]
 8006884:	2b2a      	cmp	r3, #42	@ 0x2a
 8006886:	d015      	beq.n	80068b4 <_vfiprintf_r+0x120>
 8006888:	4654      	mov	r4, sl
 800688a:	2000      	movs	r0, #0
 800688c:	f04f 0c0a 	mov.w	ip, #10
 8006890:	9a07      	ldr	r2, [sp, #28]
 8006892:	4621      	mov	r1, r4
 8006894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006898:	3b30      	subs	r3, #48	@ 0x30
 800689a:	2b09      	cmp	r3, #9
 800689c:	d94b      	bls.n	8006936 <_vfiprintf_r+0x1a2>
 800689e:	b1b0      	cbz	r0, 80068ce <_vfiprintf_r+0x13a>
 80068a0:	9207      	str	r2, [sp, #28]
 80068a2:	e014      	b.n	80068ce <_vfiprintf_r+0x13a>
 80068a4:	eba0 0308 	sub.w	r3, r0, r8
 80068a8:	fa09 f303 	lsl.w	r3, r9, r3
 80068ac:	4313      	orrs	r3, r2
 80068ae:	46a2      	mov	sl, r4
 80068b0:	9304      	str	r3, [sp, #16]
 80068b2:	e7d2      	b.n	800685a <_vfiprintf_r+0xc6>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	1d19      	adds	r1, r3, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	9103      	str	r1, [sp, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bfbb      	ittet	lt
 80068c0:	425b      	neglt	r3, r3
 80068c2:	f042 0202 	orrlt.w	r2, r2, #2
 80068c6:	9307      	strge	r3, [sp, #28]
 80068c8:	9307      	strlt	r3, [sp, #28]
 80068ca:	bfb8      	it	lt
 80068cc:	9204      	strlt	r2, [sp, #16]
 80068ce:	7823      	ldrb	r3, [r4, #0]
 80068d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80068d2:	d10a      	bne.n	80068ea <_vfiprintf_r+0x156>
 80068d4:	7863      	ldrb	r3, [r4, #1]
 80068d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d8:	d132      	bne.n	8006940 <_vfiprintf_r+0x1ac>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	3402      	adds	r4, #2
 80068de:	1d1a      	adds	r2, r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	9203      	str	r2, [sp, #12]
 80068e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068e8:	9305      	str	r3, [sp, #20]
 80068ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80069b4 <_vfiprintf_r+0x220>
 80068ee:	2203      	movs	r2, #3
 80068f0:	4650      	mov	r0, sl
 80068f2:	7821      	ldrb	r1, [r4, #0]
 80068f4:	f7fe f96f 	bl	8004bd6 <memchr>
 80068f8:	b138      	cbz	r0, 800690a <_vfiprintf_r+0x176>
 80068fa:	2240      	movs	r2, #64	@ 0x40
 80068fc:	9b04      	ldr	r3, [sp, #16]
 80068fe:	eba0 000a 	sub.w	r0, r0, sl
 8006902:	4082      	lsls	r2, r0
 8006904:	4313      	orrs	r3, r2
 8006906:	3401      	adds	r4, #1
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690e:	2206      	movs	r2, #6
 8006910:	4829      	ldr	r0, [pc, #164]	@ (80069b8 <_vfiprintf_r+0x224>)
 8006912:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006916:	f7fe f95e 	bl	8004bd6 <memchr>
 800691a:	2800      	cmp	r0, #0
 800691c:	d03f      	beq.n	800699e <_vfiprintf_r+0x20a>
 800691e:	4b27      	ldr	r3, [pc, #156]	@ (80069bc <_vfiprintf_r+0x228>)
 8006920:	bb1b      	cbnz	r3, 800696a <_vfiprintf_r+0x1d6>
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	3307      	adds	r3, #7
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	3308      	adds	r3, #8
 800692c:	9303      	str	r3, [sp, #12]
 800692e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006930:	443b      	add	r3, r7
 8006932:	9309      	str	r3, [sp, #36]	@ 0x24
 8006934:	e76a      	b.n	800680c <_vfiprintf_r+0x78>
 8006936:	460c      	mov	r4, r1
 8006938:	2001      	movs	r0, #1
 800693a:	fb0c 3202 	mla	r2, ip, r2, r3
 800693e:	e7a8      	b.n	8006892 <_vfiprintf_r+0xfe>
 8006940:	2300      	movs	r3, #0
 8006942:	f04f 0c0a 	mov.w	ip, #10
 8006946:	4619      	mov	r1, r3
 8006948:	3401      	adds	r4, #1
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	4620      	mov	r0, r4
 800694e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006952:	3a30      	subs	r2, #48	@ 0x30
 8006954:	2a09      	cmp	r2, #9
 8006956:	d903      	bls.n	8006960 <_vfiprintf_r+0x1cc>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0c6      	beq.n	80068ea <_vfiprintf_r+0x156>
 800695c:	9105      	str	r1, [sp, #20]
 800695e:	e7c4      	b.n	80068ea <_vfiprintf_r+0x156>
 8006960:	4604      	mov	r4, r0
 8006962:	2301      	movs	r3, #1
 8006964:	fb0c 2101 	mla	r1, ip, r1, r2
 8006968:	e7f0      	b.n	800694c <_vfiprintf_r+0x1b8>
 800696a:	ab03      	add	r3, sp, #12
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	462a      	mov	r2, r5
 8006970:	4630      	mov	r0, r6
 8006972:	4b13      	ldr	r3, [pc, #76]	@ (80069c0 <_vfiprintf_r+0x22c>)
 8006974:	a904      	add	r1, sp, #16
 8006976:	f7fd fbcb 	bl	8004110 <_printf_float>
 800697a:	4607      	mov	r7, r0
 800697c:	1c78      	adds	r0, r7, #1
 800697e:	d1d6      	bne.n	800692e <_vfiprintf_r+0x19a>
 8006980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006982:	07d9      	lsls	r1, r3, #31
 8006984:	d405      	bmi.n	8006992 <_vfiprintf_r+0x1fe>
 8006986:	89ab      	ldrh	r3, [r5, #12]
 8006988:	059a      	lsls	r2, r3, #22
 800698a:	d402      	bmi.n	8006992 <_vfiprintf_r+0x1fe>
 800698c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800698e:	f7fe f921 	bl	8004bd4 <__retarget_lock_release_recursive>
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	065b      	lsls	r3, r3, #25
 8006996:	f53f af1f 	bmi.w	80067d8 <_vfiprintf_r+0x44>
 800699a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800699c:	e71e      	b.n	80067dc <_vfiprintf_r+0x48>
 800699e:	ab03      	add	r3, sp, #12
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	462a      	mov	r2, r5
 80069a4:	4630      	mov	r0, r6
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <_vfiprintf_r+0x22c>)
 80069a8:	a904      	add	r1, sp, #16
 80069aa:	f7fd fe4f 	bl	800464c <_printf_i>
 80069ae:	e7e4      	b.n	800697a <_vfiprintf_r+0x1e6>
 80069b0:	08006f18 	.word	0x08006f18
 80069b4:	08006f1e 	.word	0x08006f1e
 80069b8:	08006f22 	.word	0x08006f22
 80069bc:	08004111 	.word	0x08004111
 80069c0:	08006771 	.word	0x08006771

080069c4 <__swbuf_r>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	460e      	mov	r6, r1
 80069c8:	4614      	mov	r4, r2
 80069ca:	4605      	mov	r5, r0
 80069cc:	b118      	cbz	r0, 80069d6 <__swbuf_r+0x12>
 80069ce:	6a03      	ldr	r3, [r0, #32]
 80069d0:	b90b      	cbnz	r3, 80069d6 <__swbuf_r+0x12>
 80069d2:	f7fd ffe7 	bl	80049a4 <__sinit>
 80069d6:	69a3      	ldr	r3, [r4, #24]
 80069d8:	60a3      	str	r3, [r4, #8]
 80069da:	89a3      	ldrh	r3, [r4, #12]
 80069dc:	071a      	lsls	r2, r3, #28
 80069de:	d501      	bpl.n	80069e4 <__swbuf_r+0x20>
 80069e0:	6923      	ldr	r3, [r4, #16]
 80069e2:	b943      	cbnz	r3, 80069f6 <__swbuf_r+0x32>
 80069e4:	4621      	mov	r1, r4
 80069e6:	4628      	mov	r0, r5
 80069e8:	f000 f82a 	bl	8006a40 <__swsetup_r>
 80069ec:	b118      	cbz	r0, 80069f6 <__swbuf_r+0x32>
 80069ee:	f04f 37ff 	mov.w	r7, #4294967295
 80069f2:	4638      	mov	r0, r7
 80069f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	6922      	ldr	r2, [r4, #16]
 80069fa:	b2f6      	uxtb	r6, r6
 80069fc:	1a98      	subs	r0, r3, r2
 80069fe:	6963      	ldr	r3, [r4, #20]
 8006a00:	4637      	mov	r7, r6
 8006a02:	4283      	cmp	r3, r0
 8006a04:	dc05      	bgt.n	8006a12 <__swbuf_r+0x4e>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fd9b 	bl	8006544 <_fflush_r>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d1ed      	bne.n	80069ee <__swbuf_r+0x2a>
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	6022      	str	r2, [r4, #0]
 8006a1e:	701e      	strb	r6, [r3, #0]
 8006a20:	6962      	ldr	r2, [r4, #20]
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d004      	beq.n	8006a32 <__swbuf_r+0x6e>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d5e1      	bpl.n	80069f2 <__swbuf_r+0x2e>
 8006a2e:	2e0a      	cmp	r6, #10
 8006a30:	d1df      	bne.n	80069f2 <__swbuf_r+0x2e>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff fd85 	bl	8006544 <_fflush_r>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d0d9      	beq.n	80069f2 <__swbuf_r+0x2e>
 8006a3e:	e7d6      	b.n	80069ee <__swbuf_r+0x2a>

08006a40 <__swsetup_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4b29      	ldr	r3, [pc, #164]	@ (8006ae8 <__swsetup_r+0xa8>)
 8006a44:	4605      	mov	r5, r0
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	460c      	mov	r4, r1
 8006a4a:	b118      	cbz	r0, 8006a54 <__swsetup_r+0x14>
 8006a4c:	6a03      	ldr	r3, [r0, #32]
 8006a4e:	b90b      	cbnz	r3, 8006a54 <__swsetup_r+0x14>
 8006a50:	f7fd ffa8 	bl	80049a4 <__sinit>
 8006a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a58:	0719      	lsls	r1, r3, #28
 8006a5a:	d422      	bmi.n	8006aa2 <__swsetup_r+0x62>
 8006a5c:	06da      	lsls	r2, r3, #27
 8006a5e:	d407      	bmi.n	8006a70 <__swsetup_r+0x30>
 8006a60:	2209      	movs	r2, #9
 8006a62:	602a      	str	r2, [r5, #0]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	e033      	b.n	8006ad8 <__swsetup_r+0x98>
 8006a70:	0758      	lsls	r0, r3, #29
 8006a72:	d512      	bpl.n	8006a9a <__swsetup_r+0x5a>
 8006a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a76:	b141      	cbz	r1, 8006a8a <__swsetup_r+0x4a>
 8006a78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	d002      	beq.n	8006a86 <__swsetup_r+0x46>
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7fe ff09 	bl	8005898 <_free_r>
 8006a86:	2300      	movs	r3, #0
 8006a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	2300      	movs	r3, #0
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f043 0308 	orr.w	r3, r3, #8
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	b94b      	cbnz	r3, 8006aba <__swsetup_r+0x7a>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d003      	beq.n	8006aba <__swsetup_r+0x7a>
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 f882 	bl	8006bbe <__smakebuf_r>
 8006aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abe:	f013 0201 	ands.w	r2, r3, #1
 8006ac2:	d00a      	beq.n	8006ada <__swsetup_r+0x9a>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	60a2      	str	r2, [r4, #8]
 8006ac8:	6962      	ldr	r2, [r4, #20]
 8006aca:	4252      	negs	r2, r2
 8006acc:	61a2      	str	r2, [r4, #24]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	b942      	cbnz	r2, 8006ae4 <__swsetup_r+0xa4>
 8006ad2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ad6:	d1c5      	bne.n	8006a64 <__swsetup_r+0x24>
 8006ad8:	bd38      	pop	{r3, r4, r5, pc}
 8006ada:	0799      	lsls	r1, r3, #30
 8006adc:	bf58      	it	pl
 8006ade:	6962      	ldrpl	r2, [r4, #20]
 8006ae0:	60a2      	str	r2, [r4, #8]
 8006ae2:	e7f4      	b.n	8006ace <__swsetup_r+0x8e>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e7f7      	b.n	8006ad8 <__swsetup_r+0x98>
 8006ae8:	2000005c 	.word	0x2000005c

08006aec <_raise_r>:
 8006aec:	291f      	cmp	r1, #31
 8006aee:	b538      	push	{r3, r4, r5, lr}
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	d904      	bls.n	8006b00 <_raise_r+0x14>
 8006af6:	2316      	movs	r3, #22
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	f04f 30ff 	mov.w	r0, #4294967295
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b02:	b112      	cbz	r2, 8006b0a <_raise_r+0x1e>
 8006b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b08:	b94b      	cbnz	r3, 8006b1e <_raise_r+0x32>
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 f830 	bl	8006b70 <_getpid_r>
 8006b10:	4622      	mov	r2, r4
 8006b12:	4601      	mov	r1, r0
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b1a:	f000 b817 	b.w	8006b4c <_kill_r>
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d00a      	beq.n	8006b38 <_raise_r+0x4c>
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	d103      	bne.n	8006b2e <_raise_r+0x42>
 8006b26:	2316      	movs	r3, #22
 8006b28:	6003      	str	r3, [r0, #0]
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	e7e7      	b.n	8006afe <_raise_r+0x12>
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4620      	mov	r0, r4
 8006b32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b36:	4798      	blx	r3
 8006b38:	2000      	movs	r0, #0
 8006b3a:	e7e0      	b.n	8006afe <_raise_r+0x12>

08006b3c <raise>:
 8006b3c:	4b02      	ldr	r3, [pc, #8]	@ (8006b48 <raise+0xc>)
 8006b3e:	4601      	mov	r1, r0
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	f7ff bfd3 	b.w	8006aec <_raise_r>
 8006b46:	bf00      	nop
 8006b48:	2000005c 	.word	0x2000005c

08006b4c <_kill_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4d06      	ldr	r5, [pc, #24]	@ (8006b6c <_kill_r+0x20>)
 8006b52:	4604      	mov	r4, r0
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	602b      	str	r3, [r5, #0]
 8006b5a:	f7fa fc88 	bl	800146e <_kill>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d102      	bne.n	8006b68 <_kill_r+0x1c>
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	b103      	cbz	r3, 8006b68 <_kill_r+0x1c>
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	bd38      	pop	{r3, r4, r5, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000428 	.word	0x20000428

08006b70 <_getpid_r>:
 8006b70:	f7fa bc76 	b.w	8001460 <_getpid>

08006b74 <__swhatbuf_r>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	460c      	mov	r4, r1
 8006b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	2900      	cmp	r1, #0
 8006b80:	461e      	mov	r6, r3
 8006b82:	b096      	sub	sp, #88	@ 0x58
 8006b84:	da0c      	bge.n	8006ba0 <__swhatbuf_r+0x2c>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b8e:	bf14      	ite	ne
 8006b90:	2340      	movne	r3, #64	@ 0x40
 8006b92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b96:	2000      	movs	r0, #0
 8006b98:	6031      	str	r1, [r6, #0]
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	b016      	add	sp, #88	@ 0x58
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	466a      	mov	r2, sp
 8006ba2:	f000 f849 	bl	8006c38 <_fstat_r>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	dbed      	blt.n	8006b86 <__swhatbuf_r+0x12>
 8006baa:	9901      	ldr	r1, [sp, #4]
 8006bac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bb4:	4259      	negs	r1, r3
 8006bb6:	4159      	adcs	r1, r3
 8006bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bbc:	e7eb      	b.n	8006b96 <__swhatbuf_r+0x22>

08006bbe <__smakebuf_r>:
 8006bbe:	898b      	ldrh	r3, [r1, #12]
 8006bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc2:	079d      	lsls	r5, r3, #30
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	d507      	bpl.n	8006bda <__smakebuf_r+0x1c>
 8006bca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6163      	str	r3, [r4, #20]
 8006bd6:	b003      	add	sp, #12
 8006bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bda:	466a      	mov	r2, sp
 8006bdc:	ab01      	add	r3, sp, #4
 8006bde:	f7ff ffc9 	bl	8006b74 <__swhatbuf_r>
 8006be2:	9f00      	ldr	r7, [sp, #0]
 8006be4:	4605      	mov	r5, r0
 8006be6:	4639      	mov	r1, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7fe fec7 	bl	800597c <_malloc_r>
 8006bee:	b948      	cbnz	r0, 8006c04 <__smakebuf_r+0x46>
 8006bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf4:	059a      	lsls	r2, r3, #22
 8006bf6:	d4ee      	bmi.n	8006bd6 <__smakebuf_r+0x18>
 8006bf8:	f023 0303 	bic.w	r3, r3, #3
 8006bfc:	f043 0302 	orr.w	r3, r3, #2
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	e7e2      	b.n	8006bca <__smakebuf_r+0xc>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	b15b      	cbz	r3, 8006c2e <__smakebuf_r+0x70>
 8006c16:	4630      	mov	r0, r6
 8006c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c1c:	f000 f81e 	bl	8006c5c <_isatty_r>
 8006c20:	b128      	cbz	r0, 8006c2e <__smakebuf_r+0x70>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f023 0303 	bic.w	r3, r3, #3
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	431d      	orrs	r5, r3
 8006c32:	81a5      	strh	r5, [r4, #12]
 8006c34:	e7cf      	b.n	8006bd6 <__smakebuf_r+0x18>
	...

08006c38 <_fstat_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4d06      	ldr	r5, [pc, #24]	@ (8006c58 <_fstat_r+0x20>)
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	4611      	mov	r1, r2
 8006c44:	602b      	str	r3, [r5, #0]
 8006c46:	f7fa fc71 	bl	800152c <_fstat>
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	d102      	bne.n	8006c54 <_fstat_r+0x1c>
 8006c4e:	682b      	ldr	r3, [r5, #0]
 8006c50:	b103      	cbz	r3, 8006c54 <_fstat_r+0x1c>
 8006c52:	6023      	str	r3, [r4, #0]
 8006c54:	bd38      	pop	{r3, r4, r5, pc}
 8006c56:	bf00      	nop
 8006c58:	20000428 	.word	0x20000428

08006c5c <_isatty_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4d05      	ldr	r5, [pc, #20]	@ (8006c78 <_isatty_r+0x1c>)
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	f7fa fc6f 	bl	800154a <_isatty>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_isatty_r+0x1a>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_isatty_r+0x1a>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	20000428 	.word	0x20000428

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
