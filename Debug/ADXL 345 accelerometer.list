
ADXL 345 accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080033b0  080033b0  000043b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003428  08003428  00005094  2**0
                  CONTENTS
  4 .ARM          00000000  08003428  08003428  00005094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003428  08003428  00005094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003428  08003428  00004428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800342c  0800342c  0000442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08003430  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000094  080034c4  00005094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080034c4  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007214  00000000  00000000  000050bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b7  00000000  00000000  0000c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005da  00000000  00000000  0000e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173e3  00000000  00000000  0000e92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c352  00000000  00000000  00025d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826a3  00000000  00000000  0003205f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002330  00000000  00000000  000b4748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b6a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08003398 	.word	0x08003398

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08003398 	.word	0x08003398

0800014c <Read_Hw_Data>:

#include "Hardware_Interface.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t Read_Hw_Data(uint8_t sla, uint8_t *Data, uint8_t Length) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ok = HAL_I2C_Master_Receive(&hi2c1, sla << 1, Data,
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	b29b      	uxth	r3, r3
 8000160:	005b      	lsls	r3, r3, #1
 8000162:	b299      	uxth	r1, r3
 8000164:	79bb      	ldrb	r3, [r7, #6]
 8000166:	b29b      	uxth	r3, r3
 8000168:	2264      	movs	r2, #100	@ 0x64
 800016a:	9200      	str	r2, [sp, #0]
 800016c:	683a      	ldr	r2, [r7, #0]
 800016e:	4807      	ldr	r0, [pc, #28]	@ (800018c <Read_Hw_Data+0x40>)
 8000170:	f001 fa74 	bl	800165c <HAL_I2C_Master_Receive>
 8000174:	4603      	mov	r3, r0
 8000176:	73fb      	strb	r3, [r7, #15]
			Length, 100);
	return (ok == HAL_OK) ? 1 : 0;
 8000178:	7bfb      	ldrb	r3, [r7, #15]
 800017a:	2b00      	cmp	r3, #0
 800017c:	bf0c      	ite	eq
 800017e:	2301      	moveq	r3, #1
 8000180:	2300      	movne	r3, #0
 8000182:	b2db      	uxtb	r3, r3
}
 8000184:	4618      	mov	r0, r3
 8000186:	3710      	adds	r7, #16
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200000b0 	.word	0x200000b0

08000190 <Write_HW_config>:
uint8_t Write_HW_config(uint8_t sla, uint8_t *Data, uint8_t Length) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	6039      	str	r1, [r7, #0]
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	4613      	mov	r3, r2
 800019e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ok = HAL_I2C_Master_Transmit(&hi2c1, sla << 1, Data,
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	005b      	lsls	r3, r3, #1
 80001a6:	b299      	uxth	r1, r3
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	b29b      	uxth	r3, r3
 80001ac:	2264      	movs	r2, #100	@ 0x64
 80001ae:	9200      	str	r2, [sp, #0]
 80001b0:	683a      	ldr	r2, [r7, #0]
 80001b2:	4807      	ldr	r0, [pc, #28]	@ (80001d0 <Write_HW_config+0x40>)
 80001b4:	f001 f954 	bl	8001460 <HAL_I2C_Master_Transmit>
 80001b8:	4603      	mov	r3, r0
 80001ba:	73fb      	strb	r3, [r7, #15]
			Length, 100);
	return (ok == HAL_OK) ? 1 : 0;
 80001bc:	7bfb      	ldrb	r3, [r7, #15]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	bf0c      	ite	eq
 80001c2:	2301      	moveq	r3, #1
 80001c4:	2300      	movne	r3, #0
 80001c6:	b2db      	uxtb	r3, r3
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3710      	adds	r7, #16
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	200000b0 	.word	0x200000b0

080001d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001da:	f000 fcf7 	bl	8000bcc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001de:	f000 f85b 	bl	8000298 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e2:	f000 f8cd 	bl	8000380 <MX_GPIO_Init>
	MX_I2C1_Init();
 80001e6:	f000 f89d 	bl	8000324 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	ADXL345_Init(&config);
 80001ea:	4822      	ldr	r0, [pc, #136]	@ (8000274 <main+0xa0>)
 80001ec:	f000 fa2a 	bl	8000644 <ADXL345_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <main+0xa4>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a20      	ldr	r2, [pc, #128]	@ (8000278 <main+0xa4>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <main+0xa4>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	603b      	str	r3, [r7, #0]
 8000206:	683b      	ldr	r3, [r7, #0]
	Alcd_Init(&lcd, 2, 16);
 8000208:	2210      	movs	r2, #16
 800020a:	2102      	movs	r1, #2
 800020c:	481b      	ldr	r0, [pc, #108]	@ (800027c <main+0xa8>)
 800020e:	f000 fbb5 	bl	800097c <Alcd_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (ADXL345_ReadData(&config, &x, &y, &z) == ADXL345_success) {
 8000212:	4b1b      	ldr	r3, [pc, #108]	@ (8000280 <main+0xac>)
 8000214:	4a1b      	ldr	r2, [pc, #108]	@ (8000284 <main+0xb0>)
 8000216:	491c      	ldr	r1, [pc, #112]	@ (8000288 <main+0xb4>)
 8000218:	4816      	ldr	r0, [pc, #88]	@ (8000274 <main+0xa0>)
 800021a:	f000 fa89 	bl	8000730 <ADXL345_ReadData>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d11b      	bne.n	800025c <main+0x88>
			// Format the acceleration data into a string
			uint8_t length = sprintf((char*) str, "X:%d Y:%d Z:%d", x, y, z);
 8000224:	4b18      	ldr	r3, [pc, #96]	@ (8000288 <main+0xb4>)
 8000226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800022a:	461a      	mov	r2, r3
 800022c:	4b15      	ldr	r3, [pc, #84]	@ (8000284 <main+0xb0>)
 800022e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000232:	4619      	mov	r1, r3
 8000234:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <main+0xac>)
 8000236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	460b      	mov	r3, r1
 800023e:	4913      	ldr	r1, [pc, #76]	@ (800028c <main+0xb8>)
 8000240:	4813      	ldr	r0, [pc, #76]	@ (8000290 <main+0xbc>)
 8000242:	f002 fbf9 	bl	8002a38 <siprintf>
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]

			// Display the formatted string on the LCD
			Alcd_PutAt_n(&lcd, 0, 0, (char*) str, length);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <main+0xbc>)
 8000250:	2200      	movs	r2, #0
 8000252:	2100      	movs	r1, #0
 8000254:	4809      	ldr	r0, [pc, #36]	@ (800027c <main+0xa8>)
 8000256:	f000 fc4c 	bl	8000af2 <Alcd_PutAt_n>
 800025a:	e007      	b.n	800026c <main+0x98>
		} else {
			// Handle the case where reading data fails
			Alcd_PutAt_n(&lcd, 0, 0, "Error", 5);
 800025c:	2305      	movs	r3, #5
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <main+0xc0>)
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	4805      	ldr	r0, [pc, #20]	@ (800027c <main+0xa8>)
 8000268:	f000 fc43 	bl	8000af2 <Alcd_PutAt_n>
		}

		// Delay to control the refresh rate
		HAL_Delay(100);
 800026c:	2064      	movs	r0, #100	@ 0x64
 800026e:	f000 fd0f 	bl	8000c90 <HAL_Delay>
		if (ADXL345_ReadData(&config, &x, &y, &z) == ADXL345_success) {
 8000272:	e7ce      	b.n	8000212 <main+0x3e>
 8000274:	20000000 	.word	0x20000000
 8000278:	40021000 	.word	0x40021000
 800027c:	20000018 	.word	0x20000018
 8000280:	2000011c 	.word	0x2000011c
 8000284:	2000011a 	.word	0x2000011a
 8000288:	20000118 	.word	0x20000118
 800028c:	080033b0 	.word	0x080033b0
 8000290:	20000104 	.word	0x20000104
 8000294:	080033c0 	.word	0x080033c0

08000298 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	@ 0x40
 800029c:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	@ 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fbe6 	bl	8002a78 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c2:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002da:	63fb      	str	r3, [r7, #60]	@ 0x3c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 ffad 	bl	8002240 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x58>
	Error_Handler();
 80002ec:	f000 f876 	bl	80003dc <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	607b      	str	r3, [r7, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2302      	movs	r3, #2
 80002f6:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000300:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2102      	movs	r1, #2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fa1a 	bl	8002744 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
	Error_Handler();
 8000316:	f000 f861 	bl	80003dc <Error_Handler>
}
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	@ 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
/* USER CODE END I2C1_Init 0 */

/* USER CODE BEGIN I2C1_Init 1 */

/* USER CODE END I2C1_Init 1 */
hi2c1.Instance = I2C1;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_I2C1_Init+0x50>)
 800032a:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <MX_I2C1_Init+0x54>)
 800032c:	601a      	str	r2, [r3, #0]
hi2c1.Init.ClockSpeed = 400000;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000330:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_I2C1_Init+0x58>)
 8000332:	605a      	str	r2, [r3, #4]
hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
hi2c1.Init.OwnAddress1 = 0;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000346:	611a      	str	r2, [r3, #16]
hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000362:	f000 ff39 	bl	80011d8 <HAL_I2C_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C1_Init+0x4c>
	Error_Handler();
 800036c:	f000 f836 	bl	80003dc <Error_Handler>
}
/* USER CODE BEGIN I2C1_Init 2 */

/* USER CODE END I2C1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200000b0 	.word	0x200000b0
 8000378:	40005400 	.word	0x40005400
 800037c:	00061a80 	.word	0x00061a80

08000380 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_GPIO_Init+0x58>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a13      	ldr	r2, [pc, #76]	@ (80003d8 <MX_GPIO_Init+0x58>)
 800038c:	f043 0320 	orr.w	r3, r3, #32
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_GPIO_Init+0x58>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0320 	and.w	r3, r3, #32
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0304 	and.w	r3, r3, #4
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOB_CLK_ENABLE();
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a07      	ldr	r2, [pc, #28]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003bc:	f043 0308 	orr.w	r3, r3, #8
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <MX_GPIO_Init+0x58>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0308 	and.w	r3, r3, #8
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <Error_Handler+0x8>

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041e:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	@ (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a15      	ldr	r2, [pc, #84]	@ (80004bc <HAL_I2C_MspInit+0x70>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d123      	bne.n	80004b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <HAL_I2C_MspInit+0x74>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a13      	ldr	r2, [pc, #76]	@ (80004c0 <HAL_I2C_MspInit+0x74>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <HAL_I2C_MspInit+0x74>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000484:	23c0      	movs	r3, #192	@ 0xc0
 8000486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000488:	2312      	movs	r3, #18
 800048a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048c:	2303      	movs	r3, #3
 800048e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	480b      	ldr	r0, [pc, #44]	@ (80004c4 <HAL_I2C_MspInit+0x78>)
 8000498:	f000 fd02 	bl	8000ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800049c:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <HAL_I2C_MspInit+0x74>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4a07      	ldr	r2, [pc, #28]	@ (80004c0 <HAL_I2C_MspInit+0x74>)
 80004a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004a6:	61d3      	str	r3, [r2, #28]
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <HAL_I2C_MspInit+0x74>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40005400 	.word	0x40005400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <NMI_Handler+0x4>

080004d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <MemManage_Handler+0x4>

080004e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <UsageFault_Handler+0x4>

080004f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 fb9e 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <_sbrk>:
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
 8000550:	f002 fa9a 	bl	8002a88 <__errno>
 8000554:	4603      	mov	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a05      	ldr	r2, [pc, #20]	@ (8000584 <_sbrk+0x64>)
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20005000 	.word	0x20005000
 8000580:	00000400 	.word	0x00000400
 8000584:	20000120 	.word	0x20000120
 8000588:	20000270 	.word	0x20000270

0800058c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <Reset_Handler>:
 8000598:	f7ff fff8 	bl	800058c <SystemInit>
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <LoopFillZerobss+0xe>)
 800059e:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <LoopFillZerobss+0x12>)
 80005a0:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <LoopFillZerobss+0x16>)
 80005a2:	2300      	movs	r3, #0
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:
 80005a6:	58d4      	ldr	r4, [r2, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:
 80005ac:	18c4      	adds	r4, r0, r3
 80005ae:	428c      	cmp	r4, r1
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
 80005b2:	4a09      	ldr	r2, [pc, #36]	@ (80005d8 <LoopFillZerobss+0x1a>)
 80005b4:	4c09      	ldr	r4, [pc, #36]	@ (80005dc <LoopFillZerobss+0x1e>)
 80005b6:	2300      	movs	r3, #0
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:
 80005be:	42a2      	cmp	r2, r4
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>
 80005c2:	f002 fa67 	bl	8002a94 <__libc_init_array>
 80005c6:	f7ff fe05 	bl	80001d4 <main>
 80005ca:	4770      	bx	lr
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000094 	.word	0x20000094
 80005d4:	08003430 	.word	0x08003430
 80005d8:	20000094 	.word	0x20000094
 80005dc:	20000270 	.word	0x20000270

080005e0 <ADC1_2_IRQHandler>:
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <DWT_Delay_Init+0x58>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a13      	ldr	r2, [pc, #76]	@ (800063c <DWT_Delay_Init+0x58>)
 80005ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005f2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <DWT_Delay_Init+0x58>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a10      	ldr	r2, [pc, #64]	@ (800063c <DWT_Delay_Init+0x58>)
 80005fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005fe:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <DWT_Delay_Init+0x5c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <DWT_Delay_Init+0x5c>)
 8000606:	f023 0301 	bic.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <DWT_Delay_Init+0x5c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <DWT_Delay_Init+0x5c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <DWT_Delay_Init+0x5c>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800061e:	bf00      	nop
     __ASM volatile ("NOP");
 8000620:	bf00      	nop
  __ASM volatile ("NOP");
 8000622:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <DWT_Delay_Init+0x5c>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800062c:	2300      	movs	r3, #0
 800062e:	e000      	b.n	8000632 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000630:	2301      	movs	r3, #1
  }
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000edf0 	.word	0xe000edf0
 8000640:	e0001000 	.word	0xe0001000

08000644 <ADXL345_Init>:
/// @fn adxl345_stat_t ADXL345_Init(adxl345_t*)
/// @brief
///
/// @param accelerometer ptr to the accelerometer handle
/// @return
adxl345_stat_t ADXL345_Init(adxl345_t *accelerometer) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	//Set the device to measurement mode
	accelerometer->I2C_Buffer[0] = ADXL345_REG_POWER_CTL;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	222d      	movs	r2, #45	@ 0x2d
 8000650:	701a      	strb	r2, [r3, #0]
	accelerometer->I2C_Buffer[1] = (accelerometer->Link << 5)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7ddb      	ldrb	r3, [r3, #23]
 8000656:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	015b      	lsls	r3, r3, #5
			| (accelerometer->Auto_Sleep << 4) | (accelerometer->Measure << 3)
 800065e:	b25a      	sxtb	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7ddb      	ldrb	r3, [r3, #23]
 8000664:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	b25b      	sxtb	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b25a      	sxtb	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	7ddb      	ldrb	r3, [r3, #23]
 8000676:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	b25b      	sxtb	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b25a      	sxtb	r2, r3
			| (accelerometer->Sleep << 2) | (accelerometer->Wakeup);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7ddb      	ldrb	r3, [r3, #23]
 8000688:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	b25b      	sxtb	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b25a      	sxtb	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7ddb      	ldrb	r3, [r3, #23]
 800069a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	b2da      	uxtb	r2, r3
	accelerometer->I2C_Buffer[1] = (accelerometer->Link << 5)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	705a      	strb	r2, [r3, #1]

	//transfer the config to the device via I2C write

	return ADXL345_WriteConfig(accelerometer);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f805 	bl	80006bc <ADXL345_WriteConfig>
 80006b2:	4603      	mov	r3, r0

}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <ADXL345_WriteConfig>:
/// @fn uint8_t ADXL345_WriteConfig(adxl345_t*)
/// @brief
/// Applies the configuration to the device
/// @param accelerometer ptr to the accelerometer handle
/// @return ADXL345_success if successful
adxl345_stat_t ADXL345_WriteConfig(adxl345_t *accelerometer) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	//write the accelerometer offsets
	accelerometer->I2C_Buffer[0] = OFSX_X;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	221e      	movs	r2, #30
 80006c8:	701a      	strb	r2, [r3, #0]

	//load the offset values into the I2C buffer
	for (uint8_t x = 0; x < 3; x++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e00a      	b.n	80006e6 <ADXL345_WriteConfig+0x2a>
		accelerometer->I2C_Buffer[1 + x] = accelerometer->Offsets[x];
 80006d0:	7bfa      	ldrb	r2, [r7, #15]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3301      	adds	r3, #1
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	440a      	add	r2, r1
 80006da:	7d11      	ldrb	r1, [r2, #20]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 0; x < 3; x++) {
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	3301      	adds	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d9f1      	bls.n	80006d0 <ADXL345_WriteConfig+0x14>
	}
	//assigning the rate and power mode to BW_RATE reg
	accelerometer->I2C_Buffer[4] = ADXL345_REG_BW_RATE;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	222c      	movs	r2, #44	@ 0x2c
 80006f0:	711a      	strb	r2, [r3, #4]
	accelerometer->I2C_Buffer[5] = (accelerometer->Power_Mode << 4)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7ddb      	ldrb	r3, [r3, #23]
 80006f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	011b      	lsls	r3, r3, #4
			| (accelerometer->Data_Rate);
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7adb      	ldrb	r3, [r3, #11]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	4313      	orrs	r3, r2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	b2da      	uxtb	r2, r3
	accelerometer->I2C_Buffer[5] = (accelerometer->Power_Mode << 4)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	715a      	strb	r2, [r3, #5]

	if (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691b      	ldr	r3, [r3, #16]
			accelerometer->I2C_Buffer, 8) != 1) {
 8000714:	6879      	ldr	r1, [r7, #4]
	if (accelerometer->AG_HW_Interface_t.Write_HW_config(ADXL345_SLA,
 8000716:	2208      	movs	r2, #8
 8000718:	20a6      	movs	r0, #166	@ 0xa6
 800071a:	4798      	blx	r3
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	d001      	beq.n	8000726 <ADXL345_WriteConfig+0x6a>
		return ADXL345_failed;
 8000722:	2301      	movs	r3, #1
 8000724:	e000      	b.n	8000728 <ADXL345_WriteConfig+0x6c>
	} else {
		return ADXL345_success;
 8000726:	2300      	movs	r3, #0
	}
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <ADXL345_ReadData>:
/// @param x
/// @param y
/// @param z
/// @return
adxl345_stat_t ADXL345_ReadData(adxl345_t *accelerometer, int16_t *x,
		int16_t *y, int16_t *z) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	603b      	str	r3, [r7, #0]

	accelerometer->I2C_Buffer[0] = ADXL345_REG_DATAX0;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2232      	movs	r2, #50	@ 0x32
 8000742:	701a      	strb	r2, [r3, #0]

	if (accelerometer->AG_HW_Interface_t.Read_Hw_Data(ADXL345_SLA,
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	68db      	ldr	r3, [r3, #12]
			accelerometer->I2C_Buffer, 6) != 1) {
 8000748:	68f9      	ldr	r1, [r7, #12]
	if (accelerometer->AG_HW_Interface_t.Read_Hw_Data(ADXL345_SLA,
 800074a:	2206      	movs	r2, #6
 800074c:	20a6      	movs	r0, #166	@ 0xa6
 800074e:	4798      	blx	r3
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d001      	beq.n	800075a <ADXL345_ReadData+0x2a>
		return ADXL345_failed;
 8000756:	2301      	movs	r3, #1
 8000758:	e021      	b.n	800079e <ADXL345_ReadData+0x6e>
	}

	*x = ((int16_t) accelerometer->I2C_Buffer[2] << 8)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	789b      	ldrb	r3, [r3, #2]
 800075e:	021b      	lsls	r3, r3, #8
			| accelerometer->I2C_Buffer[1];
 8000760:	b21a      	sxth	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21a      	sxth	r2, r3
	*x = ((int16_t) accelerometer->I2C_Buffer[2] << 8)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t) accelerometer->I2C_Buffer[4] << 8)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	021b      	lsls	r3, r3, #8
			| accelerometer->I2C_Buffer[3];
 8000776:	b21a      	sxth	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b21a      	sxth	r2, r3
	*y = ((int16_t) accelerometer->I2C_Buffer[4] << 8)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t) accelerometer->I2C_Buffer[6] << 8)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	799b      	ldrb	r3, [r3, #6]
 800078a:	021b      	lsls	r3, r3, #8
			| accelerometer->I2C_Buffer[5];
 800078c:	b21a      	sxth	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21a      	sxth	r2, r3
	*z = ((int16_t) accelerometer->I2C_Buffer[6] << 8)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	801a      	strh	r2, [r3, #0]

	return ADXL345_success;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <DWT_Delay_us+0x40>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80007b6:	f002 f903 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4a0b      	ldr	r2, [pc, #44]	@ (80007ec <DWT_Delay_us+0x44>)
 80007be:	fba2 2303 	umull	r2, r3, r2, r3
 80007c2:	0c9b      	lsrs	r3, r3, #18
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	fb02 f303 	mul.w	r3, r2, r3
 80007ca:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80007cc:	bf00      	nop
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <DWT_Delay_us+0x40>)
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3f8      	bcc.n	80007ce <DWT_Delay_us+0x26>
		;
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e0001000 	.word	0xe0001000
 80007ec:	431bde83 	.word	0x431bde83

080007f0 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffd3 	bl	80007a8 <DWT_Delay_us>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a1b      	ldrb	r3, [r3, #8]
 8000820:	4619      	mov	r1, r3
 8000822:	230f      	movs	r3, #15
 8000824:	408b      	lsls	r3, r1
 8000826:	43db      	mvns	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	400a      	ands	r2, r1
 8000830:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	7a09      	ldrb	r1, [r1, #8]
 800083e:	408b      	lsls	r3, r1
 8000840:	4619      	mov	r1, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	430a      	orrs	r2, r1
 8000848:	60da      	str	r2, [r3, #12]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6958      	ldr	r0, [r3, #20]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	8b1b      	ldrh	r3, [r3, #24]
 8000868:	78fa      	ldrb	r2, [r7, #3]
 800086a:	4619      	mov	r1, r3
 800086c:	f000 fc9c 	bl	80011a8 <HAL_GPIO_WritePin>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68d8      	ldr	r0, [r3, #12]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	8a1b      	ldrh	r3, [r3, #16]
 800088c:	78fa      	ldrb	r2, [r7, #3]
 800088e:	4619      	mov	r1, r3
 8000890:	f000 fc8a 	bl	80011a8 <HAL_GPIO_WritePin>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	2301      	movs	r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fae8 	bl	8000ea0 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8a1b      	ldrh	r3, [r3, #16]
 80008d4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	f107 0208 	add.w	r2, r7, #8
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fadd 	bl	8000ea0 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7a1b      	ldrb	r3, [r3, #8]
 80008ea:	461a      	mov	r2, r3
 80008ec:	230f      	movs	r3, #15
 80008ee:	4093      	lsls	r3, r2
 80008f0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f107 0208 	add.w	r2, r7, #8
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 facf 	bl	8000ea0 <HAL_GPIO_Init>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	70fb      	strb	r3, [r7, #3]
 8000916:	4613      	mov	r3, r2
 8000918:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	4619      	mov	r1, r3
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff98 	bl	8000854 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000924:	78bb      	ldrb	r3, [r7, #2]
 8000926:	091b      	lsrs	r3, r3, #4
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4619      	mov	r1, r3
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff6c 	bl	800080a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000932:	2101      	movs	r1, #1
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff9f 	bl	8000878 <EN_SET>
 800093a:	200a      	movs	r0, #10
 800093c:	f7ff ff58 	bl	80007f0 <usDelay>
 8000940:	2100      	movs	r1, #0
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff98 	bl	8000878 <EN_SET>
 8000948:	2064      	movs	r0, #100	@ 0x64
 800094a:	f7ff ff51 	bl	80007f0 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800094e:	78bb      	ldrb	r3, [r7, #2]
 8000950:	4619      	mov	r1, r3
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ff59 	bl	800080a <Write_HalfByte>
	PulseEn
 8000958:	2101      	movs	r1, #1
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff8c 	bl	8000878 <EN_SET>
 8000960:	200a      	movs	r0, #10
 8000962:	f7ff ff45 	bl	80007f0 <usDelay>
 8000966:	2100      	movs	r1, #0
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff85 	bl	8000878 <EN_SET>
 800096e:	2064      	movs	r0, #100	@ 0x64
 8000970:	f7ff ff3e 	bl	80007f0 <usDelay>
	;
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
 8000988:	4613      	mov	r3, r2
 800098a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 800098c:	f7ff fe2a 	bl	80005e4 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff83 	bl	800089c <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2240      	movs	r2, #64	@ 0x40
 80009a0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	78ba      	ldrb	r2, [r7, #2]
 80009a6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 80009a8:	78bb      	ldrb	r3, [r7, #2]
 80009aa:	3340      	adds	r3, #64	@ 0x40
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff4d 	bl	8000854 <RS_SET>
	EN_SET(lcd, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff5b 	bl	8000878 <EN_SET>
	usDelay(50000);
 80009c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80009c6:	f7ff ff13 	bl	80007f0 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e018      	b.n	8000a02 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 80009d0:	2103      	movs	r1, #3
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff19 	bl	800080a <Write_HalfByte>
		PulseEn
 80009d8:	2101      	movs	r1, #1
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ff4c 	bl	8000878 <EN_SET>
 80009e0:	200a      	movs	r0, #10
 80009e2:	f7ff ff05 	bl	80007f0 <usDelay>
 80009e6:	2100      	movs	r1, #0
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff45 	bl	8000878 <EN_SET>
 80009ee:	2064      	movs	r0, #100	@ 0x64
 80009f0:	f7ff fefe 	bl	80007f0 <usDelay>
		;
		usDelay(4500);
 80009f4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80009f8:	f7ff fefa 	bl	80007f0 <usDelay>
	for (x = 0; x < 2; x++)
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	3301      	adds	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d9e3      	bls.n	80009d0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000a08:	2103      	movs	r1, #3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fefd 	bl	800080a <Write_HalfByte>
	PulseEn
 8000a10:	2101      	movs	r1, #1
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff30 	bl	8000878 <EN_SET>
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f7ff fee9 	bl	80007f0 <usDelay>
 8000a1e:	2100      	movs	r1, #0
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff29 	bl	8000878 <EN_SET>
 8000a26:	2064      	movs	r0, #100	@ 0x64
 8000a28:	f7ff fee2 	bl	80007f0 <usDelay>
	;
	usDelay(150);
 8000a2c:	2096      	movs	r0, #150	@ 0x96
 8000a2e:	f7ff fedf 	bl	80007f0 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000a32:	2102      	movs	r1, #2
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fee8 	bl	800080a <Write_HalfByte>
	PulseEn
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff1b 	bl	8000878 <EN_SET>
 8000a42:	200a      	movs	r0, #10
 8000a44:	f7ff fed4 	bl	80007f0 <usDelay>
 8000a48:	2100      	movs	r1, #0
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ff14 	bl	8000878 <EN_SET>
 8000a50:	2064      	movs	r0, #100	@ 0x64
 8000a52:	f7ff fecd 	bl	80007f0 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000a56:	2228      	movs	r2, #40	@ 0x28
 8000a58:	2100      	movs	r1, #0
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ff55 	bl	800090a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000a60:	2300      	movs	r3, #0
 8000a62:	2200      	movs	r2, #0
 8000a64:	2101      	movs	r1, #1
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f86d 	bl	8000b46 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f859 	bl	8000b24 <Alcd_Clear>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]
 8000a86:	4613      	mov	r3, r2
 8000a88:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	7e9a      	ldrb	r2, [r3, #26]
 8000a92:	78bb      	ldrb	r3, [r7, #2]
 8000a94:	4413      	add	r3, r2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff2f 	bl	800090a <Alcd_SendByte>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	75fb      	strb	r3, [r7, #23]
 8000ac6:	e00b      	b.n	8000ae0 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f7ff ff18 	bl	800090a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	3301      	adds	r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
 8000ae0:	7dfa      	ldrb	r2, [r7, #23]
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3ef      	bcc.n	8000ac8 <Alcd_Put_n+0x14>
	}
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	72fb      	strb	r3, [r7, #11]
 8000b00:	4613      	mov	r3, r2
 8000b02:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000b04:	7aba      	ldrb	r2, [r7, #10]
 8000b06:	7afb      	ldrb	r3, [r7, #11]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff ffb5 	bl	8000a7a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000b10:	7e3b      	ldrb	r3, [r7, #24]
 8000b12:	461a      	mov	r2, r3
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff ffcc 	bl	8000ab4 <Alcd_Put_n>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff feea 	bl	800090a <Alcd_SendByte>
	usDelay(2000);
 8000b36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b3a:	f7ff fe59 	bl	80007f0 <usDelay>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	461a      	mov	r2, r3
 8000b54:	4603      	mov	r3, r0
 8000b56:	70fb      	strb	r3, [r7, #3]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70bb      	strb	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7f9b      	ldrb	r3, [r3, #30]
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 8000b7a:	78bb      	ldrb	r3, [r7, #2]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7f9b      	ldrb	r3, [r3, #30]
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 8000b8e:	787b      	ldrb	r3, [r7, #1]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7f9b      	ldrb	r3, [r3, #30]
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7f9b      	ldrb	r3, [r3, #30]
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7f9b      	ldrb	r3, [r3, #30]
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fea3 	bl	800090a <Alcd_SendByte>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f92b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fbfe 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f935 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f90b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000038 	.word	0x20000038
 8000c50:	20000040 	.word	0x20000040
 8000c54:	2000003c 	.word	0x2000003c

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a03      	ldr	r2, [pc, #12]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	20000040 	.word	0x20000040
 8000c78:	20000124 	.word	0x20000124

08000c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	@ (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000124 	.word	0x20000124

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff fff0 	bl	8000c7c <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffe0 	bl	8000c7c <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000040 	.word	0x20000040

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff90 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff49 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff5e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff90 	bl	8000d90 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5f 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffb0 	bl	8000df4 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e169      	b.n	8001188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8158 	bne.w	8001182 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a9a      	ldr	r2, [pc, #616]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d05e      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000edc:	4a98      	ldr	r2, [pc, #608]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d875      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000ee2:	4a98      	ldr	r2, [pc, #608]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d058      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ee8:	4a96      	ldr	r2, [pc, #600]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d86f      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000eee:	4a96      	ldr	r2, [pc, #600]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d052      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ef4:	4a94      	ldr	r2, [pc, #592]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d869      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000efa:	4a94      	ldr	r2, [pc, #592]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d04c      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f00:	4a92      	ldr	r2, [pc, #584]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d863      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f06:	4a92      	ldr	r2, [pc, #584]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d046      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f0c:	4a90      	ldr	r2, [pc, #576]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d85d      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d82a      	bhi.n	8000f6c <HAL_GPIO_Init+0xcc>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d859      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <HAL_GPIO_Init+0x80>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f75 	.word	0x08000f75
 8000f28:	08000f87 	.word	0x08000f87
 8000f2c:	08000fc9 	.word	0x08000fc9
 8000f30:	08000fcf 	.word	0x08000fcf
 8000f34:	08000fcf 	.word	0x08000fcf
 8000f38:	08000fcf 	.word	0x08000fcf
 8000f3c:	08000fcf 	.word	0x08000fcf
 8000f40:	08000fcf 	.word	0x08000fcf
 8000f44:	08000fcf 	.word	0x08000fcf
 8000f48:	08000fcf 	.word	0x08000fcf
 8000f4c:	08000fcf 	.word	0x08000fcf
 8000f50:	08000fcf 	.word	0x08000fcf
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000fcf 	.word	0x08000fcf
 8000f5c:	08000fcf 	.word	0x08000fcf
 8000f60:	08000fcf 	.word	0x08000fcf
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f91 	.word	0x08000f91
 8000f6c:	4a79      	ldr	r2, [pc, #484]	@ (8001154 <HAL_GPIO_Init+0x2b4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f72:	e02c      	b.n	8000fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e029      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e024      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e01f      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	330c      	adds	r3, #12
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e01a      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e013      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	611a      	str	r2, [r3, #16]
          break;
 8000fba:	e009      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	615a      	str	r2, [r3, #20]
          break;
 8000fc6:	e003      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          break;
 8000fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	@ 0xff
 8000fd4:	d801      	bhi.n	8000fda <HAL_GPIO_Init+0x13a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e001      	b.n	8000fde <HAL_GPIO_Init+0x13e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2bff      	cmp	r3, #255	@ 0xff
 8000fe4:	d802      	bhi.n	8000fec <HAL_GPIO_Init+0x14c>
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x152>
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	3b08      	subs	r3, #8
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	6a39      	ldr	r1, [r7, #32]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80b1 	beq.w	8001182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001020:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a4c      	ldr	r2, [pc, #304]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001038:	4a48      	ldr	r2, [pc, #288]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a40      	ldr	r2, [pc, #256]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x1ec>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <HAL_GPIO_Init+0x2c4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1e8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a3e      	ldr	r2, [pc, #248]	@ (8001168 <HAL_GPIO_Init+0x2c8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1e4>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a3d      	ldr	r2, [pc, #244]	@ (800116c <HAL_GPIO_Init+0x2cc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1e0>
 800107c:	2303      	movs	r3, #3
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001080:	2304      	movs	r3, #4
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001084:	2302      	movs	r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x1ee>
 800108c:	2300      	movs	r3, #0
 800108e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800109e:	492f      	ldr	r1, [pc, #188]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	492c      	ldr	r1, [pc, #176]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4928      	ldr	r1, [pc, #160]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	4922      	ldr	r1, [pc, #136]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	491e      	ldr	r1, [pc, #120]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001108:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4918      	ldr	r1, [pc, #96]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4914      	ldr	r1, [pc, #80]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	490e      	ldr	r1, [pc, #56]	@ (8001170 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
 800113c:	e021      	b.n	8001182 <HAL_GPIO_Init+0x2e2>
 800113e:	bf00      	nop
 8001140:	10320000 	.word	0x10320000
 8001144:	10310000 	.word	0x10310000
 8001148:	10220000 	.word	0x10220000
 800114c:	10210000 	.word	0x10210000
 8001150:	10120000 	.word	0x10120000
 8001154:	10110000 	.word	0x10110000
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00
 8001168:	40011000 	.word	0x40011000
 800116c:	40011400 	.word	0x40011400
 8001170:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4909      	ldr	r1, [pc, #36]	@ (80011a4 <HAL_GPIO_Init+0x304>)
 800117e:	4013      	ands	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	3301      	adds	r3, #1
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f ae8e 	bne.w	8000eb4 <HAL_GPIO_Init+0x14>
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	372c      	adds	r7, #44	@ 0x2c
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e12b      	b.n	8001442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f924 	bl	800044c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2224      	movs	r2, #36	@ 0x24
 8001208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800122a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800123a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800123c:	f001 fbca 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a81      	ldr	r2, [pc, #516]	@ (800144c <HAL_I2C_Init+0x274>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d807      	bhi.n	800125c <HAL_I2C_Init+0x84>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a80      	ldr	r2, [pc, #512]	@ (8001450 <HAL_I2C_Init+0x278>)
 8001250:	4293      	cmp	r3, r2
 8001252:	bf94      	ite	ls
 8001254:	2301      	movls	r3, #1
 8001256:	2300      	movhi	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	e006      	b.n	800126a <HAL_I2C_Init+0x92>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a7d      	ldr	r2, [pc, #500]	@ (8001454 <HAL_I2C_Init+0x27c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	bf94      	ite	ls
 8001264:	2301      	movls	r3, #1
 8001266:	2300      	movhi	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e0e7      	b.n	8001442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4a78      	ldr	r2, [pc, #480]	@ (8001458 <HAL_I2C_Init+0x280>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a6a      	ldr	r2, [pc, #424]	@ (800144c <HAL_I2C_Init+0x274>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d802      	bhi.n	80012ac <HAL_I2C_Init+0xd4>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	e009      	b.n	80012c0 <HAL_I2C_Init+0xe8>
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	4a69      	ldr	r2, [pc, #420]	@ (800145c <HAL_I2C_Init+0x284>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	3301      	adds	r3, #1
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	495c      	ldr	r1, [pc, #368]	@ (800144c <HAL_I2C_Init+0x274>)
 80012dc:	428b      	cmp	r3, r1
 80012de:	d819      	bhi.n	8001314 <HAL_I2C_Init+0x13c>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ee:	1c59      	adds	r1, r3, #1
 80012f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012f4:	400b      	ands	r3, r1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <HAL_I2C_Init+0x138>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1e59      	subs	r1, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fbb1 f3f3 	udiv	r3, r1, r3
 8001308:	3301      	adds	r3, #1
 800130a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130e:	e051      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 8001310:	2304      	movs	r3, #4
 8001312:	e04f      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_I2C_Init+0x168>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1e58      	subs	r0, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	fbb0 f3f3 	udiv	r3, r0, r3
 800132e:	3301      	adds	r3, #1
 8001330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	e012      	b.n	8001366 <HAL_I2C_Init+0x18e>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1e58      	subs	r0, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	0099      	lsls	r1, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	fbb0 f3f3 	udiv	r3, r0, r3
 8001356:	3301      	adds	r3, #1
 8001358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_I2C_Init+0x196>
 800136a:	2301      	movs	r3, #1
 800136c:	e022      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10e      	bne.n	8001394 <HAL_I2C_Init+0x1bc>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e58      	subs	r0, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	440b      	add	r3, r1
 8001384:	fbb0 f3f3 	udiv	r3, r0, r3
 8001388:	3301      	adds	r3, #1
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001392:	e00f      	b.n	80013b4 <HAL_I2C_Init+0x1dc>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	0099      	lsls	r1, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	6809      	ldr	r1, [r1, #0]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6911      	ldr	r1, [r2, #16]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68d2      	ldr	r2, [r2, #12]
 80013ee:	4311      	orrs	r1, r2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6812      	ldr	r2, [r2, #0]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	000186a0 	.word	0x000186a0
 8001450:	001e847f 	.word	0x001e847f
 8001454:	003d08ff 	.word	0x003d08ff
 8001458:	431bde83 	.word	0x431bde83
 800145c:	10624dd3 	.word	0x10624dd3

08001460 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	817b      	strh	r3, [r7, #10]
 8001470:	4613      	mov	r3, r2
 8001472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff fc02 	bl	8000c7c <HAL_GetTick>
 8001478:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b20      	cmp	r3, #32
 8001484:	f040 80e0 	bne.w	8001648 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2319      	movs	r3, #25
 800148e:	2201      	movs	r2, #1
 8001490:	4970      	ldr	r1, [pc, #448]	@ (8001654 <HAL_I2C_Master_Transmit+0x1f4>)
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 fc9e 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	e0d3      	b.n	800164a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_I2C_Master_Transmit+0x50>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e0cc      	b.n	800164a <HAL_I2C_Master_Transmit+0x1ea>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d007      	beq.n	80014d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2221      	movs	r2, #33	@ 0x21
 80014ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2210      	movs	r2, #16
 80014f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	893a      	ldrh	r2, [r7, #8]
 8001506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a50      	ldr	r2, [pc, #320]	@ (8001658 <HAL_I2C_Master_Transmit+0x1f8>)
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001518:	8979      	ldrh	r1, [r7, #10]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fb08 	bl	8001b34 <I2C_MasterRequestWrite>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e08d      	b.n	800164a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001544:	e066      	b.n	8001614 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 fd5c 	bl	8002008 <I2C_WaitOnTXEFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00d      	beq.n	8001572 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	2b04      	cmp	r3, #4
 800155c:	d107      	bne.n	800156e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800156c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e06b      	b.n	800164a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800158c:	b29b      	uxth	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d11b      	bne.n	80015e8 <HAL_I2C_Master_Transmit+0x188>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d017      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	6a39      	ldr	r1, [r7, #32]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fd53 	bl	8002098 <I2C_WaitOnBTFFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00d      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d107      	bne.n	8001610 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800160e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e01a      	b.n	800164a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001618:	2b00      	cmp	r3, #0
 800161a:	d194      	bne.n	8001546 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800162a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	e000      	b.n	800164a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001648:	2302      	movs	r3, #2
  }
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	00100002 	.word	0x00100002
 8001658:	ffff0000 	.word	0xffff0000

0800165c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	461a      	mov	r2, r3
 8001668:	460b      	mov	r3, r1
 800166a:	817b      	strh	r3, [r7, #10]
 800166c:	4613      	mov	r3, r2
 800166e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff fb02 	bl	8000c7c <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b20      	cmp	r3, #32
 8001684:	f040 824b 	bne.w	8001b1e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2319      	movs	r3, #25
 800168e:	2201      	movs	r2, #1
 8001690:	497f      	ldr	r1, [pc, #508]	@ (8001890 <HAL_I2C_Master_Receive+0x234>)
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fb9e 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800169e:	2302      	movs	r3, #2
 80016a0:	e23e      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2C_Master_Receive+0x54>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e237      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d007      	beq.n	80016d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0201 	orr.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2222      	movs	r2, #34	@ 0x22
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2210      	movs	r2, #16
 80016f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	893a      	ldrh	r2, [r7, #8]
 8001706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a5f      	ldr	r2, [pc, #380]	@ (8001894 <HAL_I2C_Master_Receive+0x238>)
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001718:	8979      	ldrh	r1, [r7, #10]
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fa8a 	bl	8001c38 <I2C_MasterRequestRead>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1f8      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001732:	2b00      	cmp	r3, #0
 8001734:	d113      	bne.n	800175e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e1cc      	b.n	8001af8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001762:	2b01      	cmp	r3, #1
 8001764:	d11e      	bne.n	80017a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001774:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001776:	b672      	cpsid	i
}
 8001778:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017a0:	b662      	cpsie	i
}
 80017a2:	e035      	b.n	8001810 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d11e      	bne.n	80017ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017e6:	b662      	cpsie	i
}
 80017e8:	e012      	b.n	8001810 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001810:	e172      	b.n	8001af8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001816:	2b03      	cmp	r3, #3
 8001818:	f200 811f 	bhi.w	8001a5a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	2b01      	cmp	r3, #1
 8001822:	d123      	bne.n	800186c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fc7d 	bl	8002128 <I2C_WaitOnRXNEFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e173      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800186a:	e145      	b.n	8001af8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001870:	2b02      	cmp	r3, #2
 8001872:	d152      	bne.n	800191a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800187a:	2200      	movs	r2, #0
 800187c:	4906      	ldr	r1, [pc, #24]	@ (8001898 <HAL_I2C_Master_Receive+0x23c>)
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 faa8 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e148      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
 800188e:	bf00      	nop
 8001890:	00100002 	.word	0x00100002
 8001894:	ffff0000 	.word	0xffff0000
 8001898:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018e2:	b662      	cpsie	i
}
 80018e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001918:	e0ee      	b.n	8001af8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001920:	2200      	movs	r2, #0
 8001922:	4981      	ldr	r1, [pc, #516]	@ (8001b28 <HAL_I2C_Master_Receive+0x4cc>)
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fa55 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0f5      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001942:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800197a:	4b6c      	ldr	r3, [pc, #432]	@ (8001b2c <HAL_I2C_Master_Receive+0x4d0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	4a6b      	ldr	r2, [pc, #428]	@ (8001b30 <HAL_I2C_Master_Receive+0x4d4>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0a1a      	lsrs	r2, r3, #8
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00da      	lsls	r2, r3, #3
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	3b01      	subs	r3, #1
 8001998:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d118      	bne.n	80019d2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f043 0220 	orr.w	r2, r3, #32
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80019c2:	b662      	cpsie	i
}
 80019c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0a6      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d1d9      	bne.n	8001994 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a22:	b662      	cpsie	i
}
 8001a24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a58:	e04e      	b.n	8001af8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fb62 	bl	8002128 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e058      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d124      	bne.n	8001af8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ac4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f ae88 	bne.w	8001812 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2220      	movs	r2, #32
 8001b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	00010004 	.word	0x00010004
 8001b2c:	20000038 	.word	0x20000038
 8001b30:	14f8b589 	.word	0x14f8b589

08001b34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	460b      	mov	r3, r1
 8001b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d006      	beq.n	8001b5e <I2C_MasterRequestWrite+0x2a>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d003      	beq.n	8001b5e <I2C_MasterRequestWrite+0x2a>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b5c:	d108      	bne.n	8001b70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e00b      	b.n	8001b88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	2b12      	cmp	r3, #18
 8001b76:	d107      	bne.n	8001b88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f91d 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bae:	d103      	bne.n	8001bb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e035      	b.n	8001c28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bc4:	d108      	bne.n	8001bd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	e01b      	b.n	8001c10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	11db      	asrs	r3, r3, #7
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0306 	and.w	r3, r3, #6
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f063 030f 	orn	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	490e      	ldr	r1, [pc, #56]	@ (8001c30 <I2C_MasterRequestWrite+0xfc>)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f966 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e010      	b.n	8001c28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c06:	897b      	ldrh	r3, [r7, #10]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4907      	ldr	r1, [pc, #28]	@ (8001c34 <I2C_MasterRequestWrite+0x100>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f956 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	00010008 	.word	0x00010008
 8001c34:	00010002 	.word	0x00010002

08001c38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	460b      	mov	r3, r1
 8001c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d006      	beq.n	8001c72 <I2C_MasterRequestRead+0x3a>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <I2C_MasterRequestRead+0x3a>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c70:	d108      	bne.n	8001c84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e00b      	b.n	8001c9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	2b11      	cmp	r3, #17
 8001c8a:	d107      	bne.n	8001c9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f893 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc2:	d103      	bne.n	8001ccc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e079      	b.n	8001dc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cd8:	d108      	bne.n	8001cec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	e05f      	b.n	8001dac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cec:	897b      	ldrh	r3, [r7, #10]
 8001cee:	11db      	asrs	r3, r3, #7
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f063 030f 	orn	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4930      	ldr	r1, [pc, #192]	@ (8001dcc <I2C_MasterRequestRead+0x194>)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f8dc 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e054      	b.n	8001dc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4929      	ldr	r1, [pc, #164]	@ (8001dd0 <I2C_MasterRequestRead+0x198>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f8cc 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e044      	b.n	8001dc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f831 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d86:	d103      	bne.n	8001d90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e017      	b.n	8001dc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	11db      	asrs	r3, r3, #7
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 0306 	and.w	r3, r3, #6
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f063 030e 	orn	r3, r3, #14
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4907      	ldr	r1, [pc, #28]	@ (8001dd0 <I2C_MasterRequestRead+0x198>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f888 	bl	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	00010008 	.word	0x00010008
 8001dd0:	00010002 	.word	0x00010002

08001dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de4:	e048      	b.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d044      	beq.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7fe ff45 	bl	8000c7c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d139      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	43da      	mvns	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	e00c      	b.n	8001e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d116      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e023      	b.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10d      	bne.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	e00c      	b.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d093      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ed6:	e071      	b.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d123      	bne.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e067      	b.n	8002000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d041      	beq.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f38:	f7fe fea0 	bl	8000c7c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d302      	bcc.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d136      	bne.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10c      	bne.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e00b      	b.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e021      	b.n	8002000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10c      	bne.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e00b      	b.n	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f af6d 	bne.w	8001ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002014:	e034      	b.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f8e3 	bl	80021e2 <I2C_IsAcknowledgeFailed>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e034      	b.n	8002090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d028      	beq.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7fe fe25 	bl	8000c7c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11d      	bne.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b80      	cmp	r3, #128	@ 0x80
 8002050:	d016      	beq.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e007      	b.n	8002090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b80      	cmp	r3, #128	@ 0x80
 800208c:	d1c3      	bne.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020a4:	e034      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f89b 	bl	80021e2 <I2C_IsAcknowledgeFailed>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e034      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d028      	beq.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7fe fddd 	bl	8000c7c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11d      	bne.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d016      	beq.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e007      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d1c3      	bne.n	80020a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002134:	e049      	b.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b10      	cmp	r3, #16
 8002142:	d119      	bne.n	8002178 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0210 	mvn.w	r2, #16
 800214c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e030      	b.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002178:	f7fe fd80 	bl	8000c7c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	429a      	cmp	r2, r3
 8002186:	d302      	bcc.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11d      	bne.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b40      	cmp	r3, #64	@ 0x40
 800219a:	d016      	beq.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e007      	b.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	d1ae      	bne.n	8002136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f8:	d11b      	bne.n	8002232 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002202:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f043 0204 	orr.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e272      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002260:	4b92      	ldr	r3, [pc, #584]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b04      	cmp	r3, #4
 800226a:	d00c      	beq.n	8002286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800226c:	4b8f      	ldr	r3, [pc, #572]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d112      	bne.n	800229e <HAL_RCC_OscConfig+0x5e>
 8002278:	4b8c      	ldr	r3, [pc, #560]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002284:	d10b      	bne.n	800229e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	4b89      	ldr	r3, [pc, #548]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d06c      	beq.n	800236c <HAL_RCC_OscConfig+0x12c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d168      	bne.n	800236c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e24c      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x76>
 80022a8:	4b80      	ldr	r3, [pc, #512]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a7f      	ldr	r2, [pc, #508]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e02e      	b.n	8002314 <HAL_RCC_OscConfig+0xd4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x98>
 80022be:	4b7b      	ldr	r3, [pc, #492]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7a      	ldr	r2, [pc, #488]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4b78      	ldr	r3, [pc, #480]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a77      	ldr	r2, [pc, #476]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xd4>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0xbc>
 80022e2:	4b72      	ldr	r3, [pc, #456]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a71      	ldr	r2, [pc, #452]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6e      	ldr	r2, [pc, #440]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xd4>
 80022fc:	4b6b      	ldr	r3, [pc, #428]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6a      	ldr	r2, [pc, #424]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b68      	ldr	r3, [pc, #416]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a67      	ldr	r2, [pc, #412]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fcae 	bl	8000c7c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fcaa 	bl	8000c7c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e200      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b5d      	ldr	r3, [pc, #372]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xe4>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fc9a 	bl	8000c7c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fc96 	bl	8000c7c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1ec      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b53      	ldr	r3, [pc, #332]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x10c>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d063      	beq.n	8002442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237a:	4b4c      	ldr	r3, [pc, #304]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002386:	4b49      	ldr	r3, [pc, #292]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x18c>
 8002392:	4b46      	ldr	r3, [pc, #280]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x176>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1c0      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4939      	ldr	r1, [pc, #228]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e03a      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b36      	ldr	r3, [pc, #216]	@ (80024b0 <HAL_RCC_OscConfig+0x270>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe fc4f 	bl	8000c7c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fc4b 	bl	8000c7c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1a1      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	4b2d      	ldr	r3, [pc, #180]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4927      	ldr	r1, [pc, #156]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b26      	ldr	r3, [pc, #152]	@ (80024b0 <HAL_RCC_OscConfig+0x270>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fc2e 	bl	8000c7c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe fc2a 	bl	8000c7c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e180      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d03a      	beq.n	80024c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d019      	beq.n	800248a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7fe fc0e 	bl	8000c7c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fc0a 	bl	8000c7c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e160      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_RCC_OscConfig+0x26c>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f000 faba 	bl	80029fc <RCC_Delay>
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_RCC_OscConfig+0x274>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7fe fbf4 	bl	8000c7c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002496:	e00f      	b.n	80024b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7fe fbf0 	bl	8000c7c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d908      	bls.n	80024b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e146      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	42420000 	.word	0x42420000
 80024b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	4b92      	ldr	r3, [pc, #584]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e9      	bne.n	8002498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a6 	beq.w	800261e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b88      	ldr	r3, [pc, #544]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a87      	ldr	r2, [pc, #540]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	61d3      	str	r3, [r2, #28]
 80024ee:	4b85      	ldr	r3, [pc, #532]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4b82      	ldr	r3, [pc, #520]	@ (8002708 <HAL_RCC_OscConfig+0x4c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d118      	bne.n	800253c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250a:	4b7f      	ldr	r3, [pc, #508]	@ (8002708 <HAL_RCC_OscConfig+0x4c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7e      	ldr	r2, [pc, #504]	@ (8002708 <HAL_RCC_OscConfig+0x4c8>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002516:	f7fe fbb1 	bl	8000c7c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251e:	f7fe fbad 	bl	8000c7c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b64      	cmp	r3, #100	@ 0x64
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e103      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b75      	ldr	r3, [pc, #468]	@ (8002708 <HAL_RCC_OscConfig+0x4c8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x312>
 8002544:	4b6f      	ldr	r3, [pc, #444]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a6e      	ldr	r2, [pc, #440]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	e02d      	b.n	80025ae <HAL_RCC_OscConfig+0x36e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x334>
 800255a:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a69      	ldr	r2, [pc, #420]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b67      	ldr	r3, [pc, #412]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a66      	ldr	r2, [pc, #408]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	e01c      	b.n	80025ae <HAL_RCC_OscConfig+0x36e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x356>
 800257c:	4b61      	ldr	r3, [pc, #388]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a60      	ldr	r2, [pc, #384]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	4b5e      	ldr	r3, [pc, #376]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a5d      	ldr	r2, [pc, #372]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e00b      	b.n	80025ae <HAL_RCC_OscConfig+0x36e>
 8002596:	4b5b      	ldr	r3, [pc, #364]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a5a      	ldr	r2, [pc, #360]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	4b58      	ldr	r3, [pc, #352]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a57      	ldr	r2, [pc, #348]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d015      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fb61 	bl	8000c7c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fb5d 	bl	8000c7c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0b1      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ee      	beq.n	80025be <HAL_RCC_OscConfig+0x37e>
 80025e0:	e014      	b.n	800260c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fb4b 	bl	8000c7c <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fb47 	bl	8000c7c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e09b      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	4b40      	ldr	r3, [pc, #256]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ee      	bne.n	80025ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d105      	bne.n	800261e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002612:	4b3c      	ldr	r3, [pc, #240]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a3b      	ldr	r2, [pc, #236]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8087 	beq.w	8002736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002628:	4b36      	ldr	r3, [pc, #216]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d061      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d146      	bne.n	80026ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	4b33      	ldr	r3, [pc, #204]	@ (800270c <HAL_RCC_OscConfig+0x4cc>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe fb1b 	bl	8000c7c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe fb17 	bl	8000c7c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e06d      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265c:	4b29      	ldr	r3, [pc, #164]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002672:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4921      	ldr	r1, [pc, #132]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002684:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a19      	ldr	r1, [r3, #32]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	430b      	orrs	r3, r1
 8002696:	491b      	ldr	r1, [pc, #108]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <HAL_RCC_OscConfig+0x4cc>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe faeb 	bl	8000c7c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fae7 	bl	8000c7c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e03d      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x46a>
 80026c8:	e035      	b.n	8002736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fad4 	bl	8000c7c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fad0 	bl	8000c7c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e026      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x498>
 80026f6:	e01e      	b.n	8002736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e019      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
 800270c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002710:	4b0b      	ldr	r3, [pc, #44]	@ (8002740 <HAL_RCC_OscConfig+0x500>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	429a      	cmp	r2, r3
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0d0      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d910      	bls.n	8002788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0207 	bic.w	r2, r3, #7
 800276e:	4965      	ldr	r1, [pc, #404]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b63      	ldr	r3, [pc, #396]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b59      	ldr	r3, [pc, #356]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a58      	ldr	r2, [pc, #352]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b8:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a52      	ldr	r2, [pc, #328]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b50      	ldr	r3, [pc, #320]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	494d      	ldr	r1, [pc, #308]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d040      	beq.n	8002864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d115      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e073      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002812:	4b3d      	ldr	r3, [pc, #244]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06b      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4936      	ldr	r1, [pc, #216]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002834:	f7fe fa22 	bl	8000c7c <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fa1e 	bl	8000c7c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e053      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002864:	4b27      	ldr	r3, [pc, #156]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d210      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4922      	ldr	r1, [pc, #136]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b20      	ldr	r3, [pc, #128]	@ (8002904 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4916      	ldr	r1, [pc, #88]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490e      	ldr	r1, [pc, #56]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	490a      	ldr	r1, [pc, #40]	@ (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	5ccb      	ldrb	r3, [r1, r3]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x1cc>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_RCC_ClockConfig+0x1d0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f980 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000
 800290c:	080033c8 	.word	0x080033c8
 8002910:	20000038 	.word	0x20000038
 8002914:	2000003c 	.word	0x2000003c

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d002      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x30>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x36>
 8002946:	e027      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	613b      	str	r3, [r7, #16]
      break;
 800294c:	e027      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0c9b      	lsrs	r3, r3, #18
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002958:	5cd3      	ldrb	r3, [r2, r3]
 800295a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0c5b      	lsrs	r3, r3, #17
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	4a11      	ldr	r2, [pc, #68]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0d      	ldr	r2, [pc, #52]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800297a:	fb03 f202 	mul.w	r2, r3, r2
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	e004      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800298c:	fb02 f303 	mul.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	613b      	str	r3, [r7, #16]
      break;
 8002996:	e002      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800299a:	613b      	str	r3, [r7, #16]
      break;
 800299c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299e:	693b      	ldr	r3, [r7, #16]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	080033e0 	.word	0x080033e0
 80029b8:	080033f0 	.word	0x080033f0
 80029bc:	003d0900 	.word	0x003d0900

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	20000038 	.word	0x20000038

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d8:	f7ff fff2 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080033d8 	.word	0x080033d8

080029fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <RCC_Delay+0x34>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <RCC_Delay+0x38>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0a5b      	lsrs	r3, r3, #9
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a18:	bf00      	nop
  }
  while (Delay --);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	60fa      	str	r2, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f9      	bne.n	8002a18 <RCC_Delay+0x1c>
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	20000038 	.word	0x20000038
 8002a34:	10624dd3 	.word	0x10624dd3

08002a38 <siprintf>:
 8002a38:	b40e      	push	{r1, r2, r3}
 8002a3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a3e:	b500      	push	{lr}
 8002a40:	b09c      	sub	sp, #112	@ 0x70
 8002a42:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a44:	9002      	str	r0, [sp, #8]
 8002a46:	9006      	str	r0, [sp, #24]
 8002a48:	9107      	str	r1, [sp, #28]
 8002a4a:	9104      	str	r1, [sp, #16]
 8002a4c:	4808      	ldr	r0, [pc, #32]	@ (8002a70 <siprintf+0x38>)
 8002a4e:	4909      	ldr	r1, [pc, #36]	@ (8002a74 <siprintf+0x3c>)
 8002a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a54:	9105      	str	r1, [sp, #20]
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	a902      	add	r1, sp, #8
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	f000 f992 	bl	8002d84 <_svfiprintf_r>
 8002a60:	2200      	movs	r2, #0
 8002a62:	9b02      	ldr	r3, [sp, #8]
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	b01c      	add	sp, #112	@ 0x70
 8002a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a6c:	b003      	add	sp, #12
 8002a6e:	4770      	bx	lr
 8002a70:	20000044 	.word	0x20000044
 8002a74:	ffff0208 	.word	0xffff0208

08002a78 <memset>:
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4402      	add	r2, r0
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	f803 1b01 	strb.w	r1, [r3], #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <__errno>:
 8002a88:	4b01      	ldr	r3, [pc, #4]	@ (8002a90 <__errno+0x8>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000044 	.word	0x20000044

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	2600      	movs	r6, #0
 8002a98:	4d0c      	ldr	r5, [pc, #48]	@ (8002acc <__libc_init_array+0x38>)
 8002a9a:	4c0d      	ldr	r4, [pc, #52]	@ (8002ad0 <__libc_init_array+0x3c>)
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	f000 fc78 	bl	8003398 <_init>
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	4d0a      	ldr	r5, [pc, #40]	@ (8002ad4 <__libc_init_array+0x40>)
 8002aac:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad8 <__libc_init_array+0x44>)
 8002aae:	1b64      	subs	r4, r4, r5
 8002ab0:	10a4      	asrs	r4, r4, #2
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	08003428 	.word	0x08003428
 8002ad0:	08003428 	.word	0x08003428
 8002ad4:	08003428 	.word	0x08003428
 8002ad8:	0800342c 	.word	0x0800342c

08002adc <__retarget_lock_acquire_recursive>:
 8002adc:	4770      	bx	lr

08002ade <__retarget_lock_release_recursive>:
 8002ade:	4770      	bx	lr

08002ae0 <_free_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4605      	mov	r5, r0
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	d040      	beq.n	8002b6a <_free_r+0x8a>
 8002ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aec:	1f0c      	subs	r4, r1, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfb8      	it	lt
 8002af2:	18e4      	addlt	r4, r4, r3
 8002af4:	f000 f8de 	bl	8002cb4 <__malloc_lock>
 8002af8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <_free_r+0x8c>)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	b933      	cbnz	r3, 8002b0c <_free_r+0x2c>
 8002afe:	6063      	str	r3, [r4, #4]
 8002b00:	6014      	str	r4, [r2, #0]
 8002b02:	4628      	mov	r0, r5
 8002b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b08:	f000 b8da 	b.w	8002cc0 <__malloc_unlock>
 8002b0c:	42a3      	cmp	r3, r4
 8002b0e:	d908      	bls.n	8002b22 <_free_r+0x42>
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	1821      	adds	r1, r4, r0
 8002b14:	428b      	cmp	r3, r1
 8002b16:	bf01      	itttt	eq
 8002b18:	6819      	ldreq	r1, [r3, #0]
 8002b1a:	685b      	ldreq	r3, [r3, #4]
 8002b1c:	1809      	addeq	r1, r1, r0
 8002b1e:	6021      	streq	r1, [r4, #0]
 8002b20:	e7ed      	b.n	8002afe <_free_r+0x1e>
 8002b22:	461a      	mov	r2, r3
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b10b      	cbz	r3, 8002b2c <_free_r+0x4c>
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	d9fa      	bls.n	8002b22 <_free_r+0x42>
 8002b2c:	6811      	ldr	r1, [r2, #0]
 8002b2e:	1850      	adds	r0, r2, r1
 8002b30:	42a0      	cmp	r0, r4
 8002b32:	d10b      	bne.n	8002b4c <_free_r+0x6c>
 8002b34:	6820      	ldr	r0, [r4, #0]
 8002b36:	4401      	add	r1, r0
 8002b38:	1850      	adds	r0, r2, r1
 8002b3a:	4283      	cmp	r3, r0
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	d1e0      	bne.n	8002b02 <_free_r+0x22>
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4408      	add	r0, r1
 8002b46:	6010      	str	r0, [r2, #0]
 8002b48:	6053      	str	r3, [r2, #4]
 8002b4a:	e7da      	b.n	8002b02 <_free_r+0x22>
 8002b4c:	d902      	bls.n	8002b54 <_free_r+0x74>
 8002b4e:	230c      	movs	r3, #12
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	e7d6      	b.n	8002b02 <_free_r+0x22>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	1821      	adds	r1, r4, r0
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	bf01      	itttt	eq
 8002b5c:	6819      	ldreq	r1, [r3, #0]
 8002b5e:	685b      	ldreq	r3, [r3, #4]
 8002b60:	1809      	addeq	r1, r1, r0
 8002b62:	6021      	streq	r1, [r4, #0]
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	6054      	str	r4, [r2, #4]
 8002b68:	e7cb      	b.n	8002b02 <_free_r+0x22>
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	2000026c 	.word	0x2000026c

08002b70 <sbrk_aligned>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4e0f      	ldr	r6, [pc, #60]	@ (8002bb0 <sbrk_aligned+0x40>)
 8002b74:	460c      	mov	r4, r1
 8002b76:	6831      	ldr	r1, [r6, #0]
 8002b78:	4605      	mov	r5, r0
 8002b7a:	b911      	cbnz	r1, 8002b82 <sbrk_aligned+0x12>
 8002b7c:	f000 fbaa 	bl	80032d4 <_sbrk_r>
 8002b80:	6030      	str	r0, [r6, #0]
 8002b82:	4621      	mov	r1, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f000 fba5 	bl	80032d4 <_sbrk_r>
 8002b8a:	1c43      	adds	r3, r0, #1
 8002b8c:	d103      	bne.n	8002b96 <sbrk_aligned+0x26>
 8002b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b92:	4620      	mov	r0, r4
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
 8002b96:	1cc4      	adds	r4, r0, #3
 8002b98:	f024 0403 	bic.w	r4, r4, #3
 8002b9c:	42a0      	cmp	r0, r4
 8002b9e:	d0f8      	beq.n	8002b92 <sbrk_aligned+0x22>
 8002ba0:	1a21      	subs	r1, r4, r0
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f000 fb96 	bl	80032d4 <_sbrk_r>
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d1f2      	bne.n	8002b92 <sbrk_aligned+0x22>
 8002bac:	e7ef      	b.n	8002b8e <sbrk_aligned+0x1e>
 8002bae:	bf00      	nop
 8002bb0:	20000268 	.word	0x20000268

08002bb4 <_malloc_r>:
 8002bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb8:	1ccd      	adds	r5, r1, #3
 8002bba:	f025 0503 	bic.w	r5, r5, #3
 8002bbe:	3508      	adds	r5, #8
 8002bc0:	2d0c      	cmp	r5, #12
 8002bc2:	bf38      	it	cc
 8002bc4:	250c      	movcc	r5, #12
 8002bc6:	2d00      	cmp	r5, #0
 8002bc8:	4606      	mov	r6, r0
 8002bca:	db01      	blt.n	8002bd0 <_malloc_r+0x1c>
 8002bcc:	42a9      	cmp	r1, r5
 8002bce:	d904      	bls.n	8002bda <_malloc_r+0x26>
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	6033      	str	r3, [r6, #0]
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cb0 <_malloc_r+0xfc>
 8002bde:	f000 f869 	bl	8002cb4 <__malloc_lock>
 8002be2:	f8d8 3000 	ldr.w	r3, [r8]
 8002be6:	461c      	mov	r4, r3
 8002be8:	bb44      	cbnz	r4, 8002c3c <_malloc_r+0x88>
 8002bea:	4629      	mov	r1, r5
 8002bec:	4630      	mov	r0, r6
 8002bee:	f7ff ffbf 	bl	8002b70 <sbrk_aligned>
 8002bf2:	1c43      	adds	r3, r0, #1
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	d158      	bne.n	8002caa <_malloc_r+0xf6>
 8002bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8002bfc:	4627      	mov	r7, r4
 8002bfe:	2f00      	cmp	r7, #0
 8002c00:	d143      	bne.n	8002c8a <_malloc_r+0xd6>
 8002c02:	2c00      	cmp	r4, #0
 8002c04:	d04b      	beq.n	8002c9e <_malloc_r+0xea>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	4639      	mov	r1, r7
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	eb04 0903 	add.w	r9, r4, r3
 8002c10:	f000 fb60 	bl	80032d4 <_sbrk_r>
 8002c14:	4581      	cmp	r9, r0
 8002c16:	d142      	bne.n	8002c9e <_malloc_r+0xea>
 8002c18:	6821      	ldr	r1, [r4, #0]
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	1a6d      	subs	r5, r5, r1
 8002c1e:	4629      	mov	r1, r5
 8002c20:	f7ff ffa6 	bl	8002b70 <sbrk_aligned>
 8002c24:	3001      	adds	r0, #1
 8002c26:	d03a      	beq.n	8002c9e <_malloc_r+0xea>
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	442b      	add	r3, r5
 8002c2c:	6023      	str	r3, [r4, #0]
 8002c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	bb62      	cbnz	r2, 8002c90 <_malloc_r+0xdc>
 8002c36:	f8c8 7000 	str.w	r7, [r8]
 8002c3a:	e00f      	b.n	8002c5c <_malloc_r+0xa8>
 8002c3c:	6822      	ldr	r2, [r4, #0]
 8002c3e:	1b52      	subs	r2, r2, r5
 8002c40:	d420      	bmi.n	8002c84 <_malloc_r+0xd0>
 8002c42:	2a0b      	cmp	r2, #11
 8002c44:	d917      	bls.n	8002c76 <_malloc_r+0xc2>
 8002c46:	1961      	adds	r1, r4, r5
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	6025      	str	r5, [r4, #0]
 8002c4c:	bf18      	it	ne
 8002c4e:	6059      	strne	r1, [r3, #4]
 8002c50:	6863      	ldr	r3, [r4, #4]
 8002c52:	bf08      	it	eq
 8002c54:	f8c8 1000 	streq.w	r1, [r8]
 8002c58:	5162      	str	r2, [r4, r5]
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f000 f82f 	bl	8002cc0 <__malloc_unlock>
 8002c62:	f104 000b 	add.w	r0, r4, #11
 8002c66:	1d23      	adds	r3, r4, #4
 8002c68:	f020 0007 	bic.w	r0, r0, #7
 8002c6c:	1ac2      	subs	r2, r0, r3
 8002c6e:	bf1c      	itt	ne
 8002c70:	1a1b      	subne	r3, r3, r0
 8002c72:	50a3      	strne	r3, [r4, r2]
 8002c74:	e7af      	b.n	8002bd6 <_malloc_r+0x22>
 8002c76:	6862      	ldr	r2, [r4, #4]
 8002c78:	42a3      	cmp	r3, r4
 8002c7a:	bf0c      	ite	eq
 8002c7c:	f8c8 2000 	streq.w	r2, [r8]
 8002c80:	605a      	strne	r2, [r3, #4]
 8002c82:	e7eb      	b.n	8002c5c <_malloc_r+0xa8>
 8002c84:	4623      	mov	r3, r4
 8002c86:	6864      	ldr	r4, [r4, #4]
 8002c88:	e7ae      	b.n	8002be8 <_malloc_r+0x34>
 8002c8a:	463c      	mov	r4, r7
 8002c8c:	687f      	ldr	r7, [r7, #4]
 8002c8e:	e7b6      	b.n	8002bfe <_malloc_r+0x4a>
 8002c90:	461a      	mov	r2, r3
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	42a3      	cmp	r3, r4
 8002c96:	d1fb      	bne.n	8002c90 <_malloc_r+0xdc>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6053      	str	r3, [r2, #4]
 8002c9c:	e7de      	b.n	8002c5c <_malloc_r+0xa8>
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	6033      	str	r3, [r6, #0]
 8002ca4:	f000 f80c 	bl	8002cc0 <__malloc_unlock>
 8002ca8:	e794      	b.n	8002bd4 <_malloc_r+0x20>
 8002caa:	6005      	str	r5, [r0, #0]
 8002cac:	e7d6      	b.n	8002c5c <_malloc_r+0xa8>
 8002cae:	bf00      	nop
 8002cb0:	2000026c 	.word	0x2000026c

08002cb4 <__malloc_lock>:
 8002cb4:	4801      	ldr	r0, [pc, #4]	@ (8002cbc <__malloc_lock+0x8>)
 8002cb6:	f7ff bf11 	b.w	8002adc <__retarget_lock_acquire_recursive>
 8002cba:	bf00      	nop
 8002cbc:	20000264 	.word	0x20000264

08002cc0 <__malloc_unlock>:
 8002cc0:	4801      	ldr	r0, [pc, #4]	@ (8002cc8 <__malloc_unlock+0x8>)
 8002cc2:	f7ff bf0c 	b.w	8002ade <__retarget_lock_release_recursive>
 8002cc6:	bf00      	nop
 8002cc8:	20000264 	.word	0x20000264

08002ccc <__ssputs_r>:
 8002ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd0:	461f      	mov	r7, r3
 8002cd2:	688e      	ldr	r6, [r1, #8]
 8002cd4:	4682      	mov	sl, r0
 8002cd6:	42be      	cmp	r6, r7
 8002cd8:	460c      	mov	r4, r1
 8002cda:	4690      	mov	r8, r2
 8002cdc:	680b      	ldr	r3, [r1, #0]
 8002cde:	d82d      	bhi.n	8002d3c <__ssputs_r+0x70>
 8002ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ce8:	d026      	beq.n	8002d38 <__ssputs_r+0x6c>
 8002cea:	6965      	ldr	r5, [r4, #20]
 8002cec:	6909      	ldr	r1, [r1, #16]
 8002cee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf2:	eba3 0901 	sub.w	r9, r3, r1
 8002cf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cfa:	1c7b      	adds	r3, r7, #1
 8002cfc:	444b      	add	r3, r9
 8002cfe:	106d      	asrs	r5, r5, #1
 8002d00:	429d      	cmp	r5, r3
 8002d02:	bf38      	it	cc
 8002d04:	461d      	movcc	r5, r3
 8002d06:	0553      	lsls	r3, r2, #21
 8002d08:	d527      	bpl.n	8002d5a <__ssputs_r+0x8e>
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f7ff ff52 	bl	8002bb4 <_malloc_r>
 8002d10:	4606      	mov	r6, r0
 8002d12:	b360      	cbz	r0, 8002d6e <__ssputs_r+0xa2>
 8002d14:	464a      	mov	r2, r9
 8002d16:	6921      	ldr	r1, [r4, #16]
 8002d18:	f000 fafa 	bl	8003310 <memcpy>
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d26:	81a3      	strh	r3, [r4, #12]
 8002d28:	6126      	str	r6, [r4, #16]
 8002d2a:	444e      	add	r6, r9
 8002d2c:	6026      	str	r6, [r4, #0]
 8002d2e:	463e      	mov	r6, r7
 8002d30:	6165      	str	r5, [r4, #20]
 8002d32:	eba5 0509 	sub.w	r5, r5, r9
 8002d36:	60a5      	str	r5, [r4, #8]
 8002d38:	42be      	cmp	r6, r7
 8002d3a:	d900      	bls.n	8002d3e <__ssputs_r+0x72>
 8002d3c:	463e      	mov	r6, r7
 8002d3e:	4632      	mov	r2, r6
 8002d40:	4641      	mov	r1, r8
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	f000 faac 	bl	80032a0 <memmove>
 8002d48:	2000      	movs	r0, #0
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	1b9b      	subs	r3, r3, r6
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	4433      	add	r3, r6
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	f000 fae6 	bl	800332c <_realloc_r>
 8002d60:	4606      	mov	r6, r0
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d1e0      	bne.n	8002d28 <__ssputs_r+0x5c>
 8002d66:	4650      	mov	r0, sl
 8002d68:	6921      	ldr	r1, [r4, #16]
 8002d6a:	f7ff feb9 	bl	8002ae0 <_free_r>
 8002d6e:	230c      	movs	r3, #12
 8002d70:	f8ca 3000 	str.w	r3, [sl]
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d7e:	81a3      	strh	r3, [r4, #12]
 8002d80:	e7e9      	b.n	8002d56 <__ssputs_r+0x8a>
	...

08002d84 <_svfiprintf_r>:
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	4698      	mov	r8, r3
 8002d8a:	898b      	ldrh	r3, [r1, #12]
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	460d      	mov	r5, r1
 8002d92:	4614      	mov	r4, r2
 8002d94:	b09d      	sub	sp, #116	@ 0x74
 8002d96:	d510      	bpl.n	8002dba <_svfiprintf_r+0x36>
 8002d98:	690b      	ldr	r3, [r1, #16]
 8002d9a:	b973      	cbnz	r3, 8002dba <_svfiprintf_r+0x36>
 8002d9c:	2140      	movs	r1, #64	@ 0x40
 8002d9e:	f7ff ff09 	bl	8002bb4 <_malloc_r>
 8002da2:	6028      	str	r0, [r5, #0]
 8002da4:	6128      	str	r0, [r5, #16]
 8002da6:	b930      	cbnz	r0, 8002db6 <_svfiprintf_r+0x32>
 8002da8:	230c      	movs	r3, #12
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	b01d      	add	sp, #116	@ 0x74
 8002db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db6:	2340      	movs	r3, #64	@ 0x40
 8002db8:	616b      	str	r3, [r5, #20]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002dc4:	2330      	movs	r3, #48	@ 0x30
 8002dc6:	f04f 0901 	mov.w	r9, #1
 8002dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002f68 <_svfiprintf_r+0x1e4>
 8002dd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	469a      	mov	sl, r3
 8002dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dde:	b10a      	cbz	r2, 8002de4 <_svfiprintf_r+0x60>
 8002de0:	2a25      	cmp	r2, #37	@ 0x25
 8002de2:	d1f9      	bne.n	8002dd8 <_svfiprintf_r+0x54>
 8002de4:	ebba 0b04 	subs.w	fp, sl, r4
 8002de8:	d00b      	beq.n	8002e02 <_svfiprintf_r+0x7e>
 8002dea:	465b      	mov	r3, fp
 8002dec:	4622      	mov	r2, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	4638      	mov	r0, r7
 8002df2:	f7ff ff6b 	bl	8002ccc <__ssputs_r>
 8002df6:	3001      	adds	r0, #1
 8002df8:	f000 80a7 	beq.w	8002f4a <_svfiprintf_r+0x1c6>
 8002dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dfe:	445a      	add	r2, fp
 8002e00:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e02:	f89a 3000 	ldrb.w	r3, [sl]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 809f 	beq.w	8002f4a <_svfiprintf_r+0x1c6>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e16:	f10a 0a01 	add.w	sl, sl, #1
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	9307      	str	r3, [sp, #28]
 8002e1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e22:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e24:	4654      	mov	r4, sl
 8002e26:	2205      	movs	r2, #5
 8002e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e2c:	484e      	ldr	r0, [pc, #312]	@ (8002f68 <_svfiprintf_r+0x1e4>)
 8002e2e:	f000 fa61 	bl	80032f4 <memchr>
 8002e32:	9a04      	ldr	r2, [sp, #16]
 8002e34:	b9d8      	cbnz	r0, 8002e6e <_svfiprintf_r+0xea>
 8002e36:	06d0      	lsls	r0, r2, #27
 8002e38:	bf44      	itt	mi
 8002e3a:	2320      	movmi	r3, #32
 8002e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e40:	0711      	lsls	r1, r2, #28
 8002e42:	bf44      	itt	mi
 8002e44:	232b      	movmi	r3, #43	@ 0x2b
 8002e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e50:	d015      	beq.n	8002e7e <_svfiprintf_r+0xfa>
 8002e52:	4654      	mov	r4, sl
 8002e54:	2000      	movs	r0, #0
 8002e56:	f04f 0c0a 	mov.w	ip, #10
 8002e5a:	9a07      	ldr	r2, [sp, #28]
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e62:	3b30      	subs	r3, #48	@ 0x30
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d94b      	bls.n	8002f00 <_svfiprintf_r+0x17c>
 8002e68:	b1b0      	cbz	r0, 8002e98 <_svfiprintf_r+0x114>
 8002e6a:	9207      	str	r2, [sp, #28]
 8002e6c:	e014      	b.n	8002e98 <_svfiprintf_r+0x114>
 8002e6e:	eba0 0308 	sub.w	r3, r0, r8
 8002e72:	fa09 f303 	lsl.w	r3, r9, r3
 8002e76:	4313      	orrs	r3, r2
 8002e78:	46a2      	mov	sl, r4
 8002e7a:	9304      	str	r3, [sp, #16]
 8002e7c:	e7d2      	b.n	8002e24 <_svfiprintf_r+0xa0>
 8002e7e:	9b03      	ldr	r3, [sp, #12]
 8002e80:	1d19      	adds	r1, r3, #4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	9103      	str	r1, [sp, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bfbb      	ittet	lt
 8002e8a:	425b      	neglt	r3, r3
 8002e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e90:	9307      	strge	r3, [sp, #28]
 8002e92:	9307      	strlt	r3, [sp, #28]
 8002e94:	bfb8      	it	lt
 8002e96:	9204      	strlt	r2, [sp, #16]
 8002e98:	7823      	ldrb	r3, [r4, #0]
 8002e9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e9c:	d10a      	bne.n	8002eb4 <_svfiprintf_r+0x130>
 8002e9e:	7863      	ldrb	r3, [r4, #1]
 8002ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ea2:	d132      	bne.n	8002f0a <_svfiprintf_r+0x186>
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	3402      	adds	r4, #2
 8002ea8:	1d1a      	adds	r2, r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	9203      	str	r2, [sp, #12]
 8002eae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002eb2:	9305      	str	r3, [sp, #20]
 8002eb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002f6c <_svfiprintf_r+0x1e8>
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4650      	mov	r0, sl
 8002ebc:	7821      	ldrb	r1, [r4, #0]
 8002ebe:	f000 fa19 	bl	80032f4 <memchr>
 8002ec2:	b138      	cbz	r0, 8002ed4 <_svfiprintf_r+0x150>
 8002ec4:	2240      	movs	r2, #64	@ 0x40
 8002ec6:	9b04      	ldr	r3, [sp, #16]
 8002ec8:	eba0 000a 	sub.w	r0, r0, sl
 8002ecc:	4082      	lsls	r2, r0
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	3401      	adds	r4, #1
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed8:	2206      	movs	r2, #6
 8002eda:	4825      	ldr	r0, [pc, #148]	@ (8002f70 <_svfiprintf_r+0x1ec>)
 8002edc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ee0:	f000 fa08 	bl	80032f4 <memchr>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d036      	beq.n	8002f56 <_svfiprintf_r+0x1d2>
 8002ee8:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <_svfiprintf_r+0x1f0>)
 8002eea:	bb1b      	cbnz	r3, 8002f34 <_svfiprintf_r+0x1b0>
 8002eec:	9b03      	ldr	r3, [sp, #12]
 8002eee:	3307      	adds	r3, #7
 8002ef0:	f023 0307 	bic.w	r3, r3, #7
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	9303      	str	r3, [sp, #12]
 8002ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002efa:	4433      	add	r3, r6
 8002efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002efe:	e76a      	b.n	8002dd6 <_svfiprintf_r+0x52>
 8002f00:	460c      	mov	r4, r1
 8002f02:	2001      	movs	r0, #1
 8002f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f08:	e7a8      	b.n	8002e5c <_svfiprintf_r+0xd8>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f04f 0c0a 	mov.w	ip, #10
 8002f10:	4619      	mov	r1, r3
 8002f12:	3401      	adds	r4, #1
 8002f14:	9305      	str	r3, [sp, #20]
 8002f16:	4620      	mov	r0, r4
 8002f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f1c:	3a30      	subs	r2, #48	@ 0x30
 8002f1e:	2a09      	cmp	r2, #9
 8002f20:	d903      	bls.n	8002f2a <_svfiprintf_r+0x1a6>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0c6      	beq.n	8002eb4 <_svfiprintf_r+0x130>
 8002f26:	9105      	str	r1, [sp, #20]
 8002f28:	e7c4      	b.n	8002eb4 <_svfiprintf_r+0x130>
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f32:	e7f0      	b.n	8002f16 <_svfiprintf_r+0x192>
 8002f34:	ab03      	add	r3, sp, #12
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	462a      	mov	r2, r5
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <_svfiprintf_r+0x1f4>)
 8002f3e:	a904      	add	r1, sp, #16
 8002f40:	f3af 8000 	nop.w
 8002f44:	1c42      	adds	r2, r0, #1
 8002f46:	4606      	mov	r6, r0
 8002f48:	d1d6      	bne.n	8002ef8 <_svfiprintf_r+0x174>
 8002f4a:	89ab      	ldrh	r3, [r5, #12]
 8002f4c:	065b      	lsls	r3, r3, #25
 8002f4e:	f53f af2d 	bmi.w	8002dac <_svfiprintf_r+0x28>
 8002f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f54:	e72c      	b.n	8002db0 <_svfiprintf_r+0x2c>
 8002f56:	ab03      	add	r3, sp, #12
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <_svfiprintf_r+0x1f4>)
 8002f60:	a904      	add	r1, sp, #16
 8002f62:	f000 f87d 	bl	8003060 <_printf_i>
 8002f66:	e7ed      	b.n	8002f44 <_svfiprintf_r+0x1c0>
 8002f68:	080033f2 	.word	0x080033f2
 8002f6c:	080033f8 	.word	0x080033f8
 8002f70:	080033fc 	.word	0x080033fc
 8002f74:	00000000 	.word	0x00000000
 8002f78:	08002ccd 	.word	0x08002ccd

08002f7c <_printf_common>:
 8002f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f80:	4616      	mov	r6, r2
 8002f82:	4698      	mov	r8, r3
 8002f84:	688a      	ldr	r2, [r1, #8]
 8002f86:	690b      	ldr	r3, [r1, #16]
 8002f88:	4607      	mov	r7, r0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	bfb8      	it	lt
 8002f8e:	4613      	movlt	r3, r2
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f96:	460c      	mov	r4, r1
 8002f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f9c:	b10a      	cbz	r2, 8002fa2 <_printf_common+0x26>
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	6033      	str	r3, [r6, #0]
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	0699      	lsls	r1, r3, #26
 8002fa6:	bf42      	ittt	mi
 8002fa8:	6833      	ldrmi	r3, [r6, #0]
 8002faa:	3302      	addmi	r3, #2
 8002fac:	6033      	strmi	r3, [r6, #0]
 8002fae:	6825      	ldr	r5, [r4, #0]
 8002fb0:	f015 0506 	ands.w	r5, r5, #6
 8002fb4:	d106      	bne.n	8002fc4 <_printf_common+0x48>
 8002fb6:	f104 0a19 	add.w	sl, r4, #25
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	6832      	ldr	r2, [r6, #0]
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	dc2b      	bgt.n	800301c <_printf_common+0xa0>
 8002fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	3b00      	subs	r3, #0
 8002fcc:	bf18      	it	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	0692      	lsls	r2, r2, #26
 8002fd2:	d430      	bmi.n	8003036 <_printf_common+0xba>
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fdc:	47c8      	blx	r9
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d023      	beq.n	800302a <_printf_common+0xae>
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	6922      	ldr	r2, [r4, #16]
 8002fe6:	f003 0306 	and.w	r3, r3, #6
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf14      	ite	ne
 8002fee:	2500      	movne	r5, #0
 8002ff0:	6833      	ldreq	r3, [r6, #0]
 8002ff2:	f04f 0600 	mov.w	r6, #0
 8002ff6:	bf08      	it	eq
 8002ff8:	68e5      	ldreq	r5, [r4, #12]
 8002ffa:	f104 041a 	add.w	r4, r4, #26
 8002ffe:	bf08      	it	eq
 8003000:	1aed      	subeq	r5, r5, r3
 8003002:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003006:	bf08      	it	eq
 8003008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800300c:	4293      	cmp	r3, r2
 800300e:	bfc4      	itt	gt
 8003010:	1a9b      	subgt	r3, r3, r2
 8003012:	18ed      	addgt	r5, r5, r3
 8003014:	42b5      	cmp	r5, r6
 8003016:	d11a      	bne.n	800304e <_printf_common+0xd2>
 8003018:	2000      	movs	r0, #0
 800301a:	e008      	b.n	800302e <_printf_common+0xb2>
 800301c:	2301      	movs	r3, #1
 800301e:	4652      	mov	r2, sl
 8003020:	4641      	mov	r1, r8
 8003022:	4638      	mov	r0, r7
 8003024:	47c8      	blx	r9
 8003026:	3001      	adds	r0, #1
 8003028:	d103      	bne.n	8003032 <_printf_common+0xb6>
 800302a:	f04f 30ff 	mov.w	r0, #4294967295
 800302e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003032:	3501      	adds	r5, #1
 8003034:	e7c1      	b.n	8002fba <_printf_common+0x3e>
 8003036:	2030      	movs	r0, #48	@ 0x30
 8003038:	18e1      	adds	r1, r4, r3
 800303a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003044:	4422      	add	r2, r4
 8003046:	3302      	adds	r3, #2
 8003048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800304c:	e7c2      	b.n	8002fd4 <_printf_common+0x58>
 800304e:	2301      	movs	r3, #1
 8003050:	4622      	mov	r2, r4
 8003052:	4641      	mov	r1, r8
 8003054:	4638      	mov	r0, r7
 8003056:	47c8      	blx	r9
 8003058:	3001      	adds	r0, #1
 800305a:	d0e6      	beq.n	800302a <_printf_common+0xae>
 800305c:	3601      	adds	r6, #1
 800305e:	e7d9      	b.n	8003014 <_printf_common+0x98>

08003060 <_printf_i>:
 8003060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003064:	7e0f      	ldrb	r7, [r1, #24]
 8003066:	4691      	mov	r9, r2
 8003068:	2f78      	cmp	r7, #120	@ 0x78
 800306a:	4680      	mov	r8, r0
 800306c:	460c      	mov	r4, r1
 800306e:	469a      	mov	sl, r3
 8003070:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003076:	d807      	bhi.n	8003088 <_printf_i+0x28>
 8003078:	2f62      	cmp	r7, #98	@ 0x62
 800307a:	d80a      	bhi.n	8003092 <_printf_i+0x32>
 800307c:	2f00      	cmp	r7, #0
 800307e:	f000 80d3 	beq.w	8003228 <_printf_i+0x1c8>
 8003082:	2f58      	cmp	r7, #88	@ 0x58
 8003084:	f000 80ba 	beq.w	80031fc <_printf_i+0x19c>
 8003088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800308c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003090:	e03a      	b.n	8003108 <_printf_i+0xa8>
 8003092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003096:	2b15      	cmp	r3, #21
 8003098:	d8f6      	bhi.n	8003088 <_printf_i+0x28>
 800309a:	a101      	add	r1, pc, #4	@ (adr r1, 80030a0 <_printf_i+0x40>)
 800309c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030a0:	080030f9 	.word	0x080030f9
 80030a4:	0800310d 	.word	0x0800310d
 80030a8:	08003089 	.word	0x08003089
 80030ac:	08003089 	.word	0x08003089
 80030b0:	08003089 	.word	0x08003089
 80030b4:	08003089 	.word	0x08003089
 80030b8:	0800310d 	.word	0x0800310d
 80030bc:	08003089 	.word	0x08003089
 80030c0:	08003089 	.word	0x08003089
 80030c4:	08003089 	.word	0x08003089
 80030c8:	08003089 	.word	0x08003089
 80030cc:	0800320f 	.word	0x0800320f
 80030d0:	08003137 	.word	0x08003137
 80030d4:	080031c9 	.word	0x080031c9
 80030d8:	08003089 	.word	0x08003089
 80030dc:	08003089 	.word	0x08003089
 80030e0:	08003231 	.word	0x08003231
 80030e4:	08003089 	.word	0x08003089
 80030e8:	08003137 	.word	0x08003137
 80030ec:	08003089 	.word	0x08003089
 80030f0:	08003089 	.word	0x08003089
 80030f4:	080031d1 	.word	0x080031d1
 80030f8:	6833      	ldr	r3, [r6, #0]
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6032      	str	r2, [r6, #0]
 8003100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003108:	2301      	movs	r3, #1
 800310a:	e09e      	b.n	800324a <_printf_i+0x1ea>
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	1d19      	adds	r1, r3, #4
 8003112:	6031      	str	r1, [r6, #0]
 8003114:	0606      	lsls	r6, r0, #24
 8003116:	d501      	bpl.n	800311c <_printf_i+0xbc>
 8003118:	681d      	ldr	r5, [r3, #0]
 800311a:	e003      	b.n	8003124 <_printf_i+0xc4>
 800311c:	0645      	lsls	r5, r0, #25
 800311e:	d5fb      	bpl.n	8003118 <_printf_i+0xb8>
 8003120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003124:	2d00      	cmp	r5, #0
 8003126:	da03      	bge.n	8003130 <_printf_i+0xd0>
 8003128:	232d      	movs	r3, #45	@ 0x2d
 800312a:	426d      	negs	r5, r5
 800312c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003130:	230a      	movs	r3, #10
 8003132:	4859      	ldr	r0, [pc, #356]	@ (8003298 <_printf_i+0x238>)
 8003134:	e011      	b.n	800315a <_printf_i+0xfa>
 8003136:	6821      	ldr	r1, [r4, #0]
 8003138:	6833      	ldr	r3, [r6, #0]
 800313a:	0608      	lsls	r0, r1, #24
 800313c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003140:	d402      	bmi.n	8003148 <_printf_i+0xe8>
 8003142:	0649      	lsls	r1, r1, #25
 8003144:	bf48      	it	mi
 8003146:	b2ad      	uxthmi	r5, r5
 8003148:	2f6f      	cmp	r7, #111	@ 0x6f
 800314a:	6033      	str	r3, [r6, #0]
 800314c:	bf14      	ite	ne
 800314e:	230a      	movne	r3, #10
 8003150:	2308      	moveq	r3, #8
 8003152:	4851      	ldr	r0, [pc, #324]	@ (8003298 <_printf_i+0x238>)
 8003154:	2100      	movs	r1, #0
 8003156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800315a:	6866      	ldr	r6, [r4, #4]
 800315c:	2e00      	cmp	r6, #0
 800315e:	bfa8      	it	ge
 8003160:	6821      	ldrge	r1, [r4, #0]
 8003162:	60a6      	str	r6, [r4, #8]
 8003164:	bfa4      	itt	ge
 8003166:	f021 0104 	bicge.w	r1, r1, #4
 800316a:	6021      	strge	r1, [r4, #0]
 800316c:	b90d      	cbnz	r5, 8003172 <_printf_i+0x112>
 800316e:	2e00      	cmp	r6, #0
 8003170:	d04b      	beq.n	800320a <_printf_i+0x1aa>
 8003172:	4616      	mov	r6, r2
 8003174:	fbb5 f1f3 	udiv	r1, r5, r3
 8003178:	fb03 5711 	mls	r7, r3, r1, r5
 800317c:	5dc7      	ldrb	r7, [r0, r7]
 800317e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003182:	462f      	mov	r7, r5
 8003184:	42bb      	cmp	r3, r7
 8003186:	460d      	mov	r5, r1
 8003188:	d9f4      	bls.n	8003174 <_printf_i+0x114>
 800318a:	2b08      	cmp	r3, #8
 800318c:	d10b      	bne.n	80031a6 <_printf_i+0x146>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	07df      	lsls	r7, r3, #31
 8003192:	d508      	bpl.n	80031a6 <_printf_i+0x146>
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	6861      	ldr	r1, [r4, #4]
 8003198:	4299      	cmp	r1, r3
 800319a:	bfde      	ittt	le
 800319c:	2330      	movle	r3, #48	@ 0x30
 800319e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031a6:	1b92      	subs	r2, r2, r6
 80031a8:	6122      	str	r2, [r4, #16]
 80031aa:	464b      	mov	r3, r9
 80031ac:	4621      	mov	r1, r4
 80031ae:	4640      	mov	r0, r8
 80031b0:	f8cd a000 	str.w	sl, [sp]
 80031b4:	aa03      	add	r2, sp, #12
 80031b6:	f7ff fee1 	bl	8002f7c <_printf_common>
 80031ba:	3001      	adds	r0, #1
 80031bc:	d14a      	bne.n	8003254 <_printf_i+0x1f4>
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	b004      	add	sp, #16
 80031c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	f043 0320 	orr.w	r3, r3, #32
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	2778      	movs	r7, #120	@ 0x78
 80031d2:	4832      	ldr	r0, [pc, #200]	@ (800329c <_printf_i+0x23c>)
 80031d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	6831      	ldr	r1, [r6, #0]
 80031dc:	061f      	lsls	r7, r3, #24
 80031de:	f851 5b04 	ldr.w	r5, [r1], #4
 80031e2:	d402      	bmi.n	80031ea <_printf_i+0x18a>
 80031e4:	065f      	lsls	r7, r3, #25
 80031e6:	bf48      	it	mi
 80031e8:	b2ad      	uxthmi	r5, r5
 80031ea:	6031      	str	r1, [r6, #0]
 80031ec:	07d9      	lsls	r1, r3, #31
 80031ee:	bf44      	itt	mi
 80031f0:	f043 0320 	orrmi.w	r3, r3, #32
 80031f4:	6023      	strmi	r3, [r4, #0]
 80031f6:	b11d      	cbz	r5, 8003200 <_printf_i+0x1a0>
 80031f8:	2310      	movs	r3, #16
 80031fa:	e7ab      	b.n	8003154 <_printf_i+0xf4>
 80031fc:	4826      	ldr	r0, [pc, #152]	@ (8003298 <_printf_i+0x238>)
 80031fe:	e7e9      	b.n	80031d4 <_printf_i+0x174>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	f023 0320 	bic.w	r3, r3, #32
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	e7f6      	b.n	80031f8 <_printf_i+0x198>
 800320a:	4616      	mov	r6, r2
 800320c:	e7bd      	b.n	800318a <_printf_i+0x12a>
 800320e:	6833      	ldr	r3, [r6, #0]
 8003210:	6825      	ldr	r5, [r4, #0]
 8003212:	1d18      	adds	r0, r3, #4
 8003214:	6961      	ldr	r1, [r4, #20]
 8003216:	6030      	str	r0, [r6, #0]
 8003218:	062e      	lsls	r6, r5, #24
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	d501      	bpl.n	8003222 <_printf_i+0x1c2>
 800321e:	6019      	str	r1, [r3, #0]
 8003220:	e002      	b.n	8003228 <_printf_i+0x1c8>
 8003222:	0668      	lsls	r0, r5, #25
 8003224:	d5fb      	bpl.n	800321e <_printf_i+0x1be>
 8003226:	8019      	strh	r1, [r3, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	4616      	mov	r6, r2
 800322c:	6123      	str	r3, [r4, #16]
 800322e:	e7bc      	b.n	80031aa <_printf_i+0x14a>
 8003230:	6833      	ldr	r3, [r6, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	1d1a      	adds	r2, r3, #4
 8003236:	6032      	str	r2, [r6, #0]
 8003238:	681e      	ldr	r6, [r3, #0]
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	4630      	mov	r0, r6
 800323e:	f000 f859 	bl	80032f4 <memchr>
 8003242:	b108      	cbz	r0, 8003248 <_printf_i+0x1e8>
 8003244:	1b80      	subs	r0, r0, r6
 8003246:	6060      	str	r0, [r4, #4]
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	2300      	movs	r3, #0
 800324e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003252:	e7aa      	b.n	80031aa <_printf_i+0x14a>
 8003254:	4632      	mov	r2, r6
 8003256:	4649      	mov	r1, r9
 8003258:	4640      	mov	r0, r8
 800325a:	6923      	ldr	r3, [r4, #16]
 800325c:	47d0      	blx	sl
 800325e:	3001      	adds	r0, #1
 8003260:	d0ad      	beq.n	80031be <_printf_i+0x15e>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	079b      	lsls	r3, r3, #30
 8003266:	d413      	bmi.n	8003290 <_printf_i+0x230>
 8003268:	68e0      	ldr	r0, [r4, #12]
 800326a:	9b03      	ldr	r3, [sp, #12]
 800326c:	4298      	cmp	r0, r3
 800326e:	bfb8      	it	lt
 8003270:	4618      	movlt	r0, r3
 8003272:	e7a6      	b.n	80031c2 <_printf_i+0x162>
 8003274:	2301      	movs	r3, #1
 8003276:	4632      	mov	r2, r6
 8003278:	4649      	mov	r1, r9
 800327a:	4640      	mov	r0, r8
 800327c:	47d0      	blx	sl
 800327e:	3001      	adds	r0, #1
 8003280:	d09d      	beq.n	80031be <_printf_i+0x15e>
 8003282:	3501      	adds	r5, #1
 8003284:	68e3      	ldr	r3, [r4, #12]
 8003286:	9903      	ldr	r1, [sp, #12]
 8003288:	1a5b      	subs	r3, r3, r1
 800328a:	42ab      	cmp	r3, r5
 800328c:	dcf2      	bgt.n	8003274 <_printf_i+0x214>
 800328e:	e7eb      	b.n	8003268 <_printf_i+0x208>
 8003290:	2500      	movs	r5, #0
 8003292:	f104 0619 	add.w	r6, r4, #25
 8003296:	e7f5      	b.n	8003284 <_printf_i+0x224>
 8003298:	08003403 	.word	0x08003403
 800329c:	08003414 	.word	0x08003414

080032a0 <memmove>:
 80032a0:	4288      	cmp	r0, r1
 80032a2:	b510      	push	{r4, lr}
 80032a4:	eb01 0402 	add.w	r4, r1, r2
 80032a8:	d902      	bls.n	80032b0 <memmove+0x10>
 80032aa:	4284      	cmp	r4, r0
 80032ac:	4623      	mov	r3, r4
 80032ae:	d807      	bhi.n	80032c0 <memmove+0x20>
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	42a1      	cmp	r1, r4
 80032b4:	d008      	beq.n	80032c8 <memmove+0x28>
 80032b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032be:	e7f8      	b.n	80032b2 <memmove+0x12>
 80032c0:	4601      	mov	r1, r0
 80032c2:	4402      	add	r2, r0
 80032c4:	428a      	cmp	r2, r1
 80032c6:	d100      	bne.n	80032ca <memmove+0x2a>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032d2:	e7f7      	b.n	80032c4 <memmove+0x24>

080032d4 <_sbrk_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	2300      	movs	r3, #0
 80032d8:	4d05      	ldr	r5, [pc, #20]	@ (80032f0 <_sbrk_r+0x1c>)
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fd f91e 	bl	8000520 <_sbrk>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_sbrk_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_sbrk_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	20000260 	.word	0x20000260

080032f4 <memchr>:
 80032f4:	4603      	mov	r3, r0
 80032f6:	b510      	push	{r4, lr}
 80032f8:	b2c9      	uxtb	r1, r1
 80032fa:	4402      	add	r2, r0
 80032fc:	4293      	cmp	r3, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	d101      	bne.n	8003306 <memchr+0x12>
 8003302:	2000      	movs	r0, #0
 8003304:	e003      	b.n	800330e <memchr+0x1a>
 8003306:	7804      	ldrb	r4, [r0, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	428c      	cmp	r4, r1
 800330c:	d1f6      	bne.n	80032fc <memchr+0x8>
 800330e:	bd10      	pop	{r4, pc}

08003310 <memcpy>:
 8003310:	440a      	add	r2, r1
 8003312:	4291      	cmp	r1, r2
 8003314:	f100 33ff 	add.w	r3, r0, #4294967295
 8003318:	d100      	bne.n	800331c <memcpy+0xc>
 800331a:	4770      	bx	lr
 800331c:	b510      	push	{r4, lr}
 800331e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003322:	4291      	cmp	r1, r2
 8003324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003328:	d1f9      	bne.n	800331e <memcpy+0xe>
 800332a:	bd10      	pop	{r4, pc}

0800332c <_realloc_r>:
 800332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003330:	4680      	mov	r8, r0
 8003332:	4615      	mov	r5, r2
 8003334:	460c      	mov	r4, r1
 8003336:	b921      	cbnz	r1, 8003342 <_realloc_r+0x16>
 8003338:	4611      	mov	r1, r2
 800333a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800333e:	f7ff bc39 	b.w	8002bb4 <_malloc_r>
 8003342:	b92a      	cbnz	r2, 8003350 <_realloc_r+0x24>
 8003344:	f7ff fbcc 	bl	8002ae0 <_free_r>
 8003348:	2400      	movs	r4, #0
 800334a:	4620      	mov	r0, r4
 800334c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003350:	f000 f81a 	bl	8003388 <_malloc_usable_size_r>
 8003354:	4285      	cmp	r5, r0
 8003356:	4606      	mov	r6, r0
 8003358:	d802      	bhi.n	8003360 <_realloc_r+0x34>
 800335a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800335e:	d8f4      	bhi.n	800334a <_realloc_r+0x1e>
 8003360:	4629      	mov	r1, r5
 8003362:	4640      	mov	r0, r8
 8003364:	f7ff fc26 	bl	8002bb4 <_malloc_r>
 8003368:	4607      	mov	r7, r0
 800336a:	2800      	cmp	r0, #0
 800336c:	d0ec      	beq.n	8003348 <_realloc_r+0x1c>
 800336e:	42b5      	cmp	r5, r6
 8003370:	462a      	mov	r2, r5
 8003372:	4621      	mov	r1, r4
 8003374:	bf28      	it	cs
 8003376:	4632      	movcs	r2, r6
 8003378:	f7ff ffca 	bl	8003310 <memcpy>
 800337c:	4621      	mov	r1, r4
 800337e:	4640      	mov	r0, r8
 8003380:	f7ff fbae 	bl	8002ae0 <_free_r>
 8003384:	463c      	mov	r4, r7
 8003386:	e7e0      	b.n	800334a <_realloc_r+0x1e>

08003388 <_malloc_usable_size_r>:
 8003388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800338c:	1f18      	subs	r0, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	bfbc      	itt	lt
 8003392:	580b      	ldrlt	r3, [r1, r0]
 8003394:	18c0      	addlt	r0, r0, r3
 8003396:	4770      	bx	lr

08003398 <_init>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr

080033a4 <_fini>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr
